{"version":3,"sources":["contents/common/define.tsx","contents/common/TabbedPane.tsx","contents/redux/store.tsx","contents/redux/reducer.tsx","contents/systab/score/contTabs/note/element/detail/ScoreElementDetail.tsx","contents/systab/score/contTabs/note/element/ScoreElement.tsx","contents/systab/score/contTabs/note/OutlineSection.tsx","contents/systab/score/contTabs/note/floatwnd/context/NoteContextMenu.tsx","contents/systab/score/contTabs/note/floatwnd/chord/ChordSelector.tsx","contents/common/utils.tsx","contents/systab/score/contTabs/note/sideDetail/CurrentElementInfo.tsx","contents/systab/score/contTabs/note/floatwnd/backing/BackingOperation.tsx","contents/systab/score/contTabs/note/floatwnd/backing/NotesMatrix.tsx","contents/systab/score/contTabs/note/floatwnd/backing/SplitMeasure.tsx","contents/systab/score/contTabs/note/floatwnd/backing/BackingTable.tsx","contents/systab/score/contTabs/note/floatwnd/backing/StructMatrix.tsx","contents/systab/score/contTabs/note/floatwnd/backing/BackingEditor.tsx","contents/systab/score/contTabs/note/ScoreContNoteTab.tsx","contents/systab/score/contTabs/library/ScoreContLiblaryTab.tsx","contents/systab/score/contTabs/backing/ScoreContBackingTab.tsx","contents/systab/score/ScoreTab.tsx","contents/redux/dispatcher.tsx","contents/MainFrame.tsx","contents/operation/InputNoteTab.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SymbolKey","TabLabel","props","classValues","push","isActive","isDisable","className","join","onClick","selectTab","name","TabContents","cont","TabbedPane","useState","activeNo","setActiveNo","useEffect","tabList","contList","tabElements","forEach","tab","index","disable","undefined","selectTabIndex","id","groupName","DEGREE12_FLAT_LIST","DEGREE12_SHARP_LIST","KEY12_FLAT_LIST","KEY12_SHARP_LIST","DIATONIC_MAJOR_SCALE_DEGREE_NAMES","SymbolType","SYMBOL_PARAMS_LIST","key","MAJOR","sortNo","MINOR","SUS4","DIM","AUG","MAJ7","SEVENTH","MIN7","MINOR_MAJ7","ADD9","MINOR_ADD9","SIXTH_9TH","MINOR_MINUS5","TRIAD","TETRAD7TH","TETRAD9TH","FloatWndState","ChordPaletteLine","BACKING_SIDE","BACKING_LEN_TYPE","CHORD_MODE","EditMode","TypeNoteElement","DIATONIC_MAJOR_SCALE_LIST","degreeIndex","symbolKey","initialState","scoreTabIndex","noteData","scoreName","chordMode","SCALE","dataList","noteState","focusIndex","criteriaIndex","editMode","NORMAL","selectedList","floatwndState","NONE","chordPaletteState","isAddition","selectedLine","Root","rootIndex","isFlat","sustain","backingPaletteState","useChannels","isUsePedal","sideIndex","selectedLenIndex","selectedChannelIndex","layers","backingThreads","reffers","sampler","Sampler","toDestination","soundUseList","Array","ActionType","reducer","state","action","type","payload","SELECT_SCORETAB","ADD_SECTION","slice","detail","splice","Section","SET_DEGREE_INDEX","pos","SET_SYMBOL_KEY","INIT_DEFAULT_ELEMENTS","Init","tempo","rythm","scale","Fixed","label","SELECT_NOTE_ELEMENT","GET_REFFER_CONTEXT","contextMneu","reffer","GET_REFFER_CHORD_PALETTE","chordPalette","GET_REFFER_SECTION_PALETTE","sectionPalette","GET_REFFER_BACKING_PALETTE","backingPalette","FLOATWND_STATE","CHORD_PALETTE_SETTER","params","DETAIL_PARAMS_SETTER","GET_REFFER","SET_NOTE_DATA","data","SET_DATA_LIST","SET_NOTE_STATE","GET_ELEMENT_REFFER","INIT_BACKING_PALETTE","SET_USE_CHANNELS","baseScript","script","i","channelCount","length","lensSplitCount","lens","baseTable","table","y","x","BACKING_TOGGLE_MATRIX","lenIndex","channelIndex","divIndex","isUse","ScoreElementDetail","useContext","GlobalContext","dispatcher","dispatch","noteElement","paramLabels","Chord","degreeRoot","getDegreeRoot","chordName","getChordName","symbolName","symbol","getSymbol","isDiatonic","includes","sustainJsx","barCount","progress","remaindBeat","headMSec","Math","round","notesCount","backing","getNotesCount","DIRECT","Modulation","ScoreElement","ref","useRef","current","isSelected","isCriteria","normalElementClickAction","additionBtn","score","addChordElement","CHORD_PALETTE","retJsxList","no","deleteElement","getHeaderElement","getStyleFromType","posList","secNo","curSecNo","el","isCurrentSection","BACKING","some","setSelectedList","selectorElementClickAction","onContextMenu","e","style","left","clientX","top","clientY","CONTEXT_MENU","OutlineSection","isCurrent","MenuRecord","executer","menuType","keyName","NoteContextMenu","close","menuPropsList","curElement","addSectionElement","callBackingEditor","menuList","ChordSelector","chordList","symbolList","beatList","operation","isDirect","editorState","degS","keyIndex","degF","chdS","chdF","isHalf","buildLabelSrc","Symbol","Sustain","chord","setCurChordParam","getSymbolParams","CurrentElementInfo","inner","root","chordRoot","stateRecordList","title","value","stateList","structList","list","intervals","len","interval","struct","sound","BackingOperation","paletteState","curSideScript","curLenBean","curVolume","vels","setCurrentLenBean","lenBean","initBackingPalette","setCurrentLen","lenType","isDiv3","updateCurrentVolume","sub","nowVol","curLen","buttons","LEN16","callback","LEN8","LEN4","LEN2","LEN1","isAcceptHalf","isAcceptDiv3","addLen","delLen","backingState","side","LEFT","RIGHT","buttonList","button","getActiveState","curLayerIndex","lineIndex","cur","back","curCellRange","getCellRange","backLenBean","j","judge1","isOverlapJudge","judge2","range1","range2","head","width","getLenSize","size","NotesMatrix","channelList","matrixLayersJsx","l","linesJsx","layer","isCurLayer","cellList","classes","divList","divCnt","k","toggleMatrix","SplitMeasure","measureInner","measureLength","cnt","isLast","BackingTable","testPlaySound","channelJsxList","channel","soundFullName","volumeList","volume","height","setLayerIndex","setUsePedal","StructMatrix","structTable","cols","soundName","structs","relation","soundIndex","octave","floor","isNone","structIndex","isLimit","sort","a","b","setUseChannels","getChannelList","BackingEditor","BACKING_PALETTE","triggerAttack","setTimeout","triggerRelease","play","setCurBackingScript","EditModeBorder","PREVIEW","ScoreContNoteTab","elementList","sectionList","totalBeat","totalMsec","lastBar","bar","sectionMSec","isModalBlind","ScoreContLiblaryTab","styled","div","display","margin","color","fontSize","fontWeight","setNoteData","ScoreContBackingTab","ScoreTab","Dispatcher","dispatchBase","apllyFlash","backgroundColor","setNoteState","setCriteria","releaseCriteria","getInitElement","setEditMode","curIndex","deleteCurElement","focusPreviousElement","focusNextElement","focusPreviousSection","focusNextSection","focusInitElement","callChordSelector","chordDetail","line","updateLenIndex","getCurLenIndex","isFirstCurLen","isLastCurLen","sideScript","getSideScript","getCurLenBean","setCurLen","updateCurVolume","velocity","getCurVelocity","use","changeLayerIndex","baseLayers","count","cell","isProceed","threads","rec","editor","boxMs","isEnd","headMs","curLenMs","Number","toString","replace","notes","tail","barMs","this","createContext","MainFrame","useReducer","actionType","contextValue","tabIndex","onKeyDown","selectedData","diatonicChord","alert","JSON","stringify","baseBacking","parse","thr","clearInterval","releaseAll","KeyboardShortCutAction","Provider","App","document","oncontextmenu","window","addEventListener","indexOf","keyCode","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7679aa9d.chunk.js","sourcesContent":["export const DEGREE12_FLAT_LIST = [\r\n    'Ⅰ', 'bⅡ', 'Ⅱ', 'bⅢ', 'Ⅲ', 'Ⅳ', 'bⅤ', 'Ⅴ', 'bⅥ', 'Ⅵ', 'bⅦ', 'Ⅶ'\r\n];\r\nexport const DEGREE12_SHARP_LIST = [\r\n    'Ⅰ', '#Ⅰ', 'Ⅱ', '#Ⅱ', 'Ⅲ', 'Ⅳ', '#Ⅳ', 'Ⅴ', '#Ⅴ', 'Ⅵ', '#Ⅵ', 'Ⅶ'\r\n];\r\n\r\nexport const KEY12_FLAT_LIST = [\r\n    'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'\r\n];\r\nexport const KEY12_SHARP_LIST = [\r\n    'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'\r\n];\r\nexport const SCALE_LIST = [\r\n    'major', 'minor'\r\n];\r\nexport const RYTHM_LIST = [\r\n    '4/4', '2/4', '3/4', '6/8', '12/8'\r\n];\r\n\r\nexport const DIATONIC_MAJOR_SCALE_DEGREE_NAMES: string[] = [\r\n    'Ⅰ', 'Ⅰmaj7',\r\n    'Ⅱm', 'Ⅱm7',\r\n    'Ⅲm', 'Ⅲm7',\r\n    'Ⅳ', 'Ⅳmaj7',\r\n    'Ⅴ', 'Ⅴ7',\r\n    'Ⅵm', 'Ⅵm7',\r\n    'Ⅶm(-5)', 'Ⅶm7(-5)'\r\n]\r\n\r\nexport const DIATONIC_NATURAL_MINOR_SCALE_DEGREE_NAMES = [\r\n    'Ⅰm', 'Ⅰm7',\r\n    'Ⅱm(-5)', 'Ⅱm7(-5)',\r\n    '♭Ⅲ', '♭ⅢM7',\r\n    'Ⅳm', 'Ⅳm7',\r\n    'Ⅴm', 'Ⅴm7',\r\n    '♭Ⅵ', '♭ⅥM7',\r\n    '♭Ⅶ', '♭Ⅶ7'\r\n]\r\n\r\nexport type SymbolParams = {\r\n    key: SymbolKey\r\n    sortNo: number;\r\n    parentNo: number;\r\n    depth: number;\r\n    name: string;\r\n    struct: string[];\r\n    fixed: string[];\r\n    intervals: number[];\r\n}\r\n\r\nexport enum SymbolKey {\r\n    MAJOR,\r\n    MINOR,\r\n    SUS4,\r\n    DIM,\r\n    AUG,\r\n    MAJ7,\r\n    SEVENTH,\r\n    MIN7,\r\n    MINOR_MAJ7,\r\n    ADD9,\r\n    MINOR_ADD9,\r\n    SIXTH_9TH,\r\n    MINOR_MINUS5,\r\n}\r\n\r\nexport const SYMBOL_PARAMS_LIST: SymbolParams[] = [\r\n    { key: SymbolKey.MAJOR, sortNo: 1, \"parentNo\": 0, \"depth\": 1, \"name\": \"\", \"struct\": ['p1', 'M3', 'p5'], \"fixed\": ['p1'], \"intervals\": [0, 4, 7] },\r\n    { key: SymbolKey.MINOR, \"sortNo\": 2, \"parentNo\": 0, \"depth\": 1, \"name\": \"m\", \"struct\": ['p1', 'm3', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 7] },\r\n    { key: SymbolKey.SUS4, \"sortNo\": 3, \"parentNo\": 0, \"depth\": 1, \"name\": \"sus4\", \"struct\": ['p1', 'p4', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 5, 7] },\r\n    { key: SymbolKey.DIM, \"sortNo\": 4, \"parentNo\": 0, \"depth\": 1, \"name\": \"dim\", \"struct\": ['p1', 'm3', 'd5'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 6] },\r\n    { key: SymbolKey.AUG, \"sortNo\": 5, \"parentNo\": 0, \"depth\": 1, \"name\": \"aug\", \"struct\": ['p1', 'M3', 'a5'], \"fixed\": [\"p1\"], \"intervals\": [0, 4, 8] },\r\n    { key: SymbolKey.MAJ7, \"sortNo\": 6, \"parentNo\": 0, \"depth\": 1, \"name\": \"maj7\", \"struct\": ['p1', 'M3', 'p5', 'M7'], \"fixed\": [\"p1\"], \"intervals\": [0, 4, 7, 11] },\r\n    { key: SymbolKey.SEVENTH, \"sortNo\": 7, \"parentNo\": 0, \"depth\": 1, \"name\": \"7\", \"struct\": ['p1', 'M3', 'p5', 'm7'], \"fixed\": [\"p1\"], \"intervals\": [0, 4, 7, 10] },\r\n    { key: SymbolKey.MIN7, \"sortNo\": 8, \"parentNo\": 0, \"depth\": 1, \"name\": \"m7\", \"struct\": ['p1', 'm3', 'p5', 'm7'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 7, 10] },\r\n    { key: SymbolKey.MINOR_MAJ7, \"sortNo\": 9, \"parentNo\": 0, \"depth\": 1, \"name\": \"mmaj7\", \"struct\": ['p1', 'm3', 'p5', 'M7'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 7, 11] },\r\n    { key: SymbolKey.ADD9, \"sortNo\": 10, \"parentNo\": 0, \"depth\": 1, \"name\": \"add9\", \"struct\": ['p1', 'M2', 'M3', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 2, 4, 7] },\r\n    { key: SymbolKey.MINOR_ADD9, \"sortNo\": 11, \"parentNo\": 0, \"depth\": 1, \"name\": \"madd9\", \"struct\": ['p1', 'M2', 'm3', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 2, 3, 7] },\r\n    { key: SymbolKey.SIXTH_9TH, \"sortNo\": 12, \"parentNo\": 0, \"depth\": 1, \"name\": \"6(9)\", \"struct\": ['p1', 'M2', 'M3', 'p5', 'M6'], \"fixed\": [\"p1\"], \"intervals\": [0, 2, 4, 7, 9] },\r\n    { key: SymbolKey.MINOR_MINUS5, \"sortNo\": 13, \"parentNo\": 0, \"depth\": 1, \"name\": \"m(-5)\", \"struct\": ['p1', 'm3', 'd5'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 6] },\r\n];\r\n\r\nexport enum SymbolType {\r\n    TRIAD,\r\n    TETRAD7TH,\r\n    TETRAD9TH,\r\n}\r\n\r\nexport type SymbolTypeParams = {\r\n    type: SymbolType;\r\n    list: SymbolKey[];\r\n}\r\nexport const SYMBOL_TYPE_LIST: SymbolTypeParams[] = [\r\n    {\r\n        type: SymbolType.TRIAD, list: [\r\n            SymbolKey.MAJOR,\r\n            SymbolKey.MINOR,\r\n            SymbolKey.SUS4,\r\n            SymbolKey.DIM,\r\n            SymbolKey.AUG,\r\n            SymbolKey.MINOR_MINUS5\r\n        ]\r\n    },\r\n    {\r\n        type: SymbolType.TETRAD7TH, list: [\r\n            SymbolKey.MAJ7,\r\n            SymbolKey.SEVENTH,\r\n            SymbolKey.MINOR_MAJ7,\r\n        ]\r\n    },\r\n    {\r\n        type: SymbolType.TETRAD9TH, list: [\r\n            SymbolKey.ADD9,\r\n            SymbolKey.MINOR_ADD9,\r\n        ]\r\n    },\r\n];\r\n\r\n\r\n\r\nexport type ChordPair = {\r\n    degreeIndex: number;\r\n    symbolKey: SymbolKey;\r\n}\r\nexport const DIATONIC_MAJOR_SCALE_LIST: ChordPair[] = [\r\n    { degreeIndex: 0, symbolKey: SymbolKey.MAJOR },\r\n    { degreeIndex: 2, symbolKey: SymbolKey.MINOR },\r\n    { degreeIndex: 4, symbolKey: SymbolKey.MINOR },\r\n    { degreeIndex: 5, symbolKey: SymbolKey.MAJOR },\r\n    { degreeIndex: 7, symbolKey: SymbolKey.MAJOR },\r\n    { degreeIndex: 9, symbolKey: SymbolKey.MINOR },\r\n    { degreeIndex: 11, symbolKey: SymbolKey.MINOR_MINUS5 },\r\n];","import { useState, useEffect } from 'react';\r\n\r\nimport './TabbedPane.css';\r\n\r\ntype TabbedPaneProps = {\r\n    groupName: string;\r\n    activeNo: number;\r\n    tabElements: TabElements[];\r\n    selectTabIndex?: Function;\r\n}\r\n\r\ntype TabElements = {\r\n    name: string;\r\n    disable: boolean;\r\n    cont: JSX.Element;\r\n}\r\n\r\nconst TabbedPane = (props: TabbedPaneProps) => {\r\n    const [activeNo, setActiveNo] = useState(props.activeNo);\r\n\r\n    useEffect(() => {\r\n        setActiveNo(props.activeNo);\r\n    }, [props.activeNo]);\r\n\r\n    // タブ押下時の処理\r\n    const selectTabIndex = (index: number) => {\r\n        if (props.selectTabIndex !== undefined) {\r\n            props.selectTabIndex(index);\r\n        } else {\r\n            setActiveNo(index);\r\n        }\r\n    };\r\n\r\n    const tabList: JSX.Element[] = [];\r\n    const contList: JSX.Element[] = [];\r\n    props.tabElements.forEach((tab, index) => {\r\n        tabList.push(\r\n            <TabLabel\r\n                key={index} name={tab.name} isActive={index == activeNo} isDisable={tab.disable}\r\n                selectTab={() => selectTabIndex(index)}\r\n            />)\r\n            ;\r\n        contList.push(\r\n            <TabContents key={index} cont={tab.cont} isActive={index == activeNo} />\r\n        );\r\n    });\r\n    return (\r\n        <div id={props.groupName}>\r\n            <div className=\"tab-list\">\r\n                {tabList}\r\n            </div>\r\n            <div className=\"cont-list\">\r\n                {contList}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype TabLabelProps = {\r\n    name: string;\r\n    isActive: boolean;\r\n    isDisable: boolean;\r\n    selectTab: Function;\r\n}\r\n\r\nconst TabLabel = (props: TabLabelProps) => {\r\n    const classValues = [];\r\n    classValues.push('tab-menu');\r\n    classValues.push(props.isActive ? 'active' : '');\r\n    classValues.push(props.isDisable ? 'disable' : '');\r\n    return (\r\n        <div className={classValues.join(' ')} onClick={() => props.selectTab()}>\r\n            <span>{props.name}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype TabContentsProps = {\r\n    isActive: boolean;\r\n    cont: JSX.Element;\r\n}\r\n\r\nconst TabContents = (props: TabContentsProps) => {\r\n    if(!props.isActive) {\r\n        return (<></>);\r\n    }\r\n    return (\r\n        <div className=\"tab-cont\">\r\n            {props.cont}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabbedPane;","import { SymbolKey, SYMBOL_PARAMS_LIST } from 'contents/common/define'\r\nimport { Sampler } from 'tone'\r\nimport { ActionType } from './reducer'\r\n\r\nexport type Store = {\r\n    scoreTabIndex: number;\r\n    noteData: NoteData;\r\n    noteState: NoteState;\r\n    reffers: Reffers;\r\n    sampler: Sampler;\r\n    soundUseList: number[];\r\n}\r\n\r\nexport type Reffers = {\r\n    contextMneu: HTMLDivElement;\r\n    chordPalette: HTMLDivElement;\r\n    sectionPalette: HTMLDivElement;\r\n    initPalette: HTMLDivElement;\r\n    backingPalette: HTMLDivElement;\r\n}\r\n\r\nexport enum FloatWndState {\r\n    NONE = 'NONE',\r\n    CONTEXT_MENU = 'CONTEXT_MENU',\r\n    CHORD_PALETTE = 'CHORD_PALETTE',\r\n    SECTION_PALETTE = 'SECTION_PALETTE',\r\n    INIT_PALETTE = 'INIT_PALETTE',\r\n    BACKING_PALETTE = 'BACKING_PALETTE',\r\n}\r\nexport type ChordPaletteState = {\r\n    isAddition: boolean;\r\n    selectedLine: ChordPaletteLine,\r\n    rootIndex: number;\r\n    isFlat: false;\r\n    symbolKey: SymbolKey;\r\n    sustain: number;\r\n}\r\nexport enum ChordPaletteLine {\r\n    Root, Symbol, Sustain\r\n}\r\n\r\nexport type BackingEditorState = {\r\n    useChannels: ChannelParam[];\r\n    layers: BackingLayer[];\r\n    isUsePedal: boolean;\r\n    selectedLenIndex: number;\r\n    sideIndex: number;\r\n    selectedChannelIndex: number;\r\n}\r\nexport type ChannelParam = {\r\n    octave: number;\r\n    structIndex: number;\r\n}\r\nexport type BackingLayer = {\r\n    side: BACKING_SIDE;\r\n    lens: BackingLen[];\r\n    table: boolean[][][];\r\n    vels: number[];\r\n}\r\nexport enum BACKING_SIDE {\r\n    LEFT = 'LEFT',\r\n    RIGHT = 'RIGHT'\r\n}\r\n\r\nexport type BackingLen = {\r\n    len: BACKING_LEN_TYPE;\r\n    isHalf: boolean;\r\n    isDiv3: boolean;\r\n}\r\n\r\nexport enum BACKING_LEN_TYPE {\r\n    LEN16 = 'LEN16',\r\n    LEN8 = 'LEN8',\r\n    LEN4 = 'LEN4',\r\n    LEN2 = 'LEN2',\r\n    LEN1 = 'LEN1',\r\n}\r\n\r\n\r\nexport type NoteData = {\r\n    scoreName: string;\r\n    chordMode: CHORD_MODE;\r\n    dataList: NoteElement[];\r\n}\r\n\r\n/**\r\n * 譜面の入力モードを定義\r\n */\r\nexport enum CHORD_MODE {\r\n    /** 音階コード入力 */\r\n    SCALE = 'SCALE',\r\n    /** 直接コード入力 */\r\n    DIRECT = 'DIRECT'\r\n}\r\n\r\nexport type NoteState = {\r\n    focusIndex: number;\r\n    criteriaIndex: number;\r\n    editMode: EditMode;\r\n    selectedList: number[];\r\n    floatwndState: FloatWndState;\r\n    chordPaletteState: ChordPaletteState;\r\n    backingPaletteState: BackingEditorState;\r\n    backingThreads: NodeJS.Timeout[];\r\n}\r\n\r\nexport enum EditMode {\r\n    NORMAL,\r\n    BACKING,\r\n    PREVIEW,\r\n}\r\n\r\nexport type DetailInit = {\r\n    tempo: number;\r\n    rythm: string;\r\n    key: string;\r\n    scale: string;\r\n}\r\n\r\nexport type DetailSection = {\r\n    label: string;\r\n}\r\n\r\nexport type DetailChord = {\r\n    degreeIndex: number;\r\n    isFlat: boolean;\r\n    symbolKey: SymbolKey;\r\n    sustain: number;\r\n    backing: BackingScript;\r\n}\r\n\r\nexport type BackingScript = {\r\n    useChannels: ChannelParam[];\r\n    layers: BackingLayer[];\r\n    isUsePedal: boolean;\r\n}\r\n\r\nexport type DetailFixed = {\r\n    label: string;\r\n}\r\n\r\nexport type DetailModulation = {\r\n\r\n}\r\n\r\nexport type NoteElement = {\r\n    type: TypeNoteElement;\r\n    reffer?: HTMLDivElement;\r\n    detail: DetailInit | DetailSection | DetailChord | DetailModulation | DetailFixed;\r\n}\r\n\r\n/**\r\n * ノート要素の種類を定義します。\r\n */\r\nexport enum TypeNoteElement {\r\n    /** 初期値 */\r\n    Init = 'init',\r\n    /** セクション */\r\n    Section = 'section',\r\n    /** コード */\r\n    Chord = 'chord',\r\n    /** 転調 */\r\n    Modulation = 'modulation',\r\n    /** 固定要素 */\r\n    Fixed = 'fixed'\r\n}\r\n\r\n/**\r\n * ディスパッチメソッドに指定するオブジェクトを定義します。\r\n */\r\nexport type Action = {\r\n    type: ActionType;\r\n    payload: any;\r\n}\r\n\r\n/**\r\n * ステートの初期値\r\n */\r\nexport const initialState: Store = {\r\n    scoreTabIndex: 0,\r\n    noteData: { scoreName: '', chordMode: CHORD_MODE.SCALE, dataList: [] },\r\n    noteState: {\r\n        focusIndex: -1,\r\n        criteriaIndex: -1,\r\n        editMode: EditMode.NORMAL,\r\n        selectedList: [],\r\n        floatwndState: FloatWndState.NONE,\r\n        chordPaletteState: {\r\n            isAddition: false,\r\n            selectedLine: ChordPaletteLine.Root,\r\n            rootIndex: 0,\r\n            isFlat: false,\r\n            symbolKey: SYMBOL_PARAMS_LIST[0].key,\r\n            sustain: 4\r\n        },\r\n        backingPaletteState: {\r\n            useChannels: [],\r\n            isUsePedal: false,\r\n            sideIndex: 0,\r\n            selectedLenIndex: 0,\r\n            selectedChannelIndex: -1,\r\n            layers: []\r\n        },\r\n        backingThreads: []\r\n    },\r\n    reffers: {} as Reffers,\r\n    sampler: initSampler(),\r\n    soundUseList: new Array(88)\r\n};\r\n\r\nfunction initSampler() {\r\n    return new Sampler({\r\n        \"E2\": \"https://dl.dropbox.com/s/0aghs80w9aggubw/KEPSREC040.mp3?dl=0\",\r\n        \"E3\": \"https://dl.dropbox.com/s/wxtf0u0ly03hu44/KEPSREC052.mp3?dl=0\",\r\n        \"A#3\": \"https://dl.dropbox.com/s/hbm9d1vo5tlxymk/KEPSREC058.mp3?dl=0\",\r\n        \"E4\": \"https://dl.dropbox.com/s/3qy88udfkzmzr13/KEPSREC064.mp3?dl=0\",\r\n        \"E5\": \"https://dl.dropbox.com/s/tdjp24r9pfoi2ff/KEPSREC076.mp3?dl=0\",\r\n        \"E6\": \"https://dl.dropbox.com/s/onp7h2vn2d6nhs7/KEPSREC088.mp3?dl=0\",\r\n    }).toDestination();\r\n}","\r\nimport { Store, Action, TypeNoteElement, DetailChord, DetailSection, BackingLayer, BACKING_SIDE, ChannelParam, BACKING_LEN_TYPE } from './store'\r\n\r\n/**\r\n * ディスパッチメソッドの処理種別を定義します。\r\n */\r\nexport enum ActionType {\r\n    SELECT_SCORETAB = 'SELECT_SCORETAB',\r\n    ADD_SECTION = 'ADD_SECTION',\r\n    SET_DEGREE_INDEX = 'SET_DEGREE_INDEX',\r\n    SET_SYMBOL_KEY = 'SET_SYMBOL_KEY',\r\n    DETAIL_PARAMS_SETTER = 'DETAIL_PARAMS_SETTER',\r\n    GET_ELEMENT_REFFER = 'GET_ELEMENT_REFFER',\r\n    INIT_DEFAULT_ELEMENTS = 'INIT_DEFAULT_ELEMENTS',\r\n    SELECT_NOTE_ELEMENT = 'SELECT_NOTE_ELEMENT',\r\n    GET_REFFER = 'GET_REFFER',\r\n    GET_REFFER_CONTEXT = 'GET_REFFER_CONTEXT',\r\n    GET_REFFER_CHORD_PALETTE = 'GET_REFFER_CHORD_PALETTE',\r\n    GET_REFFER_SECTION_PALETTE = 'GET_REFFER_SECTION_PALETTE',\r\n    GET_REFFER_BACKING_PALETTE = 'GET_REFFER_BACKING_PALETTE',\r\n    FLOATWND_STATE = 'FLOATWND_STATE',\r\n    CHORD_PALETTE_SETTER = 'CHORD_PALETTE_SETTER',\r\n    SET_NOTE_DATA = 'SET_NOTE_DATA',\r\n    SET_DATA_LIST = 'SET_DATA_LIST',\r\n    SET_NOTE_STATE = 'SET_NOTE_STATE',\r\n    INIT_BACKING_PALETTE = 'INIT_BACKING_PALETTE',\r\n    SET_USE_CHANNELS = 'SET_USE_CHANNELS',\r\n    BACKING_TOGGLE_MATRIX = 'BACKING_TOGGLE_MATRIX'\r\n}\r\n\r\nexport const reducer = (state: Store, action: Action): Store => {\r\n    const type: ActionType = action.type;\r\n    const payload: any = action.payload;\r\n    switch (type) {\r\n        case ActionType.SELECT_SCORETAB:\r\n            return { ...state, scoreTabIndex: payload.index };\r\n        case ActionType.ADD_SECTION: {\r\n            const dataList = state.noteData.dataList.slice();\r\n            const detail = {} as DetailSection;\r\n            detail.label = 'Section';\r\n            dataList.splice(payload.index + 1, 0, {\r\n                type: TypeNoteElement.Section,\r\n                detail: detail\r\n            });\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SET_DEGREE_INDEX: {\r\n            const detail = state.noteData.dataList[payload.pos].detail as DetailChord;\r\n            detail.degreeIndex = payload.degreeIndex;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: state.noteData.dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SET_SYMBOL_KEY: {\r\n            const detail = state.noteData.dataList[payload.pos].detail as DetailChord;\r\n            detail.symbolKey = payload.symbolKey;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: state.noteData.dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.INIT_DEFAULT_ELEMENTS: {\r\n            // const dataList = state.noteData.dataList;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: [\r\n                        {\r\n                            type: TypeNoteElement.Init,\r\n                            detail: {\r\n                                tempo: 80,\r\n                                rythm: '4/4',\r\n                                key: 0,\r\n                                scale: 'major'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: TypeNoteElement.Fixed,\r\n                            detail: {\r\n                                label: 'START'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: TypeNoteElement.Section,\r\n                            detail: {\r\n                                label: 'Section'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: TypeNoteElement.Fixed,\r\n                            detail: {\r\n                                label: 'END'\r\n                            }\r\n                        },\r\n                    ]\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SELECT_NOTE_ELEMENT: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, focusIndex: payload.index\r\n                }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_CONTEXT: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, contextMneu: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_CHORD_PALETTE: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, chordPalette: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_SECTION_PALETTE: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, sectionPalette: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_BACKING_PALETTE: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, backingPalette: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.FLOATWND_STATE: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, floatwndState: payload.state\r\n                }\r\n            };\r\n        }\r\n        case ActionType.CHORD_PALETTE_SETTER: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, chordPaletteState: payload.params\r\n                }\r\n            };\r\n        }\r\n        case ActionType.DETAIL_PARAMS_SETTER: {\r\n            const dataList = state.noteData.dataList.slice();\r\n            const data = dataList[payload.pos];\r\n            data.detail = payload.params;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER: {\r\n            return {\r\n                ...state, reffers: payload.reffers\r\n            };\r\n        }\r\n        case ActionType.SET_NOTE_DATA: {\r\n            return {\r\n                ...state, noteData: payload.data\r\n            };\r\n        }\r\n        case ActionType.SET_DATA_LIST: {\r\n            return {\r\n                ...state, noteData: { ...state.noteData, dataList: payload.dataList }\r\n            };\r\n        }\r\n        case ActionType.SET_NOTE_STATE: {\r\n            return {\r\n                ...state, noteState: payload.noteState\r\n            };\r\n        }\r\n        case ActionType.GET_ELEMENT_REFFER: {\r\n            const data = state.noteData.dataList[payload.pos];\r\n            data.reffer = payload.reffer;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: state.noteData.dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.INIT_BACKING_PALETTE: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, backingPaletteState: payload.backingPaletteState\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SET_USE_CHANNELS: {\r\n            const backingPaletteState = state.noteState.backingPaletteState;\r\n            const baseScript = backingPaletteState.layers;\r\n            const useChannels = payload.useChannels as ChannelParam[];\r\n            const script: BackingLayer[] = new Array(2);\r\n            for (let i = 0; i < 2; i++) {\r\n                const channelCount = backingPaletteState.useChannels.length;\r\n                const lensSplitCount = baseScript[i].lens.length;\r\n                const baseTable = baseScript[i].table;\r\n                const table: boolean[][][] = new Array(channelCount);\r\n\r\n                for (let y = 0; y < channelCount; y++) {\r\n                    if (y < baseTable.length) {\r\n                        table[y] = baseTable[y];\r\n                    } else {\r\n                        table[y] = new Array(lensSplitCount);\r\n                        for (let x = 0; x < lensSplitCount; x++) {\r\n                            table[y][x] = new Array(1);\r\n                            table[y][x][0] = false;\r\n                        }\r\n                    }\r\n                }\r\n                script[i] = {\r\n                    ...baseScript[i],\r\n                    table,\r\n                };\r\n            }\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, backingPaletteState: {\r\n                        ...state.noteState.backingPaletteState,\r\n                        useChannels,\r\n                        layers: script\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        case ActionType.BACKING_TOGGLE_MATRIX: {\r\n            const sideIndex: number = payload.sideIndex;\r\n            const lenIndex: number = payload.lenIndex;\r\n            const channelIndex: number = payload.channelIndex;\r\n            const divIndex: number = payload.divIndex;\r\n            const script = state.noteState.backingPaletteState.layers;\r\n            script[sideIndex].table[channelIndex][lenIndex][divIndex] = payload.isUse;\r\n            // script[sideIndex].table[channelIndex] = line;\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, backingPaletteState: {\r\n                        ...state.noteState.backingPaletteState, layers: script\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n","import { DEGREE12_FLAT_LIST, DEGREE12_SHARP_LIST, DIATONIC_MAJOR_SCALE_DEGREE_NAMES, KEY12_FLAT_LIST, KEY12_SHARP_LIST, SymbolKey, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { DetailChord, DetailFixed, DetailInit, DetailModulation, DetailSection, CHORD_MODE, NoteElement, TypeNoteElement } from \"contents/redux/store\";\r\nimport { useContext } from \"react\";\r\nimport { ProgressInfo } from \"../ScoreElement\";\r\n\r\ntype ScoreElementDetailProps = {\r\n    noteElement: NoteElement;\r\n    progress: ProgressInfo;\r\n}\r\n\r\nconst ScoreElementDetail = (props: ScoreElementDetailProps) => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    const chordMode = state.noteData.chordMode;\r\n\r\n    switch (props.noteElement.type) {\r\n        case TypeNoteElement.Fixed: {\r\n            const detail = props.noteElement.detail as DetailFixed;\r\n            return (\r\n                <span>{detail.label}</span>\r\n            );\r\n        }\r\n        case TypeNoteElement.Init: {\r\n            const detail = props.noteElement.detail as DetailInit;\r\n            const paramLabels: JSX.Element[] = [];\r\n            paramLabels.push(\r\n                <div key={paramLabels.length}>\r\n                    <span>Tempo: </span>\r\n                    <span>{detail.tempo}</span>\r\n                </div>\r\n            );\r\n            paramLabels.push(\r\n                <div key={paramLabels.length}>\r\n                    <span>Rythm: </span>\r\n                    <span>{detail.rythm}</span>\r\n                </div>\r\n            );\r\n            if (chordMode == CHORD_MODE.SCALE) {\r\n                if (state.noteData.chordMode == CHORD_MODE.SCALE) {\r\n                    paramLabels.push(\r\n                        <div key={paramLabels.length}>\r\n                            <span>Key: </span>\r\n                            {/* <span>{detail.key}</span> */}\r\n                            <span>C</span>\r\n                        </div>\r\n                    );\r\n                    paramLabels.push(\r\n                        <div key={paramLabels.length}>\r\n                            <span>Scale: </span>\r\n                            <span>{detail.scale}</span>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n            return (\r\n                <div>\r\n                    {paramLabels}\r\n                </div>\r\n            );\r\n        }\r\n        case TypeNoteElement.Chord: {\r\n            const detail = props.noteElement.detail as DetailChord;\r\n\r\n            /**　ディグリーネームを返す */\r\n            const getDegreeRoot = (index: number): string => {\r\n                let name = 'blank';\r\n                if (index != -1) {\r\n                    const list = detail.isFlat ? DEGREE12_FLAT_LIST : DEGREE12_SHARP_LIST;\r\n                    name = list[index];\r\n                }\r\n                return name;\r\n            }\r\n            /**　コードネームを返す */\r\n            const getChordName = (index: number): string => {\r\n                let name = '-';\r\n                if (index != -1) {\r\n                    const list = detail.isFlat ? KEY12_FLAT_LIST : KEY12_SHARP_LIST;\r\n                    name = list[index];\r\n                }\r\n                return name;\r\n            }\r\n            /**　シンボルを返す */\r\n            const getSymbol = (index: number, symbolKey: SymbolKey): string => {\r\n                let name = '';\r\n                if (index != -1) {\r\n                    SYMBOL_PARAMS_LIST.forEach((symbol) => {\r\n                        if (symbol.key == symbolKey) {\r\n                            name = symbol.name;\r\n                        }\r\n                    });\r\n                }\r\n                return name;\r\n            }\r\n\r\n            const degreeRoot = getDegreeRoot(detail.degreeIndex);\r\n            const chordName = getChordName(detail.degreeIndex);\r\n            const symbolName = getSymbol(detail.degreeIndex, detail.symbolKey);\r\n            const isDiatonic = DIATONIC_MAJOR_SCALE_DEGREE_NAMES.includes(degreeRoot + symbolName);\r\n            const sustainJsx = [];\r\n            for (let i = 0; i < detail.sustain; i++) {\r\n                sustainJsx.push(<span key={i}></span>);\r\n            }\r\n            const barCount = props.progress.barCount;\r\n            const remaindBeat = props.progress.remaindBeat;\r\n            const headMSec = Math.round(props.progress.headMSec / 1000 * 10) / 10;\r\n            // alert(detail.degreeIndex);\r\n            const notesCount = dispatcher.backing.getNotesCount(detail.backing);\r\n            return (\r\n                <>\r\n                    <div className={\r\n                        'degree'\r\n                        + (detail.degreeIndex == -1 ? ' blank' : '')\r\n                        + (isDiatonic ? ' diatonic' : '')\r\n                        + (state.noteData.chordMode == CHORD_MODE.DIRECT ? ' visible' : '')}>\r\n                        <span>{degreeRoot}{symbolName}</span>\r\n                    </div>\r\n                    <div className={state.noteData.chordMode == CHORD_MODE.DIRECT ? 'degree' : 'chord'}>\r\n                        <span>{chordName}{symbolName}</span>\r\n                    </div>\r\n                    <div className=\"sustain\">\r\n                        {sustainJsx}\r\n                    </div>\r\n                    <div className=\"progress-sustain\">\r\n                        <span className=\"bar\">{barCount != -1 ? barCount : ''}</span>\r\n                        <span className=\"beat\">{remaindBeat != -1 ? remaindBeat : ''}</span>\r\n                    </div>\r\n                    <div className=\"progress-time\">\r\n                        <span>{headMSec}s</span>\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            'backing-script' +\r\n                            (notesCount == 0 ? ' hidden' : '')\r\n                        }\r\n                    >\r\n                        <span>notes: {notesCount}</span>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        case TypeNoteElement.Section: {\r\n            const detail = props.noteElement.detail as DetailSection;\r\n            return (\r\n                <>\r\n                    <div className=\"name\"><span>{detail.label}</span></div>\r\n                    <div className=\"border\"></div>\r\n                </>\r\n            );\r\n        }\r\n        case TypeNoteElement.Modulation: {\r\n            const detail = props.noteElement.detail as DetailModulation;\r\n            return (\r\n                <></>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScoreElementDetail;","import { DEGREE12_FLAT_LIST, DEGREE12_SHARP_LIST, DIATONIC_MAJOR_SCALE_DEGREE_NAMES, KEY12_FLAT_LIST, KEY12_SHARP_LIST, SYMBOL_PARAMS_LIST } from 'contents/common/define';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport { TypeNoteElement, DetailFixed, DetailSection, DetailInit, DetailChord, DetailModulation, NoteElement, FloatWndState, Store, CHORD_MODE, EditMode } from 'contents/redux/store';\r\nimport React, { useContext, useEffect, useState, KeyboardEvent, useRef, MouseEvent } from 'react';\r\nimport ScoreElementDetail from './detail/ScoreElementDetail';\r\nimport './ScoreElement.css';\r\n\r\n/**\r\n * 譜面の進捗情報を管理するタイプ。\r\n */\r\nexport type ProgressInfo = {\r\n    /** 連番 */\r\n    no: number;\r\n    /** 小節の合計 */\r\n    barCount: number;\r\n    /** 余りの拍 */\r\n    remaindBeat: number;\r\n    /** 小節頭が訪れる時間（ミリ秒） */\r\n    headMSec: number;\r\n}\r\n\r\n\r\ntype ScoreElementProps = {\r\n    index: number;\r\n    noteElement: NoteElement;\r\n    progress: ProgressInfo;\r\n}\r\n\r\n// type ScoreElementProps = {\r\n//     index: number;\r\n//     type: TypeNoteElement;\r\n//     progress: ProgressInfo;\r\n// }\r\nconst ScoreElement = (props: ScoreElementProps) => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    const type = props.noteElement.type;\r\n    const editMode = state.noteState.editMode;\r\n    // const isNormalMode = state.noteState.editMode == EditMode.NORMAL;\r\n\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        dispatch(ActionType.GET_ELEMENT_REFFER, { pos: props.index, reffer: ref.current });\r\n    }, [state.noteData.dataList]);\r\n\r\n    const getStyleFromType = (): string => {\r\n        switch (type) {\r\n            case TypeNoteElement.Fixed: return 'detail-fixed';\r\n            case TypeNoteElement.Init: return 'detail-init';\r\n            case TypeNoteElement.Chord: return 'detail-chord';\r\n            case TypeNoteElement.Section: return 'detail-section';\r\n            case TypeNoteElement.Modulation: return 'detail-modulation';\r\n        }\r\n    };\r\n\r\n    const focusIndex = state.noteState.focusIndex;\r\n    const isSelected = focusIndex == props.index;\r\n    const isCriteria = state.noteState.criteriaIndex == props.index;\r\n    /**\r\n     * 要素が選択中のセクション内かどうかを返す\r\n     * @returns 判定結果\r\n     */\r\n    const isCurrentSection = (): boolean => {\r\n        const dataList = state.noteData.dataList;\r\n        const posList: number[] = [dataList.length];\r\n        let secNo = -1;\r\n        let curSecNo = -1;\r\n        dataList.forEach((el, i) => {\r\n            if (el.type == TypeNoteElement.Section) secNo++;\r\n            posList[i] = secNo;\r\n            if (focusIndex == i) curSecNo = secNo;\r\n        });\r\n        // const isChordEl = dataList[props.index].type == TypeNoteElement.Chord;\r\n        const isCurrentSec = posList[props.index] == curSecNo && type != TypeNoteElement.Fixed;\r\n        return isCurrentSec;\r\n    }\r\n\r\n    /**\r\n * コピー対象スタイルを返す\r\n * @returns コピー対象スタイル\r\n */\r\n    const getCopyTargetStyle = (): string => {\r\n        if (editMode != EditMode.BACKING) return '';\r\n\r\n        if (type == TypeNoteElement.Chord) {\r\n            const detail = props.noteElement.detail as DetailChord;\r\n            const isSameStructType = detail.degreeIndex != -1;\r\n            if (isSameStructType) {\r\n                if (state.noteState.selectedList.includes(props.index)) {\r\n                    return 'copy-selected';\r\n                }\r\n                return 'copy-tgt';\r\n            } else {\r\n                return 'copy-no-tgt';\r\n            }\r\n        } else {\r\n            return 'copy-no-tgt';\r\n        }\r\n    }\r\n\r\n    const getHeaderElement = (): JSX.Element => {\r\n        let retJsxList: JSX.Element[] = [];\r\n\r\n        if ([TypeNoteElement.Chord, TypeNoteElement.Section, TypeNoteElement.Modulation].includes(type)) {\r\n\r\n            if (TypeNoteElement.Chord == type) {\r\n\r\n                retJsxList.push(\r\n                    <div key={retJsxList.length} className=\"chord-no\">\r\n                        <span>{props.progress.no}</span>\r\n                    </div>\r\n                );\r\n            }\r\n            retJsxList.push(\r\n                //  <div className=\"edit\">\r\n                //         <span>E</span>\r\n                //     </div> \r\n                <div\r\n                    key={retJsxList.length}\r\n                    className={\r\n                        'del' +\r\n                        (editMode == EditMode.NORMAL ? '' : ' hidden')\r\n                    }\r\n                    onClick={() => {\r\n                        dispatcher.score.deleteElement(props.index);\r\n                    }}\r\n                >\r\n                    <span>×</span>\r\n                </div >\r\n            );\r\n        }\r\n        return (<>\r\n            {retJsxList}\r\n        </>);\r\n    }\r\n\r\n    /**\r\n     * 通常モード時、要素をクリックした際のイベント\r\n     */\r\n    const normalElementClickAction = () => {\r\n        const element: NoteElement = state.noteData.dataList[props.index];\r\n        if (element.type != TypeNoteElement.Fixed) {\r\n            dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: props.index });\r\n        }\r\n    }\r\n    /**\r\n     * セレクタモード時、要素をクリックした際のイベント\r\n     */\r\n    const selectorElementClickAction = () => {\r\n        const selectedList = state.noteState.selectedList;\r\n        if (!selectedList.includes(props.index)) {\r\n            selectedList.push(props.index);\r\n        } else {\r\n            selectedList.some((index, i) => {\r\n                if (index == props.index) selectedList.splice(i, 1);\r\n            });\r\n        }\r\n        dispatcher.score.setSelectedList(selectedList);\r\n    }\r\n\r\n    // 追加「＋」ボタン\r\n    let additionBtn: JSX.Element = <></>;\r\n    if (props.index == state.noteData.dataList.length - 2) {\r\n        additionBtn = (\r\n            <div\r\n                className={\r\n                    'addition' +\r\n                    (editMode == EditMode.NORMAL ? '' : ' disable')\r\n                }\r\n                onClick={() => {\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: props.index });\r\n                    dispatcher.score.addChordElement();\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: props.index + 1 });\r\n                    dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                        params: {\r\n                            ...state.noteState.chordPaletteState,\r\n                            isAddition: true,\r\n                            rootIndex: 0,\r\n                            isFlat: false,\r\n                            symbolKey: SYMBOL_PARAMS_LIST[0].key,\r\n                            sustain: 4,\r\n                        }\r\n                    });\r\n                }}>\r\n                <span>+</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"box\">\r\n            <div className=\"info-base\">\r\n                <div className=\"header\">\r\n                    {getHeaderElement()}\r\n                </div>\r\n                <div\r\n                    className={[\r\n                        'note-element',\r\n                        getStyleFromType(),\r\n                        isSelected ? 'active' : '',\r\n                        isCriteria ? 'criteria' : '',\r\n                        [\r\n                            TypeNoteElement.Init,\r\n                            TypeNoteElement.Section,\r\n                            TypeNoteElement.Chord\r\n                        ].includes(type) ? 'selectable' : '',\r\n                        isCurrentSection() ? 'current' : '',\r\n                        getCopyTargetStyle()\r\n                    ].join(' ')}\r\n                    onClick={() => {\r\n                        if (editMode == EditMode.NORMAL) {\r\n                            normalElementClickAction();\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                        } else {\r\n                            selectorElementClickAction();\r\n                        }\r\n                    }}\r\n                    onContextMenu={(e: MouseEvent) => {\r\n                        if (editMode == EditMode.NORMAL) {\r\n                            normalElementClickAction();\r\n                            const element: NoteElement = state.noteData.dataList[props.index];\r\n                            if (element.type != TypeNoteElement.Fixed) {\r\n                                // alert(state.reffers.chordPalette);\r\n                                state.reffers.contextMneu.style.left = e.clientX + 'px';\r\n                                state.reffers.contextMneu.style.top = e.clientY + 'px';\r\n                                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CONTEXT_MENU });\r\n                            }\r\n                        }\r\n                    }}\r\n                    ref={ref}\r\n                >\r\n                    <ScoreElementDetail\r\n                        noteElement={props.noteElement}\r\n                        progress={props.progress}\r\n                    />\r\n                </div >\r\n            </div >\r\n            {/* プラス「＋」ボタン */}\r\n            {additionBtn}\r\n        </div >\r\n    );\r\n\r\n};\r\n\r\nexport default ScoreElement;\r\n","\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { DetailSection, TypeNoteElement } from 'contents/redux/store';\r\nimport { useContext, useEffect, useState } from 'react';\r\n\r\ntype OutlineSectionProps = {\r\n    label: String;\r\n    index: number;\r\n}\r\nconst OutlineSection = (props: OutlineSectionProps) => {\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n\r\n    const isCurrent = (): boolean => {\r\n        const dataList = state.noteData.dataList;\r\n        const focusIndex = state.noteState.focusIndex;\r\n        let secNo = -1;\r\n        let curSecNo = -1;\r\n        dataList.forEach((el, i) => {\r\n            if (el.type == TypeNoteElement.Section) secNo++;\r\n            if (focusIndex == i) curSecNo = secNo;\r\n        });\r\n        return curSecNo == props.index;\r\n    }\r\n    return (\r\n        <div className={isCurrent() ? 'active' : ''}>\r\n            <span>{props.label}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OutlineSection;\r\n","import { GlobalContext } from \"contents/MainFrame\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { DetailChord, FloatWndState, TypeNoteElement } from \"contents/redux/store\";\r\nimport { useContext, useEffect, useRef } from \"react\";\r\n\r\nimport './NoteContextMenu.css';\r\n\r\nconst NoteContextMenu = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    /** コンテキストメニューを閉じる */\r\n    const close = () => dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n\r\n    /** コンテキストメニューの要素オブジェクト */\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, contextMneu: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_CONTEXT, { reffer: ref.current });\r\n    }, []);\r\n\r\n    const menuPropsList: MenuRecordProps[] = [];\r\n    if (state.noteState.floatwndState == FloatWndState.CONTEXT_MENU) {\r\n        const curElement = state.noteData.dataList[state.noteState.focusIndex];\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'INSERT BLANK', keyName: 'A', disable: false,\r\n            executer: () => {\r\n                dispatcher.score.addChordElement();\r\n                close();\r\n            }\r\n        });\r\n        menuPropsList.push({\r\n            menuType: 'call', label: 'INSERT CHORD', keyName: 'W', disable: false,\r\n            executer: () => {\r\n                dispatcher.score.addChordElement();\r\n                dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: state.noteState.focusIndex + 1 });\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n                const detail = curElement.detail as DetailChord;\r\n                dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                    params: {\r\n                        ...state.noteState.chordPaletteState,\r\n                        isAddition: true,\r\n                        rootIndex: detail.degreeIndex,\r\n                        isFlat: detail.isFlat,\r\n                        symbolKey: detail.symbolKey,\r\n                        sustain: detail.sustain,\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'INSERT SECTION', keyName: 'S', disable: false,\r\n            executer: () => {\r\n                dispatcher.score.addSectionElement();\r\n                close();\r\n            }\r\n        });\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'INSERT MODULATION', keyName: 'M', disable: false,\r\n            executer: () => { }\r\n        });\r\n        switch (curElement.type) {\r\n            case TypeNoteElement.Chord: {\r\n                const detail = curElement.detail as DetailChord;\r\n                menuPropsList.push({\r\n                    menuType: 'order', label: 'BLANK CHORD', keyName: 'D', disable: detail.degreeIndex == -1,\r\n                    executer: () => {\r\n                        dispatch(ActionType.SET_DEGREE_INDEX, { pos: state.noteState.focusIndex, degreeIndex: -1 });\r\n                        close();\r\n                    }\r\n                });\r\n                menuPropsList.push({\r\n                    menuType: 'call', label: 'EDIT CHORD', keyName: 'C', disable: false,\r\n                    executer: () => {\r\n                        // state.reffers.chordPalette.style.left = 50 + 'px';\r\n                        // state.reffers.chordPalette.style.top = 50 + 'px';\r\n                        dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n                        dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                            params: {\r\n                                ...state.noteState.chordPaletteState,\r\n                                rootIndex: detail.degreeIndex,\r\n                                isFlat: detail.isFlat,\r\n                                symbolKey: detail.symbolKey,\r\n                                sustain: detail.sustain,\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                menuPropsList.push({\r\n                    menuType: 'call', label: 'EDIT BACKING', keyName: 'B', disable: false,\r\n                    executer: () => {\r\n                        dispatcher.score.callBackingEditor();\r\n                     }\r\n                });\r\n            }\r\n                break;\r\n            case TypeNoteElement.Section: {\r\n                menuPropsList.push({\r\n                    menuType: 'call', label: 'EDIT SECTION', keyName: 'C', disable: false,\r\n                    executer: () => { }\r\n                });\r\n            }\r\n                break;\r\n        }\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'REMOVE', keyName: 'DEL', disable: true,\r\n            executer: () => { }\r\n        });\r\n    }\r\n    const menuList: JSX.Element[] = [];\r\n    menuPropsList.forEach((data, i) => {\r\n        menuList.push(<MenuRecord\r\n            key={i}\r\n            menuType={data.menuType}\r\n            label={data.label}\r\n            keyName={data.keyName}\r\n            disable={data.disable}\r\n            executer={data.executer}\r\n        />);\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            id=\"note-contextmenu\"\r\n            className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.CONTEXT_MENU ? ' active' : '')}\r\n            onClick={() => {\r\n                // dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }}\r\n        >\r\n            {menuList}\r\n        </div>\r\n    );\r\n}\r\n\r\ntype MenuRecordProps = {\r\n    menuType: string;\r\n    label: string;\r\n    keyName: string;\r\n    disable: boolean;\r\n    executer: Function;\r\n}\r\nconst MenuRecord = (props: MenuRecordProps) => {\r\n\r\n    return (\r\n        <div className={props.disable ? 'disable' : ''}\r\n            onClick={() => {\r\n                props.executer();\r\n            }}\r\n        >\r\n            <span className={props.menuType}>{props.label}</span>\r\n            <span className=\"key\">{`<${props.keyName} key>`}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoteContextMenu;","import { DEGREE12_FLAT_LIST, DEGREE12_SHARP_LIST, KEY12_FLAT_LIST, KEY12_SHARP_LIST, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport TabbedPane from \"contents/common/TabbedPane\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { DetailChord, FloatWndState, ChordPaletteLine, TypeNoteElement, CHORD_MODE } from \"contents/redux/store\";\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\n// import styled from 'styled-components';\r\n// npm i --save-dev @types/styled-components\r\nimport './ChordEditor.css';\r\n\r\nconst ChordSelector = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    // const [degreeIndex, setDegreeIndex] = useState(0);\r\n    // const [isFlat, setFlat] = useState(false);\r\n    // const [symbolKey, setSymbolKey] = useState(SYMBOL_PARAMS_LIST[0].key);\r\n    // const [sustain, setSustain] = useState(4);\r\n\r\n    /** コンテキストメニューの要素オブジェクト */\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, chordPalette: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_CHORD_PALETTE, { reffer: ref.current });\r\n    }, []);\r\n\r\n    const chordList: JSX.Element[] = [];\r\n    const symbolList: JSX.Element[] = [];\r\n    const beatList: JSX.Element[] = [];\r\n    let operation: JSX.Element = <></>;\r\n    const isDirect = state.noteData.chordMode == CHORD_MODE.DIRECT;\r\n\r\n    const editorState = state.noteState.chordPaletteState;\r\n    if (state.noteState.floatwndState == FloatWndState.CHORD_PALETTE) {\r\n        const focusIndex = state.noteState.focusIndex;\r\n        const chordDetail = state.noteData.dataList[focusIndex].detail as DetailChord;\r\n\r\n        DEGREE12_SHARP_LIST.forEach((degS, i) => {\r\n            const baseKey = 0;\r\n            const keyIndex = (baseKey + i) % 12;\r\n            const degF = DEGREE12_FLAT_LIST[i];\r\n            const chdS = KEY12_SHARP_LIST[keyIndex];\r\n            const chdF = KEY12_FLAT_LIST[keyIndex];\r\n            const isHalf = [1, 3, 6, 8, 10].includes(i);\r\n            const isSelected = editorState.rootIndex == i;\r\n            const buildLabelSrc = (isFlat: boolean): JSX.Element => {\r\n                return (\r\n                    state.noteData.chordMode == CHORD_MODE.SCALE ?\r\n                        <>\r\n                            <span className=\"degree\">{isFlat ? degF : degS}</span>\r\n                            <span>&nbsp;(</span>\r\n                            <span className=\"chord\">{isFlat ? chdF : chdS}</span>\r\n                            <span>)</span>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <span className=\"degree\">{isFlat ? chdF : chdS}</span>\r\n                        </>\r\n                );\r\n            };\r\n            chordList.push(\r\n                <div key={i}>{\r\n                    !isHalf ?\r\n                        <div\r\n                            className={isSelected ? 'active' : ''}\r\n                            onClick={() => {\r\n                                dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                    params: {\r\n                                        ...editorState,\r\n                                        selectedLine: ChordPaletteLine.Root, rootIndex: i, isFlat: false\r\n                                    }\r\n                                });\r\n                            }}\r\n                        >\r\n                            {buildLabelSrc(false)}\r\n                        </div>\r\n                        :\r\n                        <>\r\n                            <div\r\n                                className={\"half\" + (isSelected && !editorState.isFlat ? ' active' : '')}\r\n                                onClick={() => {\r\n                                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                        params: {\r\n                                            ...editorState,\r\n                                            selectedLine: ChordPaletteLine.Root, rootIndex: i, isFlat: false\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {buildLabelSrc(false)}\r\n                            </div>\r\n                            <div\r\n                                className={\"half\" + (isSelected && editorState.isFlat ? ' active' : '')}\r\n                                onClick={() => {\r\n                                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                        params: {\r\n                                            ...editorState,\r\n                                            selectedLine: ChordPaletteLine.Root, rootIndex: i, isFlat: true\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            >\r\n                                {buildLabelSrc(true)}\r\n                            </div>\r\n                        </>\r\n                }</div>\r\n            );\r\n        });\r\n\r\n        SYMBOL_PARAMS_LIST.forEach((symbol, i) => {\r\n            // const isSelected = chordDetail.degreeIndex == i;\r\n            symbolList.push(\r\n                <div\r\n                    key={i}\r\n                    className={symbol.key == editorState.symbolKey ? 'active' : ''}\r\n                    onClick={() => {\r\n                        dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                            params: {\r\n                                ...editorState,\r\n                                selectedLine: ChordPaletteLine.Symbol, symbolKey: symbol.key\r\n                            }\r\n                        });\r\n                    }}\r\n                >\r\n                    <span>[{symbol.name}]</span>\r\n                </div>\r\n\r\n            );\r\n        });\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            beatList.push(\r\n                <div\r\n                    key={i}\r\n                    className={editorState.sustain >= i + 1 ? 'active' : ''}\r\n                    onClick={() => {\r\n                        dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                            params: {\r\n                                ...editorState, selectedLine: ChordPaletteLine.Sustain, sustain: i + 1\r\n                            }\r\n                        });\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        operation = (<>\r\n            <div\r\n                onClick={() => {\r\n                    dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                }}>\r\n                <span>Cancel</span>\r\n            </div>\r\n            <div\r\n                onClick={() => {\r\n                    dispatcher.chord.setCurChordParam();\r\n                }}>\r\n                <span>Enter</span>\r\n            </div>\r\n        </>);\r\n    }\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            id=\"total-palette\"\r\n            className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.CHORD_PALETTE ? ' active' : '')}\r\n            onClick={() => {\r\n            }}\r\n        >\r\n            <TabbedPane groupName=\"selector-tabs\"\r\n                tabElements={[\r\n                    {\r\n                        name: 'Scale', disable: isDirect, cont: (\r\n                            <>\r\n                            </>\r\n                        )\r\n                    },\r\n                    {\r\n                        name: 'Separate', disable: false, cont: (\r\n                            <>\r\n                                <div className={'chord-selector' + (editorState.selectedLine == ChordPaletteLine.Root ? ' active' : '')}>\r\n                                    {chordList}\r\n                                </div>\r\n                                <div className={'symbol-selector' + (editorState.selectedLine == ChordPaletteLine.Symbol ? ' active' : '')}>\r\n                                    {symbolList}\r\n                                </div>\r\n                            </>\r\n                        )\r\n                    },\r\n                    {\r\n                        name: 'Fragment', disable: false, cont: (\r\n                            <>\r\n                            </>\r\n                        )\r\n                    }\r\n                ]}\r\n                activeNo={1}\r\n            />\r\n            <div className={'beat-selector' + (editorState.selectedLine == ChordPaletteLine.Sustain ? ' active' : '')}>\r\n                {beatList}\r\n            </div>\r\n            <div className=\"operation\">\r\n                {operation}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ChordSelector;","import { SymbolKey, SymbolParams, SYMBOL_PARAMS_LIST } from \"./define\";\r\n\r\nexport function getSymbolParams(key: SymbolKey): SymbolParams | null {\r\n    let symbol = null;\r\n    SYMBOL_PARAMS_LIST.forEach((data) => {\r\n        if (data.key == key) {\r\n            symbol = data;\r\n        }\r\n    });\r\n    return symbol;\r\n}\r\n","\r\nimport { DEGREE12_SHARP_LIST, KEY12_SHARP_LIST, SYMBOL_PARAMS_LIST } from 'contents/common/define';\r\nimport { getSymbolParams } from 'contents/common/utils';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { DetailChord, TypeNoteElement } from 'contents/redux/store';\r\nimport { useContext } from 'react';\r\nimport './CurrentElementInfo.css';\r\n\r\ntype StateRecord = {\r\n    title: string;\r\n    value: string;\r\n    disable: boolean;\r\n}\r\n\r\nconst CurrentElementInfo = () => {\r\n\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n    const focusIndex = state.noteState.focusIndex;\r\n    if (focusIndex == -1) return (<></>);\r\n\r\n    const data = state.noteData.dataList[focusIndex];\r\n\r\n    let inner: JSX.Element = <></>;\r\n    switch (data.type) {\r\n        case TypeNoteElement.Chord: {\r\n            const detail = data.detail as DetailChord;\r\n            let root = '-';\r\n            if (detail.degreeIndex != -1) {\r\n                const degreeRoot = DEGREE12_SHARP_LIST[detail.degreeIndex];\r\n                const chordRoot = KEY12_SHARP_LIST[detail.degreeIndex];\r\n                root = `${degreeRoot} (${chordRoot})`;\r\n            }\r\n            let symbolName = '-';\r\n            if (detail.symbolKey != null) {\r\n                symbolName = `[${getSymbolParams(detail.symbolKey)?.name as string}]`;\r\n            }\r\n\r\n            const stateRecordList: StateRecord[] = [];\r\n            stateRecordList.push({ title: 'Tempo', value: '80', disable: false });\r\n            stateRecordList.push({ title: 'Rythm', value: '4/4', disable: false });\r\n            stateRecordList.push({ title: 'Key', value: 'C', disable: false });\r\n            stateRecordList.push({ title: 'Scale', value: 'major', disable: false });\r\n            stateRecordList.push({ title: 'Root', value: root, disable: root == '-' });\r\n            stateRecordList.push({ title: 'Symbol', value: symbolName, disable: symbolName == '-' });\r\n            stateRecordList.push({ title: 'Sustain', value: detail.sustain + '', disable: false });\r\n            const stateList: JSX.Element[] = [];\r\n            stateRecordList.forEach((state, i) => {\r\n                stateList.push(\r\n                    <div\r\n                        key={i}\r\n                        className={\r\n                            'record' +\r\n                            (state.disable ? ' disable' : '')\r\n                        }>\r\n                        <div className=\"title\"><span>{state.title}:</span></div>\r\n                        <div className=\"value\"><span>{state.value}</span></div>\r\n                    </div>\r\n                );\r\n            });\r\n\r\n            const structList: JSX.Element[] = [];\r\n            if (detail.symbolKey != null) {\r\n                const symbol = getSymbolParams(detail.symbolKey);\r\n                const list = symbol?.intervals;\r\n                const len = list?.length as number;\r\n                for (let i = 0; i < 7; i++) {\r\n                    if (i < len) {\r\n                        const interval = symbol?.intervals[i] as number;\r\n                        const struct = symbol?.struct[i];\r\n                        const sound = KEY12_SHARP_LIST[(detail.degreeIndex + interval) % 12];\r\n                        structList.push(\r\n                            <div key={i} className=\"record\">\r\n                                <div className=\"interval\"><span>{interval}</span></div>\r\n                                <div className=\"struct\"><span>{struct}</span></div>\r\n                                <div className=\"sound\"><span>{sound}</span></div>\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        structList.push(\r\n                            <div key={i} className=\"record disable\">\r\n                                <div className=\"interval\"></div>\r\n                                <div className=\"struct\"></div>\r\n                                <div className=\"sound\"></div>\r\n                            </div>\r\n                        );\r\n                    }\r\n                };\r\n            }\r\n\r\n            inner = (\r\n                <div\r\n                    className={\r\n                        'chord'\r\n                    }\r\n                >\r\n                    <div>\r\n                        <div className=\"title\">\r\n                            <span>Current State</span>\r\n                        </div>\r\n                        <div className=\"current-state\">\r\n                            {stateList}\r\n                        </div>\r\n                        <div className=\"title\">\r\n                            <span>Chord Struct</span>\r\n                        </div>\r\n                        <div className=\"symbol-struct\">\r\n                            {structList}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n            break;\r\n        case TypeNoteElement.Section: {\r\n            // const stateRecordList: StateRecord[] = [];\r\n            // stateRecordList.push({ title: 'Tempo', value: '80', disable: false });\r\n            // stateRecordList.push({ title: 'Rythm', value: '4/4', disable: false });\r\n            // stateRecordList.push({ title: 'Key', value: 'C', disable: false });\r\n            // stateRecordList.push({ title: 'Scale', value: 'major', disable: false });\r\n            // const stateList: JSX.Element[] = [];\r\n            // stateRecordList.forEach((state, i) => {\r\n            //     stateList.push(\r\n            //         <div\r\n            //             key={i}\r\n            //             className={\r\n            //                 'record' +\r\n            //                 (state.disable ? ' disable' : '')\r\n            //             }>\r\n            //             <div className=\"title\"><span>{state.title}:</span></div>\r\n            //             <div className=\"value\"><span>{state.value}</span></div>\r\n            //         </div>\r\n            //     );\r\n            // });\r\n            inner = (\r\n                <div\r\n                    className={\r\n                        'section'\r\n                    }\r\n                >\r\n\r\n                    {/* <div>\r\n                        <div className=\"title\">\r\n                            <span>Current State</span>\r\n                        </div>\r\n                        <div className=\"current-state\">\r\n                            {stateList}\r\n                        </div>\r\n                    </div> */}\r\n                </div>\r\n            )\r\n        }\r\n            break;\r\n    }\r\n    return (\r\n        <div id=\"current-detail\">\r\n            {inner}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentElementInfo;","import { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { BackingLen, BackingEditorState, BACKING_LEN_TYPE, BACKING_SIDE } from \"contents/redux/store\";\r\n\r\n\r\ntype BackingOperationProps ={\r\n    dispatcher: Dispatcher;\r\n    paletteState: BackingEditorState;\r\n}\r\n\r\ntype ButtonBean = {\r\n    label: string;\r\n    isActive: boolean;\r\n    isDisable: boolean;\r\n    callback: Function;\r\n}\r\n\r\nconst BackingOperation = (props: BackingOperationProps) => {\r\n\r\n    const dispatcher = props.dispatcher;\r\n    const paletteState = props.paletteState;\r\n    const sideIndex = paletteState.sideIndex;\r\n    const curSideScript = paletteState.layers[sideIndex];\r\n    const selectedLenIndex = paletteState.selectedLenIndex;\r\n    const curLenBean = curSideScript.lens[selectedLenIndex];\r\n    const curVolume = curSideScript.vels[selectedLenIndex];\r\n\r\n    const setCurrentLenBean = (lenBean: BackingLen) => {\r\n        const script = paletteState.layers;\r\n        script[sideIndex].lens[selectedLenIndex] = lenBean;\r\n        dispatcher.initBackingPalette({\r\n            ...paletteState,\r\n            layers: script\r\n        });\r\n    };\r\n    const setCurrentLen = (lenType: BACKING_LEN_TYPE) => {\r\n        curLenBean.len = lenType;\r\n        curLenBean.isHalf = false;\r\n        curLenBean.isDiv3 = false;\r\n        setCurrentLenBean(curLenBean);\r\n    };\r\n    const updateCurrentVolume = (sub: number) => {\r\n        const script = paletteState.layers;\r\n        const nowVol = script[sideIndex].vels[selectedLenIndex];\r\n        script[sideIndex].vels[selectedLenIndex] = nowVol + sub;\r\n        dispatcher.initBackingPalette({\r\n            ...paletteState,\r\n            layers: script\r\n        });\r\n    };\r\n\r\n    const curLen = curLenBean.len;\r\n    const buttons: ButtonBean[] = [\r\n        {\r\n            label: '16',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN16,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN16); }\r\n        },\r\n        {\r\n            label: '8',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN8,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN8); }\r\n        },\r\n        {\r\n            label: '4',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN4,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN4); }\r\n        },\r\n        {\r\n            label: '2',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN2,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN2); }\r\n        },\r\n        {\r\n            label: '1',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN1,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN1); }\r\n        },\r\n        {\r\n            label: '.',\r\n            isActive: curLenBean.isHalf,\r\n            isDisable: !dispatcher.backing.isAcceptHalf(),\r\n            callback: () => {\r\n                curLenBean.isHalf = !curLenBean.isHalf;\r\n                curLenBean.isDiv3 = false;\r\n                setCurrentLenBean(curLenBean);\r\n            }\r\n        },\r\n        {\r\n            label: '/ 3',\r\n            isActive: curLenBean.isDiv3,\r\n            isDisable: !dispatcher.backing.isAcceptDiv3(),\r\n            callback: () => {\r\n                curLenBean.isDiv3 = !curLenBean.isDiv3;\r\n                curLenBean.isHalf = false;\r\n                setCurrentLenBean(curLenBean);\r\n            }\r\n        },\r\n        {\r\n            label: 'Add',\r\n            isActive: false,\r\n            isDisable: false,\r\n            callback: () => {\r\n                dispatcher.backing.addLen();\r\n            }\r\n        },\r\n        {\r\n            label: 'Del',\r\n            isActive: false,\r\n            isDisable: curSideScript.lens.length <= 1,\r\n            callback: () => {\r\n                dispatcher.backing.delLen();\r\n            }\r\n        },\r\n        {\r\n            label: 'vel-',\r\n            isActive: false,\r\n            isDisable: curVolume <= 1,\r\n            callback: () => {\r\n                updateCurrentVolume(-1);\r\n            }\r\n        },\r\n        {\r\n            label: 'vel+',\r\n            isActive: false,\r\n            isDisable: curVolume >= 10,\r\n            callback: () => {\r\n                updateCurrentVolume(1);\r\n            }\r\n        },\r\n        {\r\n            label: 'all clear',\r\n            isActive: false,\r\n            isDisable: false,\r\n            callback: () => {\r\n                const backingState: BackingEditorState = {\r\n                    useChannels: [],\r\n                    isUsePedal: false,\r\n                    sideIndex: 0,\r\n                    selectedLenIndex: 0,\r\n                    selectedChannelIndex: -1,\r\n                    layers: [\r\n                        {\r\n                            lens: [{\r\n                                len: BACKING_LEN_TYPE.LEN1,\r\n                                isDiv3: false,\r\n                                isHalf: false\r\n                            }],\r\n                            side: BACKING_SIDE.LEFT,\r\n                            table: [],\r\n                            vels: [5]\r\n                        },\r\n                        {\r\n                            lens: [{\r\n                                len: BACKING_LEN_TYPE.LEN1,\r\n                                isDiv3: false,\r\n                                isHalf: false\r\n                            }],\r\n                            side: BACKING_SIDE.RIGHT,\r\n                            table: [],\r\n                            vels: [5]\r\n                        }\r\n                    ]\r\n                };\r\n                dispatcher.initBackingPalette(backingState);\r\n            }\r\n        }\r\n    ];\r\n    const buttonList: JSX.Element[] = [];\r\n    buttons.forEach((button, i) => {\r\n        buttonList.push(\r\n            <button\r\n                key={i}\r\n                className={\r\n                    (button.isActive ? 'active' : '') +\r\n                    (button.isDisable ? ' disable' : '')\r\n                }\r\n                onClick={() => button.callback()}\r\n            >\r\n                <span>{button.label}</span>\r\n            </button>\r\n        );\r\n    });\r\n\r\n    return (<>{buttonList}</>);\r\n}\r\n\r\nexport default BackingOperation;","import { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { BackingLen, BackingLayer, BackingEditorState, BACKING_LEN_TYPE } from \"contents/redux/store\";\r\nimport { ChannelBean } from \"./BackingTable\";\r\n\r\ntype NotesMatrixProps = {\r\n    paletteState: BackingEditorState;\r\n    channelList: ChannelBean[];\r\n    dispatcher: Dispatcher;\r\n}\r\n\r\nconst NotesMatrix = (props: NotesMatrixProps) => {\r\n    const paletteState = props.paletteState\r\n    const channelList = props.channelList;\r\n    const dispatcher = props.dispatcher;\r\n\r\n    const matrixLayersJsx: JSX.Element[] = [];\r\n\r\n    for (let l = 0; l < 2; l++) {\r\n        const linesJsx: JSX.Element[] = [];\r\n        const layer = paletteState.layers[l];\r\n        const isCurLayer = paletteState.sideIndex == l;\r\n        // 逆に表示する（音程が低い方が下になるようにする）\r\n        for (let i = channelList.length - 1; i >= 0; i--) {\r\n            const cellList: JSX.Element[] = [];\r\n            layer.lens.forEach((lenBean, j) => {\r\n                let classes = '';\r\n                let label = '';\r\n                switch (lenBean.len) {\r\n                    case BACKING_LEN_TYPE.LEN4: classes += 'len4'; label = '4'; break;\r\n                    case BACKING_LEN_TYPE.LEN8: classes += 'len8'; label = '8'; break;\r\n                    case BACKING_LEN_TYPE.LEN16: classes += 'len16'; label = '16'; break;\r\n                    case BACKING_LEN_TYPE.LEN2: classes += 'len2'; label = '2'; break;\r\n                    case BACKING_LEN_TYPE.LEN1: classes += 'len1'; label = '1'; break;\r\n                }\r\n                if (lenBean.isHalf) {\r\n                    classes += ' half';\r\n                }\r\n\r\n                const divList: JSX.Element[] = [];\r\n                const divCnt = lenBean.isDiv3 ? 3 : 1;\r\n                for (let k = 0; k < divCnt; k++) {\r\n                    divList.push(\r\n                        <div\r\n                            key={k}\r\n                            className={\r\n                                getActiveState(paletteState.layers, l, i, j, k) +\r\n                                (lenBean.isDiv3 ? ' div3' : '')\r\n                            }\r\n                            onClick={() => {\r\n                                dispatcher.backing.toggleMatrix(i, j, k);\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                cellList.push(\r\n                    <div\r\n                        key={j}\r\n                        className={classes}\r\n                    >\r\n                        {divList}\r\n                    </div>\r\n                );\r\n            });\r\n            linesJsx.push(\r\n                <div key={i} className=\"line\">\r\n                    {cellList}\r\n                </div>\r\n            );\r\n        };\r\n        matrixLayersJsx.push(\r\n            <div\r\n                key={l}\r\n                className={\r\n                    isCurLayer ? 'cur' : 'back'\r\n                }\r\n            >\r\n                {linesJsx}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"matrix\">\r\n            {matrixLayersJsx}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n/**\r\n * セルの状態を元に適用するスタイルのclassを返す。\r\n * @param layers レイヤーの配列\r\n * @param curLayerIndex 選択中のレイヤーの連番\r\n * @param lineIndex 走査中のセルの連番\r\n * @param lenIndex 走査中の音価の連番\r\n * @returns スタイルのclass\r\n */\r\nconst getActiveState = (layers: BackingLayer[], curLayerIndex: number, lineIndex: number, lenIndex: number, divIndex: number): string => {\r\n    const cur = layers[curLayerIndex == 0 ? 0 : 1];\r\n    const back = layers[curLayerIndex == 1 ? 0 : 1];\r\n    let className = '';\r\n\r\n    if (cur.table[lineIndex][lenIndex][divIndex]) {\r\n        className = 'active';\r\n        const curCellRange = getCellRange(cur.lens, lenIndex);\r\n        back.lens.forEach((backLenBean, j) => {\r\n            const judge1 = isOverlapJudge(curCellRange, getCellRange(back.lens, j));\r\n            const judge2 = isOverlapJudge(getCellRange(back.lens, j), curCellRange);\r\n            if (back.table[lineIndex][j][0] && (judge1 || judge2)) {\r\n                className = 'overlap';\r\n            }\r\n        });\r\n    }\r\n    return className;\r\n}\r\n\r\n/**\r\n * 比較する2つのセルが重なっているか判定する。\r\n * @param range1 比較対象セル1\r\n * @param range2 比較対象セル2\r\n * @returns 判定結果\r\n */\r\nconst isOverlapJudge = (range1: CellRange, range2: CellRange): boolean => {\r\n    return (range1.head + range1.width > range2.head && range1.head + range1.width <= range2.head + range2.width)\r\n        || (range1.head < range2.head + range2.width && range1.head >= range2.head);\r\n}\r\n\r\n/**\r\n * セルの幅を返す。\r\n * @param lens 音価\r\n * @param lenIndex 音価リストの連番\r\n * @returns セルの幅\r\n */\r\nconst getCellRange = (lens: BackingLen[], lenIndex: number): CellRange => {\r\n    let head = 0;\r\n    for (let i = 0; i < lenIndex; i++) {\r\n        const lenBean = lens[i];\r\n        head += getLenSize(lenBean);\r\n    }\r\n    const width = getLenSize(lens[lenIndex]);\r\n    return { head, width };\r\n}\r\n\r\n/**\r\n * セルの幅を定義する要素。\r\n */\r\ntype CellRange = {\r\n    head: number;\r\n    width: number;\r\n}\r\n\r\n/**\r\n * 計算に使う音価の長さを返す。\r\n * @param lenBean 音価パラメータ\r\n * @returns 計算に使う音価の長さ\r\n */\r\nconst getLenSize = (lenBean: BackingLen): number => {\r\n    let size = 0;\r\n    switch (lenBean.len) {\r\n        case BACKING_LEN_TYPE.LEN1: size = 16; break;\r\n        case BACKING_LEN_TYPE.LEN2: size = 8; break;\r\n        case BACKING_LEN_TYPE.LEN4: size = 4; break;\r\n        case BACKING_LEN_TYPE.LEN8: size = 2; break;\r\n        case BACKING_LEN_TYPE.LEN16: size = 1; break;\r\n    }\r\n    if (lenBean.isHalf) {\r\n        size *= 1.5;\r\n    }\r\n    return size;\r\n}\r\n\r\nexport default NotesMatrix;","import { BackingLayer, BACKING_LEN_TYPE } from \"contents/redux/store\";\r\n\r\n\r\ntype SplitMeasureProps = {\r\n    layer: BackingLayer;\r\n}\r\n\r\nconst SplitMeasure = (props: SplitMeasureProps) => {\r\n\r\n    const curSideScript = props.layer;\r\n\r\n    // 音価のメジャー\r\n    const measureInner: JSX.Element[] = [];\r\n    let measureLength = 1;\r\n    curSideScript.lens.forEach((lenBean, i) => {\r\n        let cnt = 0;\r\n        switch (lenBean.len) {\r\n            case BACKING_LEN_TYPE.LEN1: cnt = 16; break;\r\n            case BACKING_LEN_TYPE.LEN2: cnt = 8; break;\r\n            case BACKING_LEN_TYPE.LEN4: cnt = 4; break;\r\n            case BACKING_LEN_TYPE.LEN8: cnt = 2; break;\r\n            case BACKING_LEN_TYPE.LEN16: cnt = 1; break;\r\n        }\r\n        if (lenBean.isHalf) {\r\n            cnt *= 1.5;\r\n        }\r\n        measureLength += cnt;\r\n    });\r\n    for (let i = 0; i < measureLength; i++) {\r\n        const getLen = () => {\r\n            if (i % 2 == 0) {\r\n                if (i % 4 == 0) {\r\n                    return 'mem4';\r\n                } else {\r\n                    return 'mem8';\r\n                }\r\n            } else {\r\n                return 'mem16';\r\n            }\r\n        }\r\n        const isLast = i == measureLength - 1;\r\n        measureInner.push(<div key={i} className={getLen() + (isLast ? ' last' : '')} />);\r\n    }\r\n\r\n    return (\r\n        <div className=\"measure\">\r\n            {measureInner}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SplitMeasure;","import { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { BackingEditorState, BACKING_LEN_TYPE, ChannelParam } from \"contents/redux/store\";\r\nimport BackingOperation from \"./BackingOperation\";\r\nimport NotesMatrix from \"./NotesMatrix\";\r\nimport SplitMeasure from \"./SplitMeasure\";\r\n\r\n\r\nexport type ChannelBean = {\r\n    soundIndex: number;\r\n    soundFullName: string;\r\n}\r\n\r\ntype BackingTableProps = {\r\n    paletteState: BackingEditorState;\r\n    dispatcher: Dispatcher;\r\n    channelList: ChannelBean[];\r\n    testPlaySound: Function;\r\n}\r\n\r\nconst BackingTable = (props: BackingTableProps) => {\r\n\r\n    const paletteState = props.paletteState;\r\n    const sideIndex = paletteState.sideIndex;\r\n    const curSideScript = paletteState.layers[sideIndex];\r\n    const dispatcher = props.dispatcher;\r\n    const channelList = props.channelList;\r\n    const testPlaySound = props.testPlaySound;\r\n\r\n\r\n    const channelJsxList: JSX.Element[] = [];\r\n    channelList.forEach((channel, i) => {\r\n        channelJsxList.push(\r\n            <div\r\n                key={i}\r\n                className=\"channel\"\r\n                onClick={() => testPlaySound(channel.soundFullName)}\r\n            >\r\n                <span>{channel.soundFullName}</span>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    // 音価の分割リスト\r\n    const lens: JSX.Element[] = [];\r\n    const volumeList: JSX.Element[] = [];\r\n    curSideScript.lens.forEach((lenBean, i) => {\r\n        const isSelected = paletteState.selectedLenIndex == i;\r\n        let classes = isSelected ? 'active ' : '';\r\n        let label = '';\r\n        switch (lenBean.len) {\r\n            case BACKING_LEN_TYPE.LEN4: classes += 'len4'; label = '4'; break;\r\n            case BACKING_LEN_TYPE.LEN8: classes += 'len8'; label = '8'; break;\r\n            case BACKING_LEN_TYPE.LEN16: classes += 'len16'; label = '16'; break;\r\n            case BACKING_LEN_TYPE.LEN2: classes += 'len2'; label = '2'; break;\r\n            case BACKING_LEN_TYPE.LEN1: classes += 'len1'; label = '1'; break;\r\n        }\r\n        if (lenBean.isHalf) {\r\n            label += ' .';\r\n            classes += ' half';\r\n        }\r\n        if (lenBean.isDiv3) {\r\n            label += ' /';\r\n        }\r\n        lens.push(\r\n            <div\r\n                key={i}\r\n                className={classes}\r\n                onClick={() => {\r\n                    dispatcher.initBackingPalette({\r\n                        ...paletteState,\r\n                        selectedLenIndex: i\r\n                    });\r\n                }}>\r\n                <span>{label}</span>\r\n            </div>\r\n        );\r\n        const volume = curSideScript.vels[i];\r\n        volumeList.push(\r\n            <div\r\n                key={i}\r\n                className={classes}\r\n            >\r\n                <div style={{ height: (volume * 10) + '%' }}></div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"backing-table\">\r\n            <div className=\"switch\">\r\n                <BackingOperation\r\n                    dispatcher={dispatcher}\r\n                    paletteState={paletteState}\r\n                />\r\n            </div>\r\n            <div className=\"fixed\">\r\n                <div className=\"layer\">\r\n                    <button\r\n                        className={\r\n                            paletteState.sideIndex == 1 ? 'active' : ''\r\n                        }\r\n                        onClick={() => {\r\n                            dispatcher.backing.setLayerIndex(1);\r\n                        }}\r\n                    >\r\n                        <span>Right</span>\r\n                    </button>\r\n                    <button\r\n                        className={\r\n                            paletteState.sideIndex == 0 ? 'active' : ''\r\n                        }\r\n                        onClick={() => {\r\n                            dispatcher.backing.setLayerIndex(0);\r\n                        }}\r\n                    >\r\n                        <span>Left</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"matrix\">\r\n                    {channelJsxList}\r\n                </div>\r\n                <div className=\"pedal\">\r\n                    <button\r\n                        className={\r\n                            paletteState.isUsePedal ? 'active' : ''\r\n                        }\r\n                        onClick={() => {\r\n                            dispatcher.backing.setUsePedal(!paletteState.isUsePedal);\r\n                        }}\r\n                    >\r\n                        <span>Pedal</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"main\">\r\n                <div className=\"split\">\r\n                    {lens}\r\n                </div>\r\n                <SplitMeasure\r\n                    layer={curSideScript}\r\n                />\r\n                <NotesMatrix\r\n                    paletteState={paletteState}\r\n                    channelList={channelList}\r\n                    dispatcher={dispatcher}\r\n                />\r\n                <div className=\"volume\">\r\n                    {volumeList}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BackingTable;","import { SymbolParams } from \"contents/common/define\";\r\nimport { BackingEditorState } from \"contents/redux/store\";\r\n\r\n\r\ntype StructMatrixProps = {\r\n    paletteState: BackingEditorState;\r\n    structs: string[];\r\n    symbol: SymbolParams;\r\n    degreeIndex: number;\r\n    testPlaySound: Function;\r\n    setUseChannels: Function\r\n}\r\n\r\nexport const StructMatrix = (props: StructMatrixProps) => {\r\n\r\n    const structTable: JSX.Element[] = [];\r\n    const ChordStructMax = 7;\r\n    const OctaveMax = 8;\r\n    for (let i = 0; i < ChordStructMax; i++) {\r\n        // for (let i = ChordStructMax - 1; i >= 0; i--) {\r\n        const isUse = i < props.symbol.intervals.length;\r\n        const cols: JSX.Element[] = [];\r\n        if (isUse) {\r\n            const soundName = props.structs[i];\r\n            const interval = props.symbol.intervals[i];\r\n            const relation = props.symbol.struct[i];\r\n            // 左の固定列\r\n            cols.push(\r\n                <div key={0} className=\"label\">\r\n                    <span>{relation}[{interval}]: {soundName}</span>\r\n                </div>\r\n            );\r\n            // 中のマトリクス\r\n            for (let j = 0; j < OctaveMax; j++) {\r\n                // for (let j = OctaveMax - 1; j >= 0; j--) {\r\n                const soundIndex = props.degreeIndex + props.symbol.intervals[i] + j * 12;\r\n                const octave = Math.floor(soundIndex / 12);\r\n                const soundFullName = props.structs[i] + octave;\r\n                const isNone = soundIndex < 9 || soundIndex >= 97;\r\n                let isSelected = false;\r\n                props.paletteState.useChannels.forEach((channel) => {\r\n                    if (channel.octave == j && channel.structIndex == i) {\r\n                        isSelected = true;\r\n                    }\r\n                });\r\n                // チャンネルが最大数に達している場合、それ以上増やせない\r\n                const isLimit = props.paletteState.useChannels.length >= 12 && !isSelected;\r\n                cols.push(\r\n                    <div\r\n                        key={j + 1}\r\n                        className={\r\n                            'col' +\r\n                            (isNone || isLimit ? ' disable' : '') +\r\n                            (isSelected ? ' active' : '')\r\n                        }\r\n                        onClick={() => {\r\n                            const list = props.paletteState.useChannels;\r\n                            if (!isSelected) {\r\n                                list.push({ octave: j, structIndex: i });\r\n                            } else {\r\n                                let pos = -1;\r\n                                list.forEach((channel, index) => {\r\n                                    if (channel.octave == j && channel.structIndex == i) {\r\n                                        pos = index;\r\n                                    }\r\n                                });\r\n                                list.splice(pos, 1);\r\n                            }\r\n                            list.sort((a, b) => {\r\n                                const aVal = a.octave * 8 + a.structIndex;\r\n                                const bVal = b.octave * 8 + b.structIndex;\r\n                                return aVal - bVal;;\r\n                            });\r\n                            props.paletteState.useChannels = list;\r\n                            props.setUseChannels(props.paletteState.useChannels);\r\n                        }}\r\n                        onContextMenu={() => {\r\n                            props.testPlaySound(soundFullName);\r\n                        }}\r\n                    >\r\n                        <span>{!isNone ? soundFullName : '-'}</span>\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            // 空の要素を入れる\r\n            cols.push(\r\n                <div key={0} className=\"label\"></div>\r\n            );\r\n            for (let j = 0; j < 7; j++) {\r\n                cols.push(\r\n                    <div key={j + 1} className=\"col\"></div>\r\n                );\r\n            }\r\n        }\r\n        structTable.push(\r\n            <div\r\n                key={i}\r\n                className={\r\n                    'record' +\r\n                    (!isUse ? ' disable' : '')\r\n                }\r\n            >\r\n                {cols}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"struct-table\">\r\n            {structTable}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StructMatrix;","\r\nimport { KEY12_SHARP_LIST, SymbolParams, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport { getSymbolParams } from \"contents/common/utils\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { DetailChord, FloatWndState, CHORD_MODE, BACKING_LEN_TYPE, BackingLen, BACKING_SIDE, BackingEditorState, BackingLayer, ChannelParam } from \"contents/redux/store\";\r\nimport { useContext, useEffect, useRef } from \"react\";\r\n\r\nimport './BackingEditor.css';\r\nimport BackingTable, { ChannelBean } from \"./BackingTable\";\r\nimport StructMatrix from \"./StructMatrix\";\r\n\r\nconst BackingEditor = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    /** コンテキストメニューの要素オブジェクト */\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, chordPalette: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_BACKING_PALETTE, { reffer: ref.current });\r\n    }, []);\r\n    // if (state.noteState.focusIndex == -1 ||\r\n    //     state.noteData.dataList[state.noteState.focusIndex].type != TypeNoteElement.Chord) {\r\n    //     return (<></>);\r\n    // }\r\n    if (state.noteState.floatwndState != FloatWndState.BACKING_PALETTE) {\r\n        return (<></>);\r\n    }\r\n\r\n    const paletteState = state.noteState.backingPaletteState;\r\n    const sideIndex = paletteState.sideIndex;\r\n    const curSideScript = paletteState.layers[sideIndex];\r\n    const selectedLenIndex = paletteState.selectedLenIndex;\r\n    const detail = state.noteData.dataList[state.noteState.focusIndex].detail as DetailChord;\r\n    // if(detail.symbolKey == null) return (<></>);\r\n    const symbol = getSymbolParams(detail.symbolKey) as SymbolParams;\r\n    const root = KEY12_SHARP_LIST[detail.degreeIndex];\r\n    const chordName = root + symbol.name;\r\n    const structs: string[] = [];\r\n    symbol.intervals.forEach((value) => {\r\n        structs.push(KEY12_SHARP_LIST[(detail.degreeIndex + value) % 12]);\r\n    });\r\n\r\n    // const infoList: JSX.Element[] = [];\r\n\r\n    const channelList = getChannelList(paletteState.useChannels, detail.degreeIndex, symbol, structs);\r\n\r\n    const testPlaySound = (soundFullName: string) => {\r\n        state.sampler.triggerAttack(soundFullName, '+0', 0.15);\r\n        setTimeout(() => {\r\n            state.sampler.triggerRelease(soundFullName);\r\n        }, 1000);\r\n    };\r\n\r\n    let operation: JSX.Element = <></>;\r\n    operation = (<>\r\n        <div\r\n            onClick={() => {\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }}>\r\n            <span>Cancel</span>\r\n        </div>\r\n        <div\r\n            onClick={() => {\r\n                dispatcher.backing.play(false);\r\n            }}>\r\n            <span>Play</span>\r\n        </div>\r\n        <div\r\n            onClick={() => {\r\n                dispatcher.backing.setCurBackingScript();\r\n            }}>\r\n            <span>Update</span>\r\n        </div>\r\n    </>);\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            id=\"backing-palette\"\r\n            className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.BACKING_PALETTE ? ' active' : '')}\r\n            onClick={() => {\r\n            }}\r\n        >\r\n            <div className=\"base-info\">\r\n                <div className=\"record\">\r\n                    <div className=\"title\"><span>Chord:</span></div>\r\n                    <div className=\"value\"><span>{chordName}</span></div>\r\n                </div>\r\n                <div className=\"record\">\r\n                    <div className=\"title\"><span>Struct:</span></div>\r\n                    <div className=\"value\"><span>{structs.join(', ')}</span></div>\r\n                </div>\r\n                <div className=\"record\">\r\n                    <div className=\"title\"><span>Sustain:</span></div>\r\n                    <div className=\"value\"><span>{detail.sustain}</span></div>\r\n                </div>\r\n            </div>\r\n            <StructMatrix\r\n                paletteState={paletteState}\r\n                structs={structs}\r\n                symbol={symbol}\r\n                degreeIndex={detail.degreeIndex}\r\n                testPlaySound={testPlaySound}\r\n                setUseChannels={(useChannels: ChannelParam[]) => dispatcher.setUseChannels(useChannels)}\r\n            />\r\n            <BackingTable\r\n                channelList={channelList}\r\n                paletteState={paletteState}\r\n                dispatcher={dispatcher}\r\n                testPlaySound={testPlaySound}\r\n            />\r\n\r\n            <div className=\"operation\">\r\n                {operation}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst getChannelList = (useChannels: ChannelParam[], degreeIndex: number, symbol: SymbolParams, structs: string[]): ChannelBean[] => {\r\n\r\n    const channelList: ChannelBean[] = [];\r\n\r\n    const OctaveMax = 8;\r\n    for (let i = 0; i < symbol.intervals.length; i++) {\r\n        // for (let i = ChordStructMax - 1; i >= 0; i--) {\r\n        for (let j = 0; j < OctaveMax; j++) {\r\n            // for (let j = OctaveMax - 1; j >= 0; j--) {\r\n            const soundIndex = degreeIndex + symbol.intervals[i] + j * 12;\r\n            let isSelected = false;\r\n            useChannels.forEach((channel) => {\r\n                if (channel.octave == j && channel.structIndex == i) {\r\n                    isSelected = true;\r\n                }\r\n            });\r\n            const octave = Math.floor(soundIndex / 12);\r\n            const soundFullName = structs[i] + octave;\r\n            if (isSelected) {\r\n                channelList.push({ soundIndex, soundFullName });\r\n            }\r\n        }\r\n    }\r\n    // 音程の昇順にソート\r\n    channelList.sort((a, b) => {\r\n        return b.soundIndex - a.soundIndex;\r\n    });\r\n    return channelList;\r\n}\r\n\r\nexport default BackingEditor;","import './ScoreContNoteTab.css';\r\n\r\n// import TabbedPane from './common/TabbedPane.jsx';\r\nimport { DetailChord, DetailSection, EditMode, FloatWndState, Store, TypeNoteElement } from 'contents/redux/store';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport React, { useContext, KeyboardEvent, useEffect, useState, useRef } from 'react';\r\n\r\nimport ScoreElement, { ProgressInfo } from './element/ScoreElement';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport OutlineSection from './OutlineSection';\r\nimport { KeyboardShortCutAction } from '../../../../operation/InputNoteTab';\r\nimport NoteContextMenu from './floatwnd/context/NoteContextMenu';\r\nimport ChordSelector from './floatwnd/chord/ChordSelector';\r\nimport CurrentElementInfo from './sideDetail/CurrentElementInfo';\r\nimport BackingEditor from './floatwnd/backing/BackingEditor';\r\nimport styled from 'styled-components';\r\n\r\nconst ScoreContNoteTab = () => {\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n\r\n    // /** 譜面の要素リスト */\r\n    // const [elementList, setElementList] = useState([] as JSX.Element[]);\r\n    // /** 画面上部のセクションリスト */\r\n    // const [sectionList, setSectionList] = useState([] as JSX.Element[]);\r\n\r\n    // useEffect(() => {\r\n    // alert(state.noteData.dataList.length);\r\n    const dataList = state.noteData.dataList;\r\n    const editMode = state.noteState.editMode;\r\n    // const isNormalMode = editMode == EditMode.NORMAL;\r\n    let index = 0;\r\n    const elementList: JSX.Element[] = [];\r\n    const sectionList: JSX.Element[] = [];\r\n\r\n    let no = 1;\r\n    let totalBeat = 0;\r\n    let totalMsec = 0;\r\n    let lastBar = -1;\r\n    dataList.forEach((data, i) => {\r\n        const bar = Math.floor(totalBeat / 4) + 1;\r\n        const progress = {} as ProgressInfo;\r\n        progress.no = no;\r\n        progress.barCount = lastBar != bar ? bar : -1;\r\n        progress.remaindBeat = totalBeat % 4 > 0 ? totalBeat % 4 : -1;\r\n        progress.headMSec = totalMsec;\r\n        elementList.push(\r\n            <ScoreElement\r\n                key={i}\r\n                index={i}\r\n                noteElement={data}\r\n                progress={progress}\r\n            />\r\n        );\r\n        if (data.type == TypeNoteElement.Chord) {\r\n            lastBar = bar;\r\n            const detail = data.detail as DetailChord;\r\n\r\n            const tempo = 80;\r\n            totalBeat += detail.sustain;\r\n            const sectionMSec = 60000 / tempo * 4;\r\n            totalMsec += sectionMSec / 4 * detail.sustain;\r\n            no++;\r\n        }\r\n\r\n        if (data.type == TypeNoteElement.Section) {\r\n            sectionList.push(\r\n                <OutlineSection key={i} index={index} label={(data.detail as DetailSection).label} />\r\n            );\r\n            index++;\r\n        }\r\n    });\r\n    //     setElementList(elementList);\r\n    //     setSectionList(sectionList);\r\n    // }, [state.noteData.dataList]);\r\n\r\n    const isModalBlind = !(state.noteState.floatwndState == FloatWndState.NONE || state.noteState.floatwndState == FloatWndState.CONTEXT_MENU);\r\n    return (\r\n        <div id=\"scorecont-notetab-root\">\r\n            <div className=\"left-cont\">\r\n                <div id=\"score-note\">\r\n                    <div\r\n                        id=\"operation-header\"\r\n                        className={editMode == EditMode.BACKING ? 'mode-selector' : ''}\r\n                    >\r\n                        <button className=\"disable\"><span>BACK</span></button>\r\n                        <button className=\"disable\"><span>SAVE</span></button>\r\n                        <button className=\"disable\"><span>RELOAD</span></button>\r\n                        <button className=\"disable\"><span>OPTION</span></button>\r\n                        <EditModeBorder />\r\n                    </div>\r\n                    <div\r\n                        id=\"section-list\"\r\n                        className={editMode == EditMode.BACKING ? 'mode-selector' : ''}\r\n                    >\r\n                        {sectionList}\r\n                    </div>\r\n                    <div\r\n                        id=\"score-list-root\"\r\n                        className={editMode == EditMode.BACKING ? 'mode-selector' : ''}\r\n                    >\r\n                        {elementList}\r\n                    </div>\r\n                    {/* モーダルブラインド */}\r\n                    <div id=\"modal-blind\"\r\n                        className={isModalBlind ? 'active' : ''}\r\n                        onClick={() => {\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                        }}\r\n                    />\r\n                    {/* コンテキストメニュー */}\r\n                    <NoteContextMenu />\r\n                    <ChordSelector />\r\n                    <BackingEditor />\r\n                </div>\r\n                <div id=\"score-footer\">\r\n                </div>\r\n            </div>\r\n            <div className=\"right-cont\">\r\n                <CurrentElementInfo />\r\n                {/* <div id=\"sidebar-param-selector\" className=\"hidden\" tabIndex=\"999\">\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst EditModeBorder = () => {\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n\r\n    const editMode = state.noteState.editMode;\r\n    // const isNormal = editMode == EditMode.NORMAL;\r\n    // const setEditMode = (editMode: EditMode) => {\r\n    //     dispatch(ActionType.SET_NOTE_STATE, { noteState: { ...state.noteState, editMode } });\r\n    // };\r\n    return (\r\n        <div className=\"mode\">\r\n            <div className=\"label\"><span>MODE:</span></div>\r\n            <div className=\"border\">\r\n                <button\r\n                    className={editMode == EditMode.NORMAL ? 'active' : ''}\r\n                // onClick={() => setEditMode(EditMode.NORMAL)}\r\n                >\r\n                    <span>NORMAL</span>\r\n                </button>\r\n                <button\r\n                    className={editMode == EditMode.BACKING ? 'active' : ''}\r\n                // onClick={() => setEditMode(EditMode.BACKING)}\r\n                >\r\n                    <span>CLONE</span>\r\n                </button>\r\n                <button\r\n                    className={editMode == EditMode.PREVIEW ? 'active' : ''}\r\n                // onClick={() => setEditMode(EditMode.BACKING)}\r\n                >\r\n                    <span>PREVIEW</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreContNoteTab;\r\n\r\n\r\nconst Title = styled.div({\r\n    display: 'inline-block',\r\n    margin: '2px 15px 0 15px',\r\n    color: 'rgba(255, 0, 0, 0.5)',\r\n    fontSize: '12px',\r\n    fontWeight: 600,\r\n});\r\n","import './ScoreContLiblaryTab.css';\r\n\r\n// import TabbedPane from './common/TabbedPane.jsx';\r\nimport { DetailSection, CHORD_MODE, Store, TypeNoteElement, EditMode } from 'contents/redux/store';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport React, { useContext, KeyboardEvent, useEffect, useState } from 'react';\r\nimport { ActionType } from 'contents/redux/reducer';\r\n\r\n\r\nconst ScoreContLiblaryTab = () => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n\r\n    return (\r\n        <div id=\"scorecont-listtab-root\">\r\n            <div className=\"left-cont\">\r\n                <button onClick={() => {\r\n                    // dispatch(ActionType.SET_NOTE_DATA,\r\n                    //     { data: { ...state.noteData, editMode: CHORD_MODE.SCALE } }\r\n                    // );\r\n                    dispatcher.setNoteData({ ...state.noteData, chordMode: CHORD_MODE.SCALE });\r\n                    dispatch(ActionType.INIT_DEFAULT_ELEMENTS, null);\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, {index: 2});\r\n                    dispatch(ActionType.SELECT_SCORETAB, { index: 1 });\r\n                }}\r\n                >\r\n                    <span>SCALE</span>\r\n                </button>\r\n                <button onClick={() => {\r\n                    // dispatch(ActionType.SET_NOTE_DATA,\r\n                    //     { data: { ...state.noteData, editMode: CHORD_MODE.DIRECT } }\r\n                    // );\r\n                    dispatcher.setNoteData({ ...state.noteData, chordMode: CHORD_MODE.DIRECT });\r\n                    dispatch(ActionType.INIT_DEFAULT_ELEMENTS, null);\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, {index: 2});\r\n                    dispatch(ActionType.SELECT_SCORETAB, { index: 1 });\r\n                }}\r\n                >\r\n                    <span>DIRECT</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"right-cont\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreContLiblaryTab;\r\n","import './ScoreContBackingTab.css';\r\n\r\nimport { DetailSection, CHORD_MODE, Store, TypeNoteElement } from 'contents/redux/store';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport  { useContext } from 'react';\r\n\r\n\r\nconst ScoreContBackingTab = () => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    \r\n    return (<></>);\r\n\r\n\r\n}\r\n\r\nexport default ScoreContBackingTab;\r\n","import './ScoreTab.css';\r\nimport React, { useState, useContext, useRef, useEffect } from 'react';\r\nimport TabbedPane from 'contents/common/TabbedPane';\r\n\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport ScoreContNoteTab from './contTabs/note/ScoreContNoteTab';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport ScoreContLiblaryTab from './contTabs/library/ScoreContLiblaryTab';\r\nimport ScoreContBackingTab from './contTabs/backing/ScoreContBackingTab';\r\n\r\nconst ScoreTab = () => {\r\n\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div id=\"scoretab-root\">\r\n            <TabbedPane groupName=\"score-tabs\"\r\n                tabElements={[\r\n                    { name: 'LIBLARY', disable: false, cont: <ScoreContLiblaryTab /> },\r\n                    { name: 'Note', disable: false, cont: <ScoreContNoteTab /> },\r\n                    { name: 'Source', disable: false, cont: <div></div> },\r\n                    { name: 'Backing', disable: true, cont: <ScoreContBackingTab/> },\r\n                    { name: 'Sheet Music', disable: true, cont: <div></div> },\r\n                    { name: 'Preview', disable: true, cont: <div></div> }\r\n                ]}\r\n                activeNo={state.scoreTabIndex}\r\n                selectTabIndex={(index: number) => dispatch(ActionType.SELECT_SCORETAB, { index: index })}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreTab;","import { KEY12_SHARP_LIST } from \"contents/common/define\";\r\nimport { getSymbolParams } from \"contents/common/utils\";\r\nimport { ActionType } from \"./reducer\";\r\nimport { Action, BackingLen, BackingEditorState, BackingLayer, BACKING_LEN_TYPE, BACKING_SIDE, ChannelParam, DetailInit, NoteData, Store, TypeNoteElement, NoteState, NoteElement, FloatWndState, DetailChord, BackingScript, DetailSection, EditMode } from \"./store\";\r\n\r\n/**\r\n * ビジネスロジックからステートを更新するためのクラス。\r\n *\r\n * @export\r\n * @class Dispatcher\r\n */\r\nexport class Dispatcher {\r\n\r\n    private dispatchBase: React.Dispatch<Action>;\r\n    private dispatch: Function;\r\n    private state: Store;\r\n\r\n    /**\r\n     *Creates an instance of Dispatcher.\r\n     * @param {Store} state\r\n     * @param {React.Dispatch<Action>} dispatchBase\r\n     * @memberof Dispatcher\r\n     */\r\n    constructor(state: Store, dispatchBase: React.Dispatch<Action>) {\r\n        this.dispatchBase = dispatchBase;\r\n        this.state = state;\r\n        this.dispatch = (type: ActionType, payload: any) => dispatchBase({ type, payload });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param noteData \r\n     */\r\n    public setNoteData = (data: NoteData) => {\r\n        this.dispatchBase({ type: ActionType.SET_NOTE_DATA, payload: { data } });\r\n    }\r\n    public initBackingPalette = (backingPaletteState: BackingEditorState) => {\r\n        this.dispatchBase({ type: ActionType.INIT_BACKING_PALETTE, payload: { backingPaletteState } });\r\n    }\r\n\r\n    public setUseChannels = (useChannels: ChannelParam[]) => {\r\n        this.dispatchBase({ type: ActionType.SET_USE_CHANNELS, payload: { useChannels } });\r\n    }\r\n\r\n    public score = {\r\n\r\n        apllyFlash: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const reffer = this.state.noteData.dataList[focusIndex].reffer as HTMLDivElement;\r\n            reffer.style.backgroundColor = '#ff0';\r\n            setTimeout(() => {\r\n                reffer.style.backgroundColor = '';\r\n            }, 350);\r\n        },\r\n\r\n        setNoteState: (noteState: NoteState) => {\r\n            this.dispatch(ActionType.SET_NOTE_STATE, { noteState });\r\n        },\r\n        setCriteria: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            this.score.setNoteState({\r\n                ...this.state.noteState,\r\n                criteriaIndex: focusIndex, editMode: EditMode.BACKING\r\n            });\r\n        },\r\n        releaseCriteria: () => {\r\n            this.score.setNoteState({\r\n                ...this.state.noteState,\r\n                criteriaIndex: -1, editMode: EditMode.NORMAL, selectedList: []\r\n            });\r\n        },\r\n        setNoteData: (data: NoteData) => {\r\n            this.dispatch(ActionType.SET_NOTE_DATA, { data });\r\n        },\r\n        /**\r\n         * 初期値の要素を返す。\r\n         */\r\n        getInitElement: (): DetailInit => {\r\n            return this.state.noteData.dataList[0].detail as DetailInit;\r\n        },\r\n        setEditMode: (editMode: EditMode) => {\r\n            this.score.setNoteState({ ...this.state.noteState, editMode });\r\n        },\r\n        addSectionElement: () => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const dataList = this.state.noteData.dataList.slice();\r\n            const detail = {} as DetailSection;\r\n            detail.label = 'Section';\r\n            dataList.splice(curIndex + 1, 0, {\r\n                type: TypeNoteElement.Section,\r\n                detail: detail\r\n            });\r\n            this.dispatch(ActionType.SET_DATA_LIST, { dataList });\r\n        },\r\n        addChordElement: () => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const dataList = this.state.noteData.dataList.slice();\r\n            dataList.splice(curIndex + 1, 0, {\r\n                type: TypeNoteElement.Chord,\r\n                detail: {\r\n                    degreeIndex: -1,\r\n                    isFlat: false,\r\n                    symbolKey: null,\r\n                    sustain: 4,\r\n                    backing: {\r\n                        useChannels: [],\r\n                        layers: [\r\n                            {\r\n                                lens: [{\r\n                                    len: BACKING_LEN_TYPE.LEN1,\r\n                                    isDiv3: false,\r\n                                    isHalf: false\r\n                                }],\r\n                                side: BACKING_SIDE.LEFT,\r\n                                table: [],\r\n                                vels: [5]\r\n                            },\r\n                            {\r\n                                lens: [{\r\n                                    len: BACKING_LEN_TYPE.LEN1,\r\n                                    isDiv3: false,\r\n                                    isHalf: false\r\n                                }],\r\n                                side: BACKING_SIDE.RIGHT,\r\n                                table: [],\r\n                                vels: [5]\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            });\r\n            this.dispatch(ActionType.SET_DATA_LIST, { dataList });\r\n        },\r\n        deleteElement: (index: number) => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const curElement = this.state.noteData.dataList[index];\r\n            if (curElement.type == TypeNoteElement.Chord) {\r\n                const dataList: NoteElement[] = this.state.noteData.dataList.slice();\r\n                dataList.splice(index, 1);\r\n                this.dispatch(ActionType.SET_DATA_LIST, { dataList });\r\n                if (index <= curIndex) {\r\n                    this.state.noteState.focusIndex--;\r\n                    this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                }\r\n            }\r\n        },\r\n        deleteCurElement: () => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            this.score.deleteElement(curIndex);\r\n        },\r\n        focusPreviousElement: (): boolean => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const prev = this.state.noteData.dataList[curIndex - 1];\r\n            if (prev.type != TypeNoteElement.Fixed) {\r\n                this.state.noteState.focusIndex--;\r\n                this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        focusNextElement: (): boolean => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const next = this.state.noteData.dataList[curIndex + 1];\r\n            if (next.type != TypeNoteElement.Fixed) {\r\n                this.state.noteState.focusIndex++;\r\n                this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        focusPreviousSection: () => {\r\n            const dataList = this.state.noteData.dataList;\r\n            let curIndex = this.state.noteState.focusIndex;\r\n            do {\r\n                curIndex--;\r\n                if (dataList[curIndex].type == TypeNoteElement.Section) {\r\n                    this.state.noteState.focusIndex = curIndex;\r\n                    this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                    break;\r\n                }\r\n            } while (curIndex > 0);\r\n        },\r\n\r\n        focusNextSection: () => {\r\n            const dataList = this.state.noteData.dataList;\r\n            let curIndex = this.state.noteState.focusIndex;\r\n            do {\r\n                curIndex++;\r\n                if (dataList[curIndex].type == TypeNoteElement.Section || curIndex == dataList.length - 2) {\r\n                    this.state.noteState.focusIndex = curIndex;\r\n                    this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                    break;\r\n                }\r\n            } while (curIndex < dataList.length - 1);\r\n        },\r\n\r\n        focusInitElement: () => {\r\n            this.state.noteState.focusIndex = 0;\r\n            this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n        },\r\n\r\n        setSelectedList: (selectedList: number[]) => {\r\n            this.dispatch(ActionType.SET_NOTE_STATE, {\r\n                noteState: { ...this.state.noteState, selectedList }\r\n            });\r\n        },\r\n\r\n        callChordSelector: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const detail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n            this.dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                params: {\r\n                    ...this.state.noteState.chordPaletteState,\r\n                    rootIndex: detail.degreeIndex,\r\n                    isFlat: detail.isFlat,\r\n                    symbolKey: detail.symbolKey,\r\n                    sustain: detail.sustain,\r\n                }\r\n            });\r\n        },\r\n\r\n        callBackingEditor: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const detail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.BACKING_PALETTE });\r\n            const backing = detail.backing;\r\n            const backingState: BackingEditorState = {\r\n                useChannels: backing.useChannels,\r\n                isUsePedal: backing.isUsePedal,\r\n                sideIndex: 0,\r\n                selectedLenIndex: 0,\r\n                selectedChannelIndex: -1,\r\n                layers: backing.layers\r\n            };\r\n            this.initBackingPalette(backingState);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * コードエディタ画面の操作に関連するメソッドを定義するオブジェクト。\r\n     *\r\n     * @memberof Dispatcher\r\n     */\r\n    public chord = {\r\n        setCurChordParam: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const chordDetail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            const editorState = this.state.noteState.chordPaletteState;\r\n            this.dispatch(ActionType.DETAIL_PARAMS_SETTER, {\r\n                pos: focusIndex,\r\n                params: {\r\n                    ...chordDetail,\r\n                    degreeIndex: editorState.rootIndex,\r\n                    isFlat: editorState.isFlat,\r\n                    symbolKey: editorState.symbolKey,\r\n                    sustain: editorState.sustain,\r\n                }\r\n            });\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            const reffer = this.state.noteData.dataList[focusIndex].reffer as HTMLDivElement;\r\n            reffer.style.backgroundColor = '#ff0';\r\n            setTimeout(() => {\r\n                reffer.style.backgroundColor = '';\r\n            }, 350);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * バッキングエディタ画面の操作に関連するメソッドを定義するオブジェクト。\r\n     *\r\n     * @memberof Dispatcher\r\n     */\r\n    public backing = {\r\n        toggleMatrix: (channelIndex: number, lenIndex: number, divIndex: number) => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            const sideIndex = backing.sideIndex;\r\n            const isUse = !this.state.noteState.backingPaletteState.layers[sideIndex].table[channelIndex][lenIndex][divIndex];\r\n            this.dispatch(ActionType.BACKING_TOGGLE_MATRIX, { sideIndex, channelIndex, lenIndex, divIndex, isUse });\r\n        },\r\n        addLen: () => {\r\n            // this.dispatch({ type: ActionType.ADD_LEN, payload: null });\r\n\r\n            const backingPaletteState = this.state.noteState.backingPaletteState;\r\n            const script = backingPaletteState.layers;\r\n            const sideIndex = backingPaletteState.sideIndex;\r\n            const curSideScript = script[sideIndex];\r\n            const selectedLenIndex = backingPaletteState.selectedLenIndex;\r\n            const table = curSideScript.table;\r\n            curSideScript.lens = [...curSideScript.lens];\r\n            // 選択中の要素の次に挿入する\r\n            curSideScript.lens.splice(\r\n                selectedLenIndex + 1, 0,\r\n                { len: BACKING_LEN_TYPE.LEN4, isHalf: false, isDiv3: false }\r\n            );\r\n            table.forEach((line) => {\r\n                line.splice(\r\n                    selectedLenIndex + 1, 0, [false]\r\n                );\r\n            });\r\n            curSideScript.vels.splice(\r\n                backingPaletteState.selectedLenIndex + 1, 0, 5\r\n            );\r\n            script[sideIndex] = curSideScript;\r\n\r\n            this.dispatchBase({ type: ActionType.INIT_BACKING_PALETTE, payload: { backingPaletteState } });\r\n        },\r\n        delLen: () => {\r\n            // this.dispatch({ type: ActionType.ADD_LEN, payload: null });\r\n\r\n            const backingPaletteState = this.state.noteState.backingPaletteState;\r\n            const script = backingPaletteState.layers;\r\n            const sideIndex = backingPaletteState.sideIndex;\r\n            const curSideScript = script[sideIndex];\r\n            const selectedLenIndex = backingPaletteState.selectedLenIndex;\r\n            const table = curSideScript.table;\r\n            curSideScript.lens = [...curSideScript.lens];\r\n            // 選択中の要素を削除する\r\n            curSideScript.lens.splice(selectedLenIndex, 1);\r\n            table.forEach((line) => {\r\n                line.splice(selectedLenIndex, 1);\r\n            });\r\n            curSideScript.vels.splice(selectedLenIndex, 1);\r\n            script[sideIndex] = curSideScript;\r\n\r\n            if (selectedLenIndex > 0) {\r\n                backingPaletteState.selectedLenIndex--;\r\n            }\r\n            this.dispatch(ActionType.INIT_BACKING_PALETTE, { backingPaletteState });\r\n        },\r\n        updateLenIndex: (index: number) => {\r\n            const backingPaletteState = this.state.noteState.backingPaletteState;\r\n            backingPaletteState.selectedLenIndex = index;\r\n            this.initBackingPalette(backingPaletteState);\r\n        },\r\n        getCurLenIndex: (): number => {\r\n            const backingPaletteState = this.state.noteState.backingPaletteState;\r\n            return backingPaletteState.selectedLenIndex;\r\n        },\r\n        isFirstCurLen: (): boolean => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            return backing.selectedLenIndex == 0;\r\n        },\r\n        isLastCurLen: (): boolean => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            const sideScript = backing.layers[backing.sideIndex];\r\n            return backing.selectedLenIndex == sideScript.lens.length - 1;\r\n        },\r\n        getSideScript: (): BackingLayer => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            return backing.layers[backing.sideIndex];\r\n        },\r\n        getCurLenBean: (): BackingLen => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            const sideScript = backing.layers[backing.sideIndex];\r\n            return sideScript.lens[backing.selectedLenIndex];\r\n        },\r\n\r\n        /**\r\n         * \r\n         * @param lenBean \r\n         */\r\n        setCurrentLenBean: (lenBean: BackingLen) => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            const script = backing.layers;\r\n            const sideScript = script[backing.sideIndex];\r\n            sideScript.lens[backing.selectedLenIndex] = lenBean;\r\n            this.initBackingPalette({ ...backing, layers: script });\r\n        },\r\n\r\n        /**\r\n         * 選択中の列の長さを設定します。\r\n         * @param lenType 長さ\r\n         */\r\n        setCurLen: (lenType: BACKING_LEN_TYPE) => {\r\n            const curLenBean = this.backing.getCurLenBean();\r\n            curLenBean.len = lenType;\r\n            curLenBean.isHalf = false;\r\n            curLenBean.isDiv3 = false;\r\n            this.backing.setCurrentLenBean(curLenBean);\r\n        },\r\n\r\n        /**\r\n         * 選択中の列のベロシティ値を更新する。\r\n         * @param velocity 更新するベロシティ値（1～10）\r\n         */\r\n        updateCurVolume: (velocity: number) => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            const script = backing.layers;\r\n            script[backing.sideIndex].vels[backing.selectedLenIndex] = velocity;\r\n            this.initBackingPalette({ ...backing, layers: script });\r\n        },\r\n\r\n        /**\r\n         * 選択中の列のベロシティ値を返す。\r\n         * @returns 選択中の列のベロシティ値\r\n         */\r\n        getCurVelocity: (): number => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            const sideScript = backing.layers[backing.sideIndex];\r\n            return sideScript.vels[backing.selectedLenIndex];\r\n        },\r\n\r\n        /**\r\n         * 付点を設定できるか否かを判定する。\r\n         * @returns 付点を設定できるか否か\r\n         */\r\n        isAcceptHalf: (): boolean => {\r\n            return [\r\n                BACKING_LEN_TYPE.LEN2,\r\n                BACKING_LEN_TYPE.LEN4,\r\n                BACKING_LEN_TYPE.LEN8\r\n            ].includes(this.backing.getCurLenBean().len);\r\n        },\r\n\r\n        /**\r\n         * 3連符を設定できるか否かを判定する。\r\n         * @returns 3連符を設定できるか否か\r\n         */\r\n        isAcceptDiv3: (): boolean => {\r\n            return [\r\n                BACKING_LEN_TYPE.LEN4,\r\n                BACKING_LEN_TYPE.LEN8\r\n            ].includes(this.backing.getCurLenBean().len);\r\n        },\r\n\r\n        setLayerIndex: (index: number) => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            backing.sideIndex = index;\r\n            backing.selectedLenIndex = 0;\r\n            this.initBackingPalette(backing);\r\n        },\r\n        setUsePedal: (use: boolean) => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            backing.isUsePedal = use;\r\n            this.initBackingPalette(backing);\r\n        },\r\n\r\n        changeLayerIndex: () => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            backing.sideIndex = backing.sideIndex == 0 ? 1 : 0;\r\n            backing.selectedLenIndex = 0;\r\n            this.initBackingPalette(backing);\r\n        },\r\n\r\n        setUseChannels: (useChannels: ChannelParam) => {\r\n            const backingPaletteState = this.state.noteState.backingPaletteState;\r\n            const baseLayers = backingPaletteState.layers;\r\n            const layers: BackingLayer[] = new Array(2);\r\n            for (let i = 0; i < 2; i++) {\r\n                const channelCount = backingPaletteState.useChannels.length;\r\n                const lensSplitCount = baseLayers[i].lens.length;\r\n                const baseTable = baseLayers[i].table;\r\n                const table: boolean[][][] = new Array(channelCount);\r\n\r\n                for (let y = 0; y < channelCount; y++) {\r\n                    if (y < baseTable.length) {\r\n                        table[y] = baseTable[y];\r\n                    } else {\r\n                        table[y] = new Array(lensSplitCount);\r\n                        for (let x = 0; x < lensSplitCount; x++) {\r\n                            table[y][x] = new Array(1);\r\n                            table[y][x][0] = false;\r\n                        }\r\n                    }\r\n                }\r\n                layers[i] = {\r\n                    ...baseLayers[i],\r\n                    table,\r\n                };\r\n            }\r\n        },\r\n\r\n        setCurBackingScript: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const chordDetail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            const editorState = this.state.noteState.backingPaletteState;\r\n            const backing = {} as BackingScript;\r\n            backing.useChannels = editorState.useChannels;\r\n            backing.layers = editorState.layers;\r\n            backing.isUsePedal = editorState.isUsePedal;\r\n            this.dispatch(ActionType.DETAIL_PARAMS_SETTER, {\r\n                pos: focusIndex,\r\n                params: {\r\n                    ...chordDetail,\r\n                    backing\r\n                }\r\n            });\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            this.score.apllyFlash();\r\n        },\r\n\r\n        getNotesCount: (backing: BackingScript): number => {\r\n\r\n            let count = 0;\r\n            backing.layers.forEach((layer) => {\r\n                layer.table.forEach((line) => {\r\n                    line.forEach((cell) => {\r\n                        if (cell[0]) {\r\n                            count++;\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n            return count;\r\n        },\r\n\r\n        play: (isProceed: boolean) => {\r\n\r\n            const threads = this.state.noteState.backingThreads;\r\n            const soundUseList: number[] = Array(88);\r\n            for (let i = 0; i < 88; i++) {\r\n                soundUseList[i] = 0;\r\n            }\r\n            const rec = (isProceed: boolean) => {\r\n\r\n                const focusIndex = this.state.noteState.focusIndex;\r\n                const detail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n                const symbol = getSymbolParams(detail.symbolKey);\r\n                const intervals = symbol?.intervals as number[];\r\n                const editor = this.state.noteState.backingPaletteState;\r\n                const backing: BackingScript = !isProceed ? { layers: editor.layers, useChannels: editor.useChannels, isUsePedal: editor.isUsePedal }\r\n                    : detail.backing;\r\n                const sampler = this.state.sampler;\r\n                const tempo = 80;\r\n                // 1小節の長さミリ秒\r\n                const barMs = 60000 / tempo * 4;\r\n                const boxMs = 60000 / tempo * detail.sustain;\r\n                const adjustOverlap = barMs / 32;\r\n\r\n                // 末端に達した時の処理\r\n                threads.push(\r\n                    setTimeout(() => {\r\n                        let isEnd = true;\r\n                        if (isProceed) {\r\n                            const hasNext = this.score.focusNextElement();\r\n                            if (hasNext) {\r\n                                isEnd = false;\r\n                                rec(true);\r\n                            }\r\n                        }\r\n                        if (isEnd) {\r\n                            this.score.setNoteState({ ...this.state.noteState, editMode: EditMode.NORMAL });\r\n                        }\r\n                    }, boxMs)\r\n                );\r\n                for (let i = 0; i < 2; i++) {\r\n                    let headMs = 0;\r\n                    const layer = backing.layers[i];\r\n                    // 音価のループ\r\n                    layer.lens.forEach((lenBean, j) => {\r\n\r\n                        const lenValue = Number(lenBean.len.toString().replace('LEN', ''));\r\n                        let curLenMs = barMs / lenValue;\r\n                        if (lenBean.isHalf) {\r\n                            curLenMs *= 1.5;\r\n                        }\r\n                        backing.useChannels.forEach((channel, k) => {\r\n                            layer.table[k][j].forEach((notes, l) => {\r\n\r\n                                if (notes) {\r\n                                    const soundIndex = detail.degreeIndex + intervals[channel.structIndex] + channel.octave * 12;\r\n                                    const octave = Math.floor(soundIndex / 12);\r\n                                    const root = KEY12_SHARP_LIST[soundIndex % 12];\r\n                                    const soundFullName = root + octave;\r\n                                    const velocity = 0.7 * layer.vels[j] / 10;\r\n                                    const head = headMs + curLenMs / 3 * l;\r\n                                    const tail = !backing.isUsePedal ?\r\n                                        //ペダル未使用時\r\n                                        head + curLenMs :\r\n                                        //ペダル使用時\r\n                                        boxMs + adjustOverlap\r\n                                        ;\r\n                                    threads.push(\r\n                                        setTimeout(() => {\r\n                                            sampler.triggerAttack(soundFullName, '+0', velocity);\r\n                                            soundUseList[soundIndex]++;\r\n                                        }, head)\r\n                                    );\r\n                                    threads.push(\r\n                                        setTimeout(() => {\r\n                                            soundUseList[soundIndex]--;\r\n                                            if (soundUseList[soundIndex] == 0) {\r\n                                                sampler.triggerRelease(soundFullName);\r\n                                            }\r\n                                        }, tail)\r\n                                    );\r\n                                }\r\n                            });\r\n                        });\r\n                        headMs += curLenMs;\r\n                    });\r\n                }\r\n                this.score.setNoteState({\r\n                    ...this.state.noteState,\r\n                    editMode: EditMode.PREVIEW, backingThreads: threads\r\n                });\r\n            }\r\n            rec(isProceed);\r\n        }\r\n    }\r\n}","import './MainFrame.css';\r\n\r\nimport TabbedPane from 'contents/common/TabbedPane';\r\nimport ScoreTab from 'contents/systab/score/ScoreTab';\r\n// import AccountTab from 'contents/tabs/account/AccountTab.jsx';\r\n// import ScoreTab from 'contents/tabs/score/ScoreTab.jsx';\r\nimport { initialState, Store, Action } from 'contents/redux/store';\r\nimport { ActionType, reducer } from 'contents/redux/reducer';\r\nimport { createContext, useReducer, KeyboardEvent } from 'react';\r\nimport { KeyboardShortCutAction } from './operation/InputNoteTab';\r\nimport { Dispatcher } from './redux/dispatcher';\r\n\r\ntype GlobalContextType = {\r\n    state: Store;\r\n    dispatch: Function;\r\n    dispatcher: Dispatcher;\r\n}\r\n\r\n// export const GlobalContext = createContext(({}) as GlobalContextType);\r\nexport const GlobalContext = createContext(({}) as GlobalContextType);\r\n\r\nconst MainFrame = () => {\r\n\r\n    const [state, dispatchBase] = useReducer(reducer, initialState);\r\n    const dispatch = (actionType: ActionType, payload: any) => dispatchBase({ type: actionType, payload: payload });\r\n    const dispatcher = new Dispatcher(state, dispatchBase);\r\n    const contextValue: GlobalContextType = { state, dispatch ,dispatcher};\r\n    return (\r\n        <div\r\n            id=\"main-frame\"\r\n            tabIndex={999}\r\n            onKeyDown={(e: KeyboardEvent) => KeyboardShortCutAction(e, state, dispatch, dispatcher)}\r\n        >\r\n            <GlobalContext.Provider value={contextValue}>\r\n                <TabbedPane groupName=\"system-tabs\"\r\n                    tabElements={[\r\n                        { name: 'Account', disable: true, cont: <div></div> },\r\n                        { name: 'Palette', disable: true, cont: <div></div> },\r\n                        { name: 'Score', disable: false, cont: <ScoreTab /> },\r\n                        { name: 'Backing', disable: true, cont: <div></div> },\r\n                        { name: 'Symbol', disable: true, cont: <div></div> },\r\n                        { name: 'Sampler', disable: true, cont: <div></div> },\r\n                        { name: 'Setting', disable: true, cont: <div></div> }\r\n                    ]}\r\n                    activeNo={2}\r\n                />\r\n            </GlobalContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainFrame;\r\n","import { DIATONIC_MAJOR_SCALE_LIST, KEY12_SHARP_LIST, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport { getSymbolParams } from \"contents/common/utils\";\r\nimport { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { BackingEditorState as BackingEditorState, BACKING_LEN_TYPE, BACKING_SIDE, CHORD_MODE, DetailChord, EditMode, FloatWndState, NoteElement, Store, TypeNoteElement } from \"contents/redux/store\";\r\nimport { KeyboardEvent } from 'react';\r\n\r\n\r\n/**\r\n * 譜面編集時のキーボードショートカット\r\n * @param e キーボードイベント\r\n */\r\nexport const KeyboardShortCutAction = (e: KeyboardEvent, state: Store, dispatch: Function, dispatcher: Dispatcher) => {\r\n    // alert(e.key);\r\n\r\n    const focusIndex = state.noteState.focusIndex;\r\n    const editMode = state.noteState.editMode;\r\n    const chordMode = state.noteData.chordMode;\r\n    const selectedData = state.noteData.dataList[focusIndex];\r\n\r\n    switch (selectedData.type) {\r\n        case TypeNoteElement.Chord: {\r\n            const detail = selectedData.detail as DetailChord;\r\n\r\n            switch (state.noteState.floatwndState) {\r\n                case FloatWndState.NONE: {\r\n\r\n                    if (editMode == EditMode.NORMAL) {\r\n                        switch (e.key) {\r\n                            case 'c': {\r\n                                dispatcher.score.callChordSelector();\r\n                            }\r\n                                break;\r\n                            case 'b': {\r\n                                dispatcher.score.callBackingEditor();\r\n                            }\r\n                                break;\r\n                            case '1':\r\n                            case '2':\r\n                            case '3':\r\n                            case '4':\r\n                            case '5':\r\n                            case '6':\r\n                            case '7': {\r\n                                if(chordMode == CHORD_MODE.DIRECT) break;\r\n                                const diatonicChord = DIATONIC_MAJOR_SCALE_LIST[Number(e.key) - 1];\r\n                                dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: diatonicChord.degreeIndex });\r\n                                dispatch(ActionType.SET_SYMBOL_KEY, { pos: focusIndex, symbolKey: diatonicChord.symbolKey });\r\n                            }\r\n                                break;\r\n                            case 'x': {\r\n                                dispatcher.score.setCriteria();\r\n                            }\r\n                                break;\r\n                            case 'z': {\r\n                                alert(JSON.stringify(detail));\r\n\r\n                                // const data = state.noteData.dataList[state.noteState.focusIndex];\r\n                                // data.detail = {\"degreeIndex\":2,\"isFlat\":false,\"symbolKey\":1,\"sustain\":4,\"backing\":{\"useChannels\":[{\"octave\":3,\"structIndex\":0},{\"octave\":3,\"structIndex\":1},{\"octave\":3,\"structIndex\":2},{\"octave\":4,\"structIndex\":0},{\"octave\":4,\"structIndex\":1},{\"octave\":4,\"structIndex\":2},{\"octave\":5,\"structIndex\":1},{\"octave\":5,\"structIndex\":2}],\"layers\":[{\"lens\":[{\"len\":\"LEN8\",\"isDiv3\":false,\"isHalf\":false},{\"len\":\"LEN8\",\"isHalf\":false,\"isDiv3\":false},{\"len\":\"LEN8\",\"isHalf\":false,\"isDiv3\":false},{\"len\":\"LEN8\",\"isHalf\":false,\"isDiv3\":false},{\"len\":\"LEN8\",\"isHalf\":false,\"isDiv3\":false}],\"side\":\"LEFT\",\"table\":[[[true],[false],[false],[false],[false]],[[false],[false],[false],[false],[false]],[[false],[false],[true],[true],[false]],[[false],[false],[false],[false],[false]],[[true],[false],[false],[false],[false]],[[false],[true],[false],[false],[false]],[[false],[false],[false],[false],[false]],[[false],[false],[false],[false],[true]]],\"vels\":[5,5,5,5,5]},{\"lens\":[{\"len\":\"LEN1\",\"isDiv3\":false,\"isHalf\":false}],\"side\":\"RIGHT\",\"table\":[[[false]],[[false]],[[false]],[[false]],[[false]],[[false]],[[false]],[[false]]],\"vels\":[5]}]}};\r\n                                // dispatcher.setNoteData(state.noteData);\r\n                            }\r\n                                break;\r\n                            case ' ': {\r\n                                dispatcher.backing.play(true);\r\n                            }\r\n                                break;\r\n                        }\r\n                    } else {\r\n\r\n                        switch (e.key) {\r\n                            case 'x': {\r\n                                dispatcher.score.releaseCriteria();\r\n                            }\r\n                                break;\r\n                            case 'Enter': {\r\n                                const dataList = state.noteData.dataList;\r\n                                const baseBacking = (dataList[state.noteState.criteriaIndex].detail as DetailChord).backing;\r\n                                state.noteState.selectedList.forEach((index) => {\r\n                                    (dataList[index].detail as DetailChord).backing = JSON.parse(JSON.stringify(baseBacking));\r\n                                });\r\n                                dispatcher.score.setNoteData({ ...state.noteData, dataList });\r\n                                dispatcher.score.releaseCriteria();\r\n                            }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                    break;\r\n                case FloatWndState.CHORD_PALETTE: {\r\n                    switch (e.key) {\r\n                        case 'Escape':\r\n                        case 'c':\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                            break;\r\n                        case 'ArrowRight':\r\n                            dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: detail.degreeIndex + 1 });\r\n                            break;\r\n                        case 'ArrowLeft':\r\n                            dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: detail.degreeIndex - 1 });\r\n                            break;\r\n                        case '1':\r\n                            dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: detail.degreeIndex - 1 });\r\n                            break;\r\n                        case 'Enter': {\r\n                            dispatcher.chord.setCurChordParam();\r\n                        }\r\n                            break;\r\n                    }\r\n                }\r\n                    break;\r\n                case FloatWndState.BACKING_PALETTE: {\r\n                    switch (e.key) {\r\n                        case 'Escape':\r\n                        case 'b':\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                            break;\r\n                        case 'ArrowLeft': {\r\n                            if (!dispatcher.backing.isFirstCurLen()) {\r\n                                const cur = dispatcher.backing.getCurLenIndex();\r\n                                dispatcher.backing.updateLenIndex(cur - 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'ArrowRight': {\r\n                            if (!dispatcher.backing.isLastCurLen()) {\r\n                                const cur = dispatcher.backing.getCurLenIndex();\r\n                                dispatcher.backing.updateLenIndex(cur + 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'ArrowUp': {\r\n                            const curVolume = dispatcher.backing.getCurVelocity();\r\n                            if (curVolume < 10) {\r\n                                dispatcher.backing.updateCurVolume(curVolume + 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'ArrowDown': {\r\n                            const curVolume = dispatcher.backing.getCurVelocity();\r\n                            if (curVolume > 1) {\r\n                                dispatcher.backing.updateCurVolume(curVolume - 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'r': {\r\n                            dispatcher.backing.changeLayerIndex();\r\n                        }\r\n                            break;\r\n                        case '1': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN16); break;\r\n                        case '2': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN8); break;\r\n                        case '3': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN4); break;\r\n                        case '4': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN2); break;\r\n                        case '5': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN1); break;\r\n                        case '.': {\r\n                            if (dispatcher.backing.isAcceptHalf()) {\r\n                                const curLenBean = dispatcher.backing.getCurLenBean();\r\n                                curLenBean.isHalf = !curLenBean.isHalf;\r\n                                curLenBean.isDiv3 = false;\r\n                                dispatcher.backing.setCurrentLenBean(curLenBean);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case '/': {\r\n                            if (dispatcher.backing.isAcceptDiv3()) {\r\n                                const curLenBean = dispatcher.backing.getCurLenBean();\r\n                                curLenBean.isDiv3 = !curLenBean.isDiv3;\r\n                                curLenBean.isHalf = false;\r\n                                dispatcher.backing.setCurrentLenBean(curLenBean);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'a': {\r\n                            dispatcher.backing.addLen();\r\n                        }\r\n                            break;\r\n                        case 'Delete': {\r\n                            if (dispatcher.backing.getSideScript().lens.length > 1) {\r\n                                dispatcher.backing.delLen();\r\n                            }\r\n                        }\r\n                            break;\r\n\r\n                        case ' ': {\r\n                            dispatcher.backing.play(false);\r\n                        }\r\n                            break;\r\n                        // 設定を反映\r\n                        case 'Enter': {\r\n                            dispatcher.backing.setCurBackingScript();\r\n                        }\r\n                            break;\r\n                    }\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n            break;\r\n    }\r\n\r\n    if (state.noteState.floatwndState == FloatWndState.NONE &&\r\n        [TypeNoteElement.Chord, TypeNoteElement.Section].includes(selectedData.type)) {\r\n        if (editMode == EditMode.NORMAL) {\r\n            switch (e.key) {\r\n                case 'ArrowLeft': {\r\n                    dispatcher.score.focusPreviousElement();\r\n                }\r\n                    break;\r\n                case 'ArrowRight': {\r\n                    dispatcher.score.focusNextElement();\r\n                }\r\n                    break;\r\n                case 'ArrowUp': {\r\n                    dispatcher.score.focusPreviousSection();\r\n                }\r\n                    break;\r\n                case 'ArrowDown': {\r\n                    dispatcher.score.focusNextSection();\r\n                }\r\n                    break;\r\n                case 'Delete': {\r\n                    dispatcher.score.deleteCurElement();\r\n                    // dispatcher.score.addChordElement();\r\n                }\r\n                    break;\r\n                case 'i': {\r\n                    dispatcher.score.focusInitElement();\r\n                }\r\n                    break;\r\n                case 'a':\r\n                    dispatcher.score.addChordElement();\r\n                    break;\r\n                case 's':\r\n                    dispatcher.score.addSectionElement();\r\n                    break;\r\n                case 'w': {\r\n                    const detail = selectedData.detail as DetailChord;\r\n                    dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                        params: {\r\n                            ...state.noteState.chordPaletteState,\r\n                            rootIndex: detail.degreeIndex,\r\n                            isFlat: detail.isFlat,\r\n                            symbolKey: detail.symbolKey,\r\n                            sustain: detail.sustain,\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        } else if (editMode == EditMode.PREVIEW) {\r\n\r\n            switch (e.key) {\r\n                case ' ': {\r\n                    const threads = state.noteState.backingThreads;\r\n                    threads.forEach((thr) => {\r\n                        clearInterval(thr);\r\n                    });\r\n                    dispatcher.score.setNoteState({\r\n                        ...state.noteState,\r\n                        backingThreads: [], editMode: EditMode.NORMAL\r\n                    });\r\n                    state.sampler.releaseAll();\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n};","import React, { useEffect } from 'react';\n\n// import Tone from 'lib/Tone.min.js';\n// import Tone from \"react-tone\";\nimport * as Tone from \"tone\";\n\nimport './desty.css';\nimport './App.css';\nimport MainFrame from 'contents/MainFrame';\n\nfunction App() {\n  useEffect(() => {\n    // 右クリック無効\n    document.oncontextmenu = function () { return false; }\n\n    window.addEventListener(\"keydown\", function (e) {\n      // space and arrow keys\n      if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n        e.preventDefault();\n      }\n    }, false);\n\n  }, []);\n  return (\n    <MainFrame />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}