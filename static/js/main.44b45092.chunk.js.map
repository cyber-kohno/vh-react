{"version":3,"sources":["contents/common/define.tsx","contents/common/TabbedPane.tsx","contents/redux/store.tsx","contents/redux/reducer.tsx","contents/common/utils.tsx","contents/systab/score/contTabs/note/element/detail/ScoreElementDetail.tsx","contents/systab/score/contTabs/note/element/ScoreElement.tsx","contents/systab/score/contTabs/note/OutlineSection.tsx","contents/systab/score/contTabs/note/floatwnd/context/NoteContextMenu.tsx","contents/systab/score/contTabs/note/floatwnd/chord/ChordSelector.tsx","contents/systab/score/contTabs/note/sideDetail/CurrentElementInfo.tsx","contents/systab/score/contTabs/note/floatwnd/backing/BackingOperation.tsx","contents/systab/score/contTabs/note/floatwnd/backing/NotesMatrix.tsx","contents/systab/score/contTabs/note/floatwnd/backing/SplitMeasure.tsx","contents/systab/score/contTabs/note/floatwnd/backing/BackingTable.tsx","contents/common/Styles.tsx","contents/systab/score/contTabs/note/floatwnd/backing/StructMatrix.tsx","contents/systab/score/contTabs/note/floatwnd/backing/BackingEditor.tsx","contents/systab/score/contTabs/note/footer/timing/FooterTiming.tsx","contents/systab/score/contTabs/note/footer/ensemble/FooterEnsemble.tsx","contents/systab/score/contTabs/note/footer/NoteFooter.tsx","contents/systab/score/contTabs/note/floatwnd/init/InitEditor.tsx","contents/systab/score/contTabs/note/floatwnd/section/SectionEditor.tsx","contents/systab/score/contTabs/note/floatwnd/setting/SettingEditor.tsx","contents/systab/score/contTabs/note/floatwnd/change/ChangeEditor.tsx","contents/systab/score/contTabs/note/ScoreContNoteTab.tsx","contents/systab/score/contTabs/library/ScoreContLibraryTab.tsx","contents/systab/score/contTabs/backing/ScoreContBackingTab.tsx","contents/systab/score/contTabs/source/ScoreContSourceTab.tsx","contents/systab/score/ScoreTab.tsx","contents/redux/dispatcher.tsx","contents/login/LoginFrame.tsx","contents/user/UserPlate.tsx","contents/MainFrame.tsx","contents/operation/InputNoteTab.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimeSignatures","KeyScale","TabLabel","props","classValues","push","isActive","isDisable","className","join","onClick","selectTab","name","TabContents","cont","TabbedPane","useState","activeNo","setActiveNo","useEffect","id","groupName","tabElements","map","tab","index","disable","undefined","selectTabIndex","DEGREE12_FLAT_LIST","DEGREE12_SHARP_LIST","KEY12_FLAT_LIST","KEY12_SHARP_LIST","KEY12_MAJOR_SCALE_LIST","KEY12_MINOR_SCALE_LIST","SCALE_LIST","RYTHM_LIST","SymbolKey","SymbolType","DIATONIC_MAJOR_SCALE_DEGREE_NAMES","DIATONIC_NATURAL_MINOR_SCALE_DEGREE_NAMES","FloatWndState","ChordPaletteLine","BACKING_SIDE","BACKING_LEN_TYPE","CHORD_MODE","EditMode","ChangeType","ModulateRelation","TempoRelation","TypeNoteElement","SYMBOL_PARAMS_LIST","key","MAJOR","category","TRIAD","MINOR","SUS4","DIM","AUG","MAJ7","TETRAD7TH","SEVENTH","MIN7","MINOR_MAJ7","ADD9","TETRAD9TH","MINOR_ADD9","SIXTH_9TH","OTHER","MINOR_MINUS5","DIATONIC_MAJOR_SCALE_LIST","degreeIndex","symbolKey","isFlat","DIATONIC_MINOR_SCALE_LIST","ActionType","initialState","login","isLogin","scoreTabIndex","noteData","scoreName","chordMode","SCALE","dataList","noteState","focusIndex","cacheList","criteriaIndex","editMode","NORMAL","selectedList","defaultSustain","floatwndState","NONE","chordPaletteState","isAddition","selectedLine","Root","molecule","rootIndex","denominator","sustain","headAdjust","tailAdjust","backingPaletteState","backingThreads","reffers","sampler","Sampler","toDestination","soundUseList","Array","reducer","state","action","type","payload","SET_LOGIN","SELECT_SCORETAB","ADD_SECTION","slice","detail","splice","Section","SET_DEGREE_INDEX","pos","SET_SYMBOL_KEY","INIT_DEFAULT_ELEMENTS","Init","tempo","rythm","keyIndex","scale","Fixed","label","labelName","SELECT_NOTE_ELEMENT","GET_REFFER_CONTEXT","contextMneu","reffer","GET_REFFER_CHORD_PALETTE","chordPalette","GET_REFFER_SECTION_PALETTE","sectionPalette","GET_REFFER_BACKING_PALETTE","backingPalette","FLOATWND_STATE","CHORD_PALETTE_SETTER","params","DETAIL_PARAMS_SETTER","GET_REFFER","SET_NOTE_DATA","data","SET_DATA_LIST","SET_NOTE_STATE","GET_ELEMENT_REFFER","INIT_BACKING_PALETTE","SET_USE_CHANNELS","editorState","useChannels","BACKING_TOGGLE_MATRIX","sideIndex","lenIndex","channelIndex","divIndex","script","layers","table","isUse","getSymbolParams","symbol","forEach","getAdjustSusValue","value","ret","toString","getChordRoot","rootInfo","sendQueryRequestToAPI","queryType","sql","fetch","API_DOMAIN","mode","method","headers","Accept","body","JSON","stringify","createQueryRequestInit","applyOnChord","molRootIndex","denRootIndex","denInterval","fixedIntervals","fixedStruct","isAdded","intervals","cur","i","length","struct","getDegreeRoot","ScoreElementDetail","useContext","GlobalContext","dispatcher","cache","noteElement","paramLabels","Chord","degreeMolRoot","degreeDenRoot","chordMolRoot","init","chordDenRoot","symbolName","isDiatonic","degreeName","chordName","getSymbolName","includes","sustainJsx","barCount","progress","remaindBeat","headMSec","Math","round","notesCount","backing","getNotesCount","DIRECT","Change","prevCache","changeInnerJsx","changeType","MODULATE","relation","modulateRelation","isValuable","DOMINANT","KEY","oldKeyIndex","oldIsMinor","newKeyIndex","newIsMinor","domminantValue","keyAdjust","RELATIVE","PARALLEL","oldKeyName","newKeyName","TEMPO","tempoRelation","oldTempo","newTempo","DIFF","tempoDiff","RATE","tempoRate","ABSOLUTE","tempoAbsolute","BEAT","ScoreElement","dispatch","isAccept","ref","useRef","current","isSelected","isCriteria","normalElementClickAction","additionBtn","score","addChordElement","CHORD_PALETTE","retJsxList","no","isMajor","rootKey","deleteElement","getHeaderElement","getStyleFromType","posList","secNo","curSecNo","el","isCurrentSection","BACKING","some","setSelectedList","selectorElementClickAction","onContextMenu","e","INIT_PALETTE","style","left","clientX","top","clientY","CONTEXT_MENU","OutlineSection","isCurrent","MenuRecord","executer","menuType","keyName","NoteContextMenu","close","menuPropsList","curElement","addSectionElement","addChangeElement","setNoteData","callChordSelector","callBackingEditor","setCriteria","callSectionEditor","callChangeEditor","deleteCurElement","menuList","ChordSelector","canvasRef","canvas","width","height","updatePianoView","ctx","getContext","list","denIndex","fillStyle","fillRect","WIDTH","posX","keyboadList","color","isBlack","HEIGHT","keyboad","strokeRect","save","chordList","symbolList","beatList","operationJsx","isDirect","degS","degF","chdS","chdF","isHalf","isDenominator","buildLabelSrc","Symbol","Sustain","chord","setCurChordParam","getAdjustOprJsx","offset","cls","callback","Adjuster","CurrentElementInfo","inner","root","degreeRoot","chordRoot","baseBlockJsx","buildInfoBlock","title","chordBlockJsx","String","structList","len","interval","sound","sectionBlockJsx","titleLabel","dataRecordList","jsxList","BackingOperation","paletteState","curSideScript","selectedLenIndex","curLenBean","lens","curVolume","vels","setCurrentLenBean","lenBean","initBackingPalette","setCurrentLen","lenType","isDiv3","updateCurrentVolume","sub","nowVol","curLen","buttons","LEN16","LEN8","LEN4","LEN2","LEN1","isAcceptHalf","isAcceptDiv3","addLen","delLen","buttonList","button","channelRowSize","onChange","newValue","parseInt","target","diff","layer","record","j","abs","setPaletteState","val","isDisabled","getActiveState","curLayerIndex","lineIndex","back","curCellRange","getCellRange","backLenBean","k","backRange","isOverlapJudge","range1","range2","head","getLenSize","size","NotesMatrix","channelList","matrixLayersJsx","l","linesJsx","isCurLayer","cellList","classes","divList","divCnt","activeState","toggleMatrix","SplitMeasure","curLayer","sustainLength","measureInner","measureLength","cnt","isLimit","limitLeft","limitJsx","BackingTable","testPlaySound","channelJsxList","blankAdjust","curIndex","isExist","soundFullName","volumeList","volume","setLayerIndex","isUsePedal","setUsePedal","styled","div","backgroundColor","padding","margin","textAlign","defaultProps","opacity","_Text","span","fontSize","fontWeight","StructMatrix","structTable","sort","a","b","octave","structIndex","overVoicingList","structs","cols","soundName","soundIndex","floor","isNone","channel","isOverVoicing","setUseChannels","BackingContext","createContext","getChannelList","BackingEditor","BACKING_PALETTE","triggerAttack","setTimeout","triggerRelease","operation","isCorrect","play","setCurBackingScript","Provider","FIXED_BLANK","getAdjustCls","FooterTiming","dataCount","scrollRef","blockJsxList","setBlockJsxList","measureJsxList","setMeasureJsxList","total","setTotal","chordDetail","isCur","isNear","scrollTo","behavior","totalWidth","FooterEnsemble","NoteFooter","InitEditor","setTempo","setRythm","setKey","setScale","setInitParam","getItemSelector","optionsJsx","display","min","max","Number","item","SectionEditor","setLabelName","section","setSectionParam","SECTION_PALETTE","SettingEditor","SETTING_EDITOR","defsus","sustainJsxList","setNoteState","getItemSelectorJsx","getItemNumberRangeJsx","ChangeEditor","setChangeType","setModulateRelation","setDomminantValue","setKeyAdjust","setTempoRelation","setTempoRate","setTempoDiff","setTempoAbsolute","beat","setBeat","isInputOK","setInputOK","checkInput","itemsJsxList","concat","Object","values","filter","str","change","applyChangeParams","CHANGE_PALETTE","EditModeBorder","PREVIEW","ScoreContNoteTab","elementList","setElementList","sectionList","setSectionList","console","log","totalBeat","totalMsec","lastBar","bar","isModalBlind","ScoreContLiblaryTab","focus","setFocus","message","setMessage","recordList","setRecordList","titleList","setTitleList","isEdit","setEdit","setTitle","setChordMode","isLoad","setLoad","reload","initFocus","then","response","json","results","catch","error","chord_mode","createButton","createInfoRecored","innerJsx","isDisplayMsg","selectedRecord","result","alert","data_cnt","parse","ScoreContBackingTab","ScoreContSourceTab","ScoreTab","Dispatcher","dispatchBase","setLoginParams","apllyFlasah","apllyFlashCur","apllyFlashList","releaseCriteria","getInitElement","setEditMode","addNoteElement","side","LEFT","RIGHT","focusPreviousElement","focusNextElement","focusPreviousSection","focusNextSection","focusInitElement","backingState","selectedChannelIndex","line","updateLenIndex","getCurLenIndex","setChannelRowSize","isFirstCurLen","isLastCurLen","sideScript","getSideScript","getCurLenBean","setCurLen","updateCurVolume","velocity","getCurVelocity","use","setCorrect","changeLayerIndex","baseLayers","channelCount","lensSplitCount","baseTable","y","x","count","cell","isScore","threads","totalTime","curTime","Date","getTime","next","editor","barMs","boxMs","adjustOverlap","headMs","lenValue","replace","curLenMs","notes","tail","lag","this","LoginTypeSwitch","loginType","curLoginType","setLoginType","resetError","TextForm","stateSetter","strLen","stateValue","isHanEisu","isMask","match","LoginFrame","userName","setUserName","password","setPassword","passConfirm","setPassConfirm","isError","setError","isLoading","setLoading","enterDisable","UserPlate","MainFrame","useReducer","actionType","tabIndex","onKeyDown","selectedData","selectedCache","diatonicChord","baseBacking","thr","clearInterval","releaseAll","KeyboardShortCutAction","App","document","oncontextmenu","window","addEventListener","indexOf","keyCode","preventDefault","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"ojBA4BYA,EAaAC,E,iFCwCNC,EAAW,SAACC,GAMd,IAAMC,EAAc,GAIpB,OAHAA,EAAYC,KAAK,YACjBD,EAAYC,KAAKF,EAAMG,SAAW,SAAW,IAC7CF,EAAYC,KAAKF,EAAMI,UAAY,cAAgB,IAE/C,qBAAKC,UAAWJ,EAAYK,KAAK,KAAMC,QAAS,kBAAMP,EAAMQ,aAA5D,SACI,+BAAOR,EAAMS,UAKnBC,EAAc,SAACV,GAIjB,OACI,qBAAKK,UAAW,CACZ,WACAL,EAAMG,SAAW,GAAK,UAAUG,KAAK,KAFzC,SAIKN,EAAMW,QAKJC,EA/FI,SAACZ,GAA4B,IAAD,EACXa,mBAASb,EAAMc,UADJ,mBACpCA,EADoC,KAC1BC,EAD0B,KAsC3C,OAJAC,qBAAU,WACND,EAAYf,EAAMc,YACnB,CAACd,EAAMc,WAGN,sBAAKG,GAAIjB,EAAMkB,UAAf,UACI,qBAAKb,UAAU,WAAf,SAGQL,EAAMmB,YAAYC,KAAI,SAACC,EAAKC,GACxB,OAAO,cAAC,EAAD,CACSb,KAAMY,EAAIZ,KAAMN,SAAUmB,GAASR,EAAUV,UAAWiB,EAAIE,QACxEf,UAAW,kBAvCZ,SAACc,QACSE,IAAzBxB,EAAMyB,eACNzB,EAAMyB,eAAeH,GAErBP,EAAYO,GAmCqBG,CAAeH,KAD3BA,QAMrB,qBAAKjB,UAAU,YAAf,SAGQL,EAAMmB,YAAYC,KAAI,SAACC,EAAKC,GACxB,OAAO,cAAC,EAAD,CAAyBX,KAAMU,EAAIV,KAAMR,SAAUmB,GAASR,GAA1CQ,Y,eDtEpCI,G,MAAqB,CAC9B,SAAK,UAAM,SAAK,UAAM,SAAK,SAAK,UAAM,SAAK,UAAM,SAAK,UAAM,WAEnDC,EAAsB,CAC/B,SAAK,UAAM,SAAK,UAAM,SAAK,SAAK,UAAM,SAAK,UAAM,SAAK,UAAM,UAGnDC,EAAkB,CAC3B,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAEnDC,EAAmB,CAC5B,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAEnDC,EAAyB,CAClC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAEnDC,EAAyB,CAClC,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAE9DC,EAAa,CACtB,QAAS,SAEAC,EAAa,CACtB,MAAO,MAAO,MAAO,MAAO,S,SAGpBpC,K,gBAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,mBAAAA,M,cAaAC,K,UAAAA,E,aAAAA,M,KAKL,IAmBKoC,EAgBAC,EAnCCC,EAAoC,CAC7C,SAAK,aACL,UAAM,WACN,UAAM,WACN,SAAK,aACL,SAAK,UACL,UAAM,WACN,cAAU,gBAGDC,EAA4C,CACrD,UAAM,WACN,cAAU,eACV,UAAM,YACN,UAAM,WACN,UAAM,WACN,UAAM,YACN,UAAM,a,SAEEH,O,iBAAAA,I,iBAAAA,I,eAAAA,I,aAAAA,I,aAAAA,I,eAAAA,I,qBAAAA,I,eAAAA,I,2BAAAA,I,eAAAA,I,4BAAAA,I,0BAAAA,I,iCAAAA,M,cAgBAC,O,iBAAAA,I,yBAAAA,I,yBAAAA,I,kBAAAA,M,KA+BL,IE/DKG,EAsBAC,EA8BAC,EAWAC,EAkBAC,EAoBAC,EAsDAC,EAWAC,EAgBAC,EAcAC,EFrICC,EAAqC,CAC9C,CAAEC,IAAKf,EAAUgB,MAAOC,SAAUhB,EAAWiB,MAAO3C,KAAM,GAAI,OAAU,CAAC,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,IAChH,CAAEwC,IAAKf,EAAUmB,MAAOF,SAAUhB,EAAWiB,MAAO3C,KAAM,IAAK,OAAU,CAAC,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,IACjH,CAAEwC,IAAKf,EAAUoB,KAAMH,SAAUhB,EAAWiB,MAAO3C,KAAM,OAAQ,OAAU,CAAC,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,IACnH,CAAEwC,IAAKf,EAAUqB,IAAKJ,SAAUhB,EAAWiB,MAAO3C,KAAM,MAAO,OAAU,CAAC,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,IACjH,CAAEwC,IAAKf,EAAUsB,IAAKL,SAAUhB,EAAWiB,MAAO3C,KAAM,MAAO,OAAU,CAAC,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,IACjH,CAAEwC,IAAKf,EAAUuB,KAAMN,SAAUhB,EAAWuB,UAAWjD,KAAM,OAAQ,OAAU,CAAC,KAAM,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,EAAG,KAChI,CAAEwC,IAAKf,EAAUyB,QAASR,SAAUhB,EAAWuB,UAAWjD,KAAM,IAAK,OAAU,CAAC,KAAM,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,EAAG,KAChI,CAAEwC,IAAKf,EAAU0B,KAAMT,SAAUhB,EAAWuB,UAAWjD,KAAM,KAAM,OAAU,CAAC,KAAM,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,EAAG,KAC9H,CAAEwC,IAAKf,EAAU2B,WAAYV,SAAUhB,EAAWuB,UAAWjD,KAAM,QAAS,OAAU,CAAC,KAAM,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,EAAG,KACvI,CAAEwC,IAAKf,EAAU4B,KAAMX,SAAUhB,EAAW4B,UAAWtD,KAAM,OAAQ,OAAU,CAAC,KAAM,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,EAAG,IAChI,CAAEwC,IAAKf,EAAU8B,WAAYb,SAAUhB,EAAW4B,UAAWtD,KAAM,QAAS,OAAU,CAAC,KAAM,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,EAAG,IACvI,CAAEwC,IAAKf,EAAU+B,UAAWd,SAAUhB,EAAW+B,MAAOzD,KAAM,OAAQ,OAAU,CAAC,KAAM,KAAM,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1I,CAAEwC,IAAKf,EAAUiC,aAAchB,SAAUhB,EAAWiB,MAAO3C,KAAM,QAAS,OAAU,CAAC,KAAM,KAAM,MAAO,UAAa,CAAC,EAAG,EAAG,KAsCnH2D,GA7BCjC,EAAWiB,MACblB,EAAUgB,MACVhB,EAAUmB,MACVnB,EAAUoB,KACVpB,EAAUqB,IACVrB,EAAUsB,IACVtB,EAAUiC,aAIRhC,EAAWuB,UACbxB,EAAUuB,KACVvB,EAAUyB,QACVzB,EAAU2B,WAIR1B,EAAW4B,UACb7B,EAAU4B,KACV5B,EAAU8B,WAUgC,CAClD,CAAEK,YAAa,EAAGC,UAAWpC,EAAUgB,MAAOqB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUmB,MAAOkB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUmB,MAAOkB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUgB,MAAOqB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUgB,MAAOqB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUmB,MAAOkB,QAAQ,GACtD,CAAEF,YAAa,GAAIC,UAAWpC,EAAUiC,aAAcI,QAAQ,KAGrDC,EAAyC,CAClD,CAAEH,YAAa,EAAGC,UAAWpC,EAAUmB,MAAOkB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUiC,aAAcI,QAAQ,GAC7D,CAAEF,YAAa,EAAGC,UAAWpC,EAAUgB,MAAOqB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUmB,MAAOkB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUmB,MAAOkB,QAAQ,GACtD,CAAEF,YAAa,EAAGC,UAAWpC,EAAUgB,MAAOqB,QAAQ,GACtD,CAAEF,YAAa,GAAIC,UAAWpC,EAAUgB,MAAOqB,QAAQ,I,kBEnI/CjC,O,eAAAA,I,+BAAAA,I,iCAAAA,I,qCAAAA,I,mCAAAA,I,+BAAAA,I,qCAAAA,I,oCAAAA,M,cAsBAC,O,eAAAA,I,mBAAAA,I,qBAAAA,I,wBAAAA,M,cA8BAC,K,YAAAA,E,eAAAA,M,cAWAC,K,cAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,aAAAA,M,cAkBAC,K,cAAAA,E,iBAAAA,M,cAoBAC,O,mBAAAA,I,qBAAAA,I,sBAAAA,M,cAsDAC,K,oBAAAA,E,cAAAA,E,aAAAA,M,cAWAC,K,qBAAAA,E,oBAAAA,E,oBAAAA,E,WAAAA,M,cAgBAC,K,YAAAA,E,YAAAA,E,qBAAAA,M,cAcAC,K,YAAAA,E,kBAAAA,E,cAAAA,E,gBAAAA,E,eAAAA,M,KAwBL,ICvQK0B,EDuQCC,EAAsB,CAC/BC,MAAO,CACHC,SAAS,EACT3D,IAAK,EACLR,KAAM,IAEVoE,cAAe,EACfC,SAAU,CAAEC,UAAW,GAAIC,UAAWtC,EAAWuC,MAAOC,SAAU,IAClEC,UAAW,CACPC,YAAa,EACbC,UAAW,GACXC,eAAgB,EAChBC,SAAU5C,EAAS6C,OACnBC,aAAc,GACdC,eAAgB,EAChBC,cAAerD,EAAcsD,KAC7BC,kBAAmB,CACfC,YAAY,EACZC,aAAcxD,EAAiByD,KAG/BC,SAAU,CAACC,UAAW,EAAG3B,QAAQ,GACjC4B,YAAa,KACb7B,UAAWtB,EAAmB,GAAGC,IACjCmD,QAAS,EACTC,WAAY,EACZC,WAAY,GAEhBC,oBAAqB,KAWrBC,eAAgB,IAEpBC,QAAS,GACTC,QAKO,IAAIC,IAAQ,CACf,GAAM,+DACN,GAAM,+DACN,MAAO,+DACP,GAAM,+DACN,GAAM,+DACN,GAAM,iEACPC,gBAXHC,aAAc,IAAIC,MAAM,M,SClThBrC,O,yBAAAA,I,qCAAAA,I,6BAAAA,I,uCAAAA,I,mCAAAA,I,+CAAAA,I,2CAAAA,I,iDAAAA,I,6CAAAA,I,2BAAAA,I,4CAAAA,I,wDAAAA,I,4DAAAA,I,4DAAAA,I,oCAAAA,I,gDAAAA,I,kCAAAA,I,kCAAAA,I,oCAAAA,I,gDAAAA,I,wCAAAA,I,mDAAAA,M,KAyBL,IAAMsC,EAAU,SAACC,EAAcC,GAClC,IAAMC,EAAmBD,EAAOC,KAC1BC,EAAeF,EAAOE,QAC5B,OAAQD,GACJ,KAAKzC,EAAW2C,UACZ,OAAO,2BAAKJ,GAAZ,IAAmBrC,MAAOwC,EAAQxC,QACtC,KAAKF,EAAW4C,gBACZ,OAAO,2BAAKL,GAAZ,IAAmBnC,cAAesC,EAAQ7F,QAC9C,KAAKmD,EAAW6C,YACZ,IAAMpC,EAAW8B,EAAMlC,SAASI,SAASqC,QACnCC,EAAS,CACfA,UAAmB,WAKnB,OAJAtC,EAASuC,OAAON,EAAQ7F,MAAQ,EAAG,EAAG,CAClC4F,KAAMnE,EAAgB2E,QACtBF,OAAQA,IAEL,2BACAR,GADP,IACclC,SAAS,2BACZkC,EAAMlC,UADK,IACKI,SAAUA,MAIzC,KAAKT,EAAWkD,iBACZ,IAAMH,EAASR,EAAMlC,SAASI,SAASiC,EAAQS,KAAKJ,OAMpD,OALsB,MAAnBA,EAAOvB,SACNuB,EAAOvB,SAAW,CAACC,UAAWiB,EAAQ9C,YAAaE,QAAQ,GAE3DiD,EAAOvB,SAASC,UAAYiB,EAAQ9C,YAEjC,2BACA2C,GADP,IACclC,SAAS,2BACZkC,EAAMlC,UADK,IACKI,SAAU8B,EAAMlC,SAASI,aAIxD,KAAKT,EAAWoD,eAGZ,OAFeb,EAAMlC,SAASI,SAASiC,EAAQS,KAAKJ,OAC7ClD,UAAY6C,EAAQ7C,UACpB,2BACA0C,GADP,IACclC,SAAS,2BACZkC,EAAMlC,UADK,IACKI,SAAU8B,EAAMlC,SAASI,aAIxD,KAAKT,EAAWqD,sBAEZ,OAAO,2BACAd,GADP,IACclC,SAAS,2BACZkC,EAAMlC,UADK,IACKI,SAAU,CACzB,CACIgC,KAAMnE,EAAgBgF,KACtBP,OAAQ,CACJQ,MAAO,GACPC,MAAO,MACPC,SAAU,EACVC,MAAO,UAGf,CACIjB,KAAMnE,EAAgBqF,MACtBZ,OAAQ,CACJa,MAAO,UAGf,CACInB,KAAMnE,EAAgB2E,QACtBF,OAAQ,CACJc,UAAW,YAGnB,CACIpB,KAAMnE,EAAgBqF,MACtBZ,OAAQ,CACJa,MAAO,WAKvBlD,UAAU,2BACH6B,EAAM7B,WADJ,IACeE,UAAW,CAAC,GAAkB,GAAkB,GAAkB,QAIlG,KAAKZ,EAAW8D,oBACZ,OAAO,2BACAvB,GADP,IACc7B,UAAU,2BACb6B,EAAM7B,WADM,IACKC,WAAY+B,EAAQ7F,UAIpD,KAAKmD,EAAW+D,mBACZ,OAAO,2BACAxB,GADP,IACcP,QAAQ,2BAAMO,EAAMP,SAAb,IAAsBgC,YAAatB,EAAQuB,WAGpE,KAAKjE,EAAWkE,yBACZ,OAAO,2BACA3B,GADP,IACcP,QAAQ,2BAAMO,EAAMP,SAAb,IAAsBmC,aAAczB,EAAQuB,WAGrE,KAAKjE,EAAWoE,2BACZ,OAAO,2BACA7B,GADP,IACcP,QAAQ,2BAAMO,EAAMP,SAAb,IAAsBqC,eAAgB3B,EAAQuB,WAGvE,KAAKjE,EAAWsE,2BACZ,OAAO,2BACA/B,GADP,IACcP,QAAQ,2BAAMO,EAAMP,SAAb,IAAsBuC,eAAgB7B,EAAQuB,WAGvE,KAAKjE,EAAWwE,eACZ,OAAO,2BACAjC,GADP,IACc7B,UAAU,2BACb6B,EAAM7B,WADM,IACKQ,cAAewB,EAAQH,UAIvD,KAAKvC,EAAWyE,qBACZ,OAAO,2BACAlC,GADP,IACc7B,UAAU,2BACb6B,EAAM7B,WADM,IACKU,kBAAmBsB,EAAQgC,WAI3D,KAAK1E,EAAW2E,qBACZ,IAAMlE,EAAW8B,EAAMlC,SAASI,SAASqC,QAGzC,OAFarC,EAASiC,EAAQS,KACzBJ,OAASL,EAAQgC,OACf,2BACAnC,GADP,IACclC,SAAS,2BACZkC,EAAMlC,UADK,IACKI,SAAUA,MAIzC,KAAKT,EAAW4E,WACZ,OAAO,2BACArC,GADP,IACcP,QAASU,EAAQV,UAGnC,KAAKhC,EAAW6E,cACZ,OAAO,2BACAtC,GADP,IACclC,SAAUqC,EAAQoC,OAGpC,KAAK9E,EAAW+E,cACZ,OAAO,2BACAxC,GADP,IACclC,SAAS,2BAAMkC,EAAMlC,UAAb,IAAuBI,SAAUiC,EAAQjC,aAGnE,KAAKT,EAAWgF,eACZ,OAAO,2BACAzC,GADP,IACc7B,UAAWgC,EAAQhC,YAGrC,KAAKV,EAAWiF,mBAGZ,OAFc1C,EAAM7B,UAAUE,UAAU8B,EAAQS,KAC1Cc,OAASvB,EAAQuB,OAChB,2BACA1B,GADP,IACc7B,UAAU,2BACb6B,EAAM7B,WADM,IACKE,UAAW2B,EAAM7B,UAAUE,cAI3D,KAAKZ,EAAWkF,qBACZ,OAAO,2BACA3C,GADP,IACc7B,UAAU,2BACb6B,EAAM7B,WADM,IACKoB,oBAAqBY,EAAQZ,wBAI7D,KAAK9B,EAAWmF,iBACZ,IAAMC,EAAc7C,EAAM7B,UAAUoB,oBAE9BuD,EAAc3C,EAAQ2C,YAwB5B,OAAO,2BACA9C,GADP,IACc7B,UAAU,2BACb6B,EAAM7B,WADM,IACKoB,oBAAoB,2BACjCsD,GADgC,IAEnCC,oBAMhB,KAAKrF,EAAWsF,sBACZ,IAAMF,EAAc7C,EAAM7B,UAAUoB,oBAC9ByD,EAAoB7C,EAAQ6C,UAC5BC,EAAmB9C,EAAQ8C,SAC3BC,EAAuB/C,EAAQ+C,aAC/BC,EAAmBhD,EAAQgD,SAC3BC,EAASP,EAAYQ,OAG3B,OAFAD,EAAOJ,GAAWM,MAAMJ,GAAcD,GAAUE,GAAYhD,EAAQoD,MAE7D,2BACAvD,GADP,IACc7B,UAAU,2BACb6B,EAAM7B,WADM,IACKoB,oBAAoB,2BACjCsD,GADgC,IACnBQ,OAAQD,UCvPzC,SAASI,EAAgBvH,GAC5B,IAAIwH,EAAS,KAMb,OALAzH,EAAmB0H,SAAQ,SAACnB,GACpBA,EAAKtG,KAAOA,IACZwH,EAASlB,MAGVkB,EAGJ,I,MAAME,EAAoB,SAACC,GAC9B,IAAIC,EAAM,GAKV,OAJa,GAATD,IACeC,EAAXD,EAAQ,EAAS,IAAMA,EAChBA,EAAME,YAEdD,GAIEE,EAAe,SAACC,EAA4B9C,GACrD,IAAIzH,EAAO,KACK,MAAZuK,IAEAvK,GADauK,EAASzG,OAAS3C,EAAkBC,IACpCmJ,EAAS9E,UAAYgC,GAAY,KAElD,OAAOzH,GA0BEwK,EAAwB,SAACC,EAAgCC,GAClE,OAAOC,MAAMC,+BAAmBH,EAbE,SAACC,GACnC,MAAO,CACHG,KAAM,OACNC,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAET,SAMvBU,CAAuBV,KAIlBW,EAAe,SAACrB,EAAsBsB,EAAsBC,GAGrE,IAAIC,EAAcD,EAAeD,EAC7BE,EAAc,IACdA,GAAe,IAEnB,IAAMC,EAA2B,GAC3BC,EAAwB,GAC1BC,GAAU,EACd3B,EAAO4B,UAAU3B,SAAQ,SAAC4B,EAAKC,GACvBA,EAAI9B,EAAO4B,UAAUG,UAGhBJ,GAAWH,EAAcK,IAC1BJ,EAAehM,KAAK+L,GACpBE,EAAYjM,KAAK,OACjBkM,GAAU,GAEVH,GAAeK,IACfJ,EAAehM,KAAKoM,GACpBH,EAAYjM,KAAKuK,EAAOgC,OAAOF,SAItCH,IACDF,EAAehM,KAAK+L,GACpBE,EAAYjM,KAAK,QAErBuK,EAAO4B,UAAYH,EACnBzB,EAAOgC,OAASN,GC0JdO,EAAgB,SAAC1B,GACnB,IAAIvK,EAAO,KACK,MAAZuK,IAEAvK,GADauK,EAASzG,OAAS7C,EAAqBC,GACxCqJ,EAAS9E,YAEzB,OAAOzF,GAGIkM,EAnPY,SAAC3M,GAAoC,IAAD,EAE7B4M,qBAAWC,IAAjC7F,EAFmD,EAEnDA,MAAO8F,EAF4C,EAE5CA,WAET9H,EAAYgC,EAAMlC,SAASE,UAC3B+H,EAAQ/F,EAAM7B,UAAUE,UAAUrF,EAAMsB,OAE9C,OAAQtB,EAAMgN,YAAY9F,MACtB,KAAKnE,EAAgBqF,MACjB,IAAMZ,EAASxH,EAAMgN,YAAYxF,OACjC,OACI,+BAAOA,EAAOa,QAGtB,KAAKtF,EAAgBgF,KACjB,IAAMP,EAASxH,EAAMgN,YAAYxF,OAC3ByF,EAA6B,GAgCnC,OA/BAA,EAAY/M,KACR,gCACI,2CACA,+BAAOsH,EAAOQ,UAFRiF,EAAYT,SAK1BS,EAAY/M,KACR,gCACI,0CACA,+BAAOsH,EAAOS,UAFRgF,EAAYT,SAKtBxH,GAAatC,EAAWuC,QACxBgI,EAAY/M,KACR,gCACI,2CACA,+BAAOsH,EAAOW,UAFR8E,EAAYT,SAK1BS,EAAY/M,KACR,gCACI,yCAEA,+BACIsH,EAAOW,OAASnG,EAAW,GACvBF,EAAuB0F,EAAOU,UAC9BnG,EAAuByF,EAAOU,cANhC+E,EAAYT,UAY1B,8BACKS,IAIb,KAAKlK,EAAgBmK,MACjB,IAAM1F,EAASxH,EAAMgN,YAAYxF,OAE3B2F,EAAgBT,EAAclF,EAAOvB,UACrCmH,EAAgBV,EAAclF,EAAOrB,aACrCkH,EAAetC,EAAavD,EAAOvB,SAAU8G,EAAMO,KAAKpF,UACxDqF,EAAexC,EAAavD,EAAOrB,YAAa4G,EAAMO,KAAKpF,UAC7DsF,EAAa,GACbC,GAAa,EACbC,EAAa,QACbC,EAAY,IAChB,GAAqB,MAAjBR,EACAK,ED5Ca,SAAClJ,GAC1B,IAAI7D,EAAO,GAMX,OALAuC,EAAmB0H,SAAQ,SAACD,GACpBA,EAAOxH,KAAOqB,IACd7D,EAAOgK,EAAOhK,SAGfA,ECqCkBmN,CAAcpG,EAAOlD,WAElCmJ,GAD8C,SAApBV,EAAMO,KAAKnF,MAAmB/F,EAAoCC,GAC7DwL,SAASV,EAAgBK,GACxDE,EAAU,UAAMP,GAAN,OAAsBK,GAAtB,OAAoD,MAAjBJ,EAAwB,GAAK,IAAMA,GAChFO,EAAS,UAAMN,GAAN,OAAqBG,GAArB,OAAkD,MAAhBD,EAAuB,GAAK,IAAMA,GAGjF,IADA,IAAMO,EAAa,GACVvB,EAAI,EAAGA,EAAI/E,EAAOpB,QAASmG,IAChCuB,EAAW5N,KAAK,wBAAWqM,IAE/B,IAAMwB,EAAWhB,EAAMiB,SAASD,SAC1BE,EAAclB,EAAMiB,SAASC,YAC7BC,EAAWC,KAAKC,MAAMrB,EAAMiB,SAASE,SAAW,IAAO,IAAM,GAE7DG,EAAavB,EAAWwB,QAAQC,cAAc/G,EAAO8G,SAC3D,OACI,qCACI,qBAAKjO,UACD,UACsB,MAAnBmH,EAAOvB,SAAmB,SAAW,KACrCwH,EAAa,YAAc,KAE3BzG,EAAMlC,SAASE,WAAatC,EAAW8L,OAAS,WAAa,IALpE,SAOI,+BAAOd,MAEX,qBAAKrN,UAAW2G,EAAMlC,SAASE,WAAatC,EAAW8L,OAAS,SAAW,QAA3E,SACI,+BAAOb,MAEX,qBAAKtN,UAAU,UAAf,SACKyN,IAEL,sBAAKzN,UAAU,mBAAf,UACI,sBAAMA,UAAU,MAAhB,UAAoC,GAAb0N,EAAiBA,EAAW,KACnD,sBAAM1N,UAAU,OAAhB,UAAwC,GAAhB4N,EAAoBA,EAAc,QAE9D,qBAAK5N,UAAU,gBAAf,SACI,iCAAO6N,EAAP,SAEJ,qBACI7N,UACI,kBACe,GAAdgO,EAAkB,UAAY,IAHvC,SAMI,2CAAcA,UAK9B,KAAKtL,EAAgB2E,QACjB,IAAMF,EAASxH,EAAMgN,YAAYxF,OACjC,OACI,qCACI,qBAAKnH,UAAU,OAAf,SAAsB,+BAAOmH,EAAOc,cACpC,qBAAKjI,UAAU,cAI3B,KAAK0C,EAAgB0L,OACjB,IAAMjH,EAASxH,EAAMgN,YAAYxF,OAC3BkH,EAAY1H,EAAM7B,UAAUE,UAAUrF,EAAMsB,MAAQ,GACtDqN,EAAiB,6BACrB,OAAQnH,EAAOoH,YACX,KAAK,KACDD,EACI,qCACI,qBAAKtO,UAAU,QAAf,SACI,gDAEJ,sBAAKA,UAAU,SAAf,UACI,uCADJ,UAMR,MACJ,KAAKuC,EAAWiM,SACZ,IAAMC,EAAuC,OAA5BtH,EAAOuH,iBAA4B,OAASvH,EAAOuH,iBAAiBjE,WAC/EkE,EAAaxH,EAAOuH,mBAAqBlM,EAAiBoM,UAAYzH,EAAOuH,mBAAqBlM,EAAiBqM,IACrHtE,EAAQ,EACNuE,EAAcT,EAAUpB,KAAKpF,SAC7BkH,EAAqC,SAAxBV,EAAUpB,KAAKnF,MAC5BkH,EAActC,EAAMO,KAAKpF,SACzBoH,EAAiC,SAApBvC,EAAMO,KAAKnF,MAC9B,OAAQX,EAAOuH,kBACX,KAAKlM,EAAiBoM,SAClBrE,EAAQpD,EAAO+H,eAEf,MACJ,KAAK1M,EAAiBqM,IAClBtE,EAAQpD,EAAOgI,UAEf,MACJ,KAAK3M,EAAiB4M,SACtB,KAAK5M,EAAiB6M,UAE1B,IAAMC,GAAeP,EAAsCrN,EAAzBD,GAAiDqN,GAC7ES,GAAeN,EAAsCvN,EAAzBD,GAAiDuN,GACnFV,EACI,qCACI,sBAAKtO,UAAU,QAAf,UACI,+BAAOyO,GAAYE,EAAa,KAAO,MACtCA,EAAc,+BAAOpE,IAAiB,gCAE3C,qBAAKvK,UAAU,SAAf,SACI,iCAAOsP,EAAP,WAAsBC,UAKlC,MACJ,KAAKhN,EAAWiN,MACZ,IAAMf,EAAoC,OAAzBtH,EAAOsI,cAAyB,OAAStI,EAAOsI,cAAchF,WAC3EF,EAAQ,EACNmF,GAAWrB,EAAUpB,KAAKtF,MAC1BgI,GAAWjD,EAAMO,KAAKtF,MAC5B,OAAQR,EAAOsI,eACX,KAAKhN,EAAcmN,KACfrF,EAAQpD,EAAO0I,UAEf,MACJ,KAAKpN,EAAcqN,KACfvF,EAAQpD,EAAO4I,UAEf,MACJ,KAAKtN,EAAcuN,SACfzF,EAAQpD,EAAO8I,cAIvB3B,EACI,qCACI,sBAAKtO,UAAU,QAAf,UACI,+BAAOyO,EAAW,OAClB,+BAAOlE,OAEX,qBAAKvK,UAAU,SAAf,SACI,yCAAU0P,GAAV,mBAAwBC,WAKpC,MACJ,KAAKpN,EAAW2N,KACZ5B,EACI,6BAQZ,OAFiBjM,EAAWuC,MAGxB,qCACI,qBAAK5E,UAAU,cAAf,SAEI,+BAA6B,OAAtBmH,EAAOoH,WAAsB,SAAWpH,EAAOoH,WAAW9D,eAEpE6D,OC6BN6B,I,MAxPM,SAACxQ,GAA8B,IAAD,EACP4M,qBAAWC,IAA3C7F,EADuC,EACvCA,MAAOyJ,EADgC,EAChCA,SAAU3D,EADsB,EACtBA,WAEnB4D,EAAW1Q,EAAMsB,MAAQ0F,EAAMlC,SAASI,SAASsH,OAEjDmE,EAAMC,iBAAO,IAOnB,GANA5P,qBAAU,WACF0P,GACAD,EAAShM,EAAWiF,mBAAoB,CAAE9B,IAAK5H,EAAMsB,MAAOoH,OAAQiI,EAAIE,YAE7E,CAAC7J,EAAMlC,SAASI,YAEdwL,EACD,OAAQ,6BAGZ,IAAMxJ,EAAOlH,EAAMgN,YAAY9F,KACzB3B,EAAWyB,EAAM7B,UAAUI,SAC3BP,EAAYgC,EAAMlC,SAASE,UAE3B+H,EAAQ/F,EAAM7B,UAAUE,UAAUrF,EAAMsB,OAYxC8D,EAAa4B,EAAM7B,UAAUC,WAC7B0L,EAAa1L,GAAcpF,EAAMsB,MACjCyP,EAAa/J,EAAM7B,UAAUG,eAAiBtF,EAAMsB,MAiGpD0P,EAA2B,WACAhK,EAAMlC,SAASI,SAASlF,EAAMsB,OAC/C4F,MAAQnE,EAAgBqF,OAChCqI,EAAShM,EAAW8D,oBAAqB,CAAEjH,MAAOtB,EAAMsB,SAmB5D2P,EAA2B,6BA6B/B,OA5BIjR,EAAMsB,OAAS0F,EAAMlC,SAASI,SAASsH,OAAS,IAChDyE,EACI,qBACI5Q,UACI,YACCkF,GAAY5C,EAAS6C,OAAS,GAAK,YAExCjF,QAAS,WACLkQ,EAAShM,EAAW8D,oBAAqB,CAAEjH,MAAOtB,EAAMsB,QACxDwL,EAAWoE,MAAMC,kBACjBV,EAAShM,EAAW8D,oBAAqB,CAAEjH,MAAOtB,EAAMsB,MAAQ,IAChEmP,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAc8O,gBAC3DX,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAnC,EAAM7B,UAAUU,mBADjB,IAEFC,YAAY,EACZI,UAAW,EACX3B,QAAQ,EACRD,UAAWtB,EAAmB,GAAGC,IACjCmD,QAAS,OAjBzB,SAqBI,wCAMR,sBAAK/F,UAAU,MAAf,UACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,SAAf,SA5Ga,WACrB,IAAIgR,EAA4B,GAEhC,GAAI,CAACtO,EAAgBmK,MAAOnK,EAAgB2E,QAAS3E,EAAgB0L,QAAQZ,SAAS3G,GAAO,CAEzF,GAAInE,EAAgBmK,OAAShG,EAAM,CAE/BmK,EAAWnR,KACP,qBAA6BG,UAAU,WAAvC,SACI,+BAAO0M,EAAMiB,SAASsD,MADhBD,EAAW7E,SAIzB,IAAM+E,EAA8B,SAApBxE,EAAMO,KAAKnF,MAErBqJ,GADYD,EAAUzP,EAAyBC,GAC3BgL,EAAMO,KAAKpF,UAEjClD,IAActC,EAAWuC,OACzBoM,EAAWnR,KACP,qBACIG,UAAW,CACP,QACAkR,EAAU,MAAQ,OACpBjR,KAAK,KAJX,SAKI,qCAAQkR,EAAR,QALMH,EAAW7E,SAUjC6E,EAAWnR,KAIP,qBAEIG,UACI,OACCkF,GAAY5C,EAAS6C,OAAS,GAAK,WAExCjF,QAAS,WACLuM,EAAWoE,MAAMO,cAAczR,EAAMsB,QAP7C,SAUI,yCATK+P,EAAW7E,SAa5B,OAAQ,mCACH6E,IA8DQK,KAEL,qBACIrR,UAAW,CACP,eAxKK,WACrB,OAAQ6G,GACJ,KAAKnE,EAAgBqF,MAAO,MAAO,eACnC,KAAKrF,EAAgBgF,KAAM,MAAO,cAClC,KAAKhF,EAAgBmK,MAAO,MAAO,eACnC,KAAKnK,EAAgB2E,QAAS,MAAO,iBACrC,KAAK3E,EAAgB0L,OAAQ,MAAO,iBAmKxBkD,GACAb,EAAa,SAAW,GACxBC,EAAa,WAAa,GAC1B,CACIhO,EAAgBgF,KAChBhF,EAAgB2E,QAChB3E,EAAgBmK,MAChBnK,EAAgB0L,QAClBZ,SAAS3G,GAAQ,aAAe,GAhK7B,WACrB,IAAMhC,EAAW8B,EAAMlC,SAASI,SAC1B0M,EAAoB,CAAC1M,EAASsH,QAChCqF,GAAS,EACTC,GAAY,EAQhB,OAPA5M,EAASwF,SAAQ,SAACqH,EAAIxF,GACdwF,EAAG7K,MAAQnE,EAAgB2E,SAASmK,IACxCD,EAAQrF,GAAKsF,EACTzM,GAAcmH,IAAGuF,EAAWD,MAGfD,EAAQ5R,EAAMsB,QAAUwQ,GAAY5K,GAAQnE,EAAgBqF,MAsJjE4J,GAAqB,UAAY,GA7I7CzM,GAAY5C,EAASsP,QAAgB,GAErC/K,GAAQnE,EAAgBmK,OAEoB,MAD7BlN,EAAMgN,YAAYxF,OACDvB,SAExBe,EAAM7B,UAAUM,aAAaoI,SAAS7N,EAAMsB,OACrC,gBAEJ,WAKJ,eAiIGhB,KAAK,KACPC,QAAS,WACDgF,GAAY5C,EAAS6C,QACrBwL,IACAP,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAlEhD,WAC/B,IAAMH,EAAeuB,EAAM7B,UAAUM,aAChCA,EAAaoI,SAAS7N,EAAMsB,OAG7BmE,EAAayM,MAAK,SAAC5Q,EAAOiL,GAClBjL,GAAStB,EAAMsB,OAAOmE,EAAagC,OAAO8E,EAAG,MAHrD9G,EAAavF,KAAKF,EAAMsB,OAM5BwL,EAAWoE,MAAMiB,gBAAgB1M,GA2Db2M,IAGRC,cAAe,SAACC,GACZ,GAAI/M,GAAY5C,EAAS6C,OAGrB,OAFAwL,IAC6BhK,EAAMlC,SAASI,SAASlF,EAAMsB,OAC3C4F,MACZ,KAAKnE,EAAgBgF,KAEb0I,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAciQ,eAE/D,MACJ,KAAKxP,EAAgB2E,QACrB,KAAK3E,EAAgBmK,MACrB,KAAKnK,EAAgB0L,OAEbzH,EAAMP,QAAQgC,YAAY+J,MAAMC,KAAOH,EAAEI,QAAU,KACnD1L,EAAMP,QAAQgC,YAAY+J,MAAMG,IAAML,EAAEM,QAAU,KAClDnC,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcuQ,iBAM/ElC,IAAKA,EA7CT,SA+CI,cAAC,EAAD,CACIrP,MAAOtB,EAAMsB,MACb0L,YAAahN,EAAMgN,mBAK9BiE,OCtOE6B,GArBQ,SAAC9S,GAAgC,IAAD,EACvB4M,qBAAWC,IAA/B7F,EAD2C,EAC3CA,MAD2C,EACpCyJ,SAaf,OACI,qBAAKpQ,UAZS,WACd,IAAM6E,EAAW8B,EAAMlC,SAASI,SAC1BE,EAAa4B,EAAM7B,UAAUC,WAC/ByM,GAAS,EACTC,GAAY,EAKhB,OAJA5M,EAASwF,SAAQ,SAACqH,EAAIxF,GACdwF,EAAG7K,MAAQnE,EAAgB2E,SAASmK,IACpCzM,GAAcmH,IAAGuF,EAAWD,MAE7BC,GAAY9R,EAAMsB,MAGTyR,GAAc,SAAW,GAAzC,SACI,+BAAO/S,EAAMqI,WCwInB2K,I,MAAa,SAAChT,GAEhB,OACI,sBAAKK,UAAWL,EAAMuB,QAAU,UAAY,GACxChB,QAAS,WACLP,EAAMiT,YAFd,UAKI,sBAAM5S,UAAWL,EAAMkT,SAAvB,SAAkClT,EAAMqI,QACxC,sBAAMhI,UAAU,MAAhB,oBAA2BL,EAAMmT,QAAjC,gBAKGC,GAvKS,WAAO,IAAD,EAEcxG,qBAAWC,IAA3C7F,EAFkB,EAElBA,MAAOyJ,EAFW,EAEXA,SAAU3D,EAFC,EAEDA,WAGnBuG,EAAQ,kBAAM5C,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAGzE+K,EAAMC,iBAAO,IACnB5P,qBAAU,WAENyP,EAAShM,EAAW+D,mBAAoB,CAAEE,OAAQiI,EAAIE,YACvD,IAEH,IAAMyC,EAAmC,GACzC,GAAItM,EAAM7B,UAAUQ,eAAiBrD,EAAcuQ,aAAc,CAC7D,IAAMU,EAAavM,EAAMlC,SAASI,SAAS8B,EAAM7B,UAAUC,YAyC3D,OAxCAkO,EAAcpT,KAAK,CACfgT,SAAU,QAAS7K,MAAO,eAAgB8K,QAAS,IAAK5R,SAAS,EACjE0R,SAAU,WACNnG,EAAWoE,MAAMC,kBACjBkC,OAGRC,EAAcpT,KAAK,CACfgT,SAAU,OAAQ7K,MAAO,eAAgB8K,QAAS,IAAK5R,SAAS,EAChE0R,SAAU,WACNnG,EAAWoE,MAAMC,kBACjBV,EAAShM,EAAW8D,oBAAqB,CAAEjH,MAAO0F,EAAM7B,UAAUC,WAAa,IAC/EqL,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAc8O,gBAC5CmC,EAAW/L,OAC1BiJ,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAnC,EAAM7B,UAAUU,mBADjB,IAEFC,YAAY,EACZG,SAAU,CAACC,UAAW,EAAG3B,QAAQ,GACjC4B,YAAa,KACb7B,UAAWtB,EAAmB,GAAGC,IACjCmD,QAASY,EAAM7B,UAAUO,sBAKzC4N,EAAcpT,KAAK,CACfgT,SAAU,QAAS7K,MAAO,iBAAkB8K,QAAS,IAAK5R,SAAS,EACnE0R,SAAU,WACNnG,EAAWoE,MAAMsC,oBACjBH,OAGRC,EAAcpT,KAAK,CACfgT,SAAU,QAAS7K,MAAO,gBAAiB8K,QAAS,IAAK5R,SAAS,EAClE0R,SAAU,WACNnG,EAAWoE,MAAMuC,mBACjBJ,OAGAE,EAAWrM,MACf,KAAKnE,EAAgBmK,MACjB,IAAM1F,EAAS+L,EAAW/L,OAC1B8L,EAAcpT,KAAK,CACfgT,SAAU,QAAS7K,MAAO,YAAa8K,QAAS,IAAK5R,QAA4B,MAAnBiG,EAAOvB,SACrEgN,SAAU,WACN,IAAMnO,EAAWkC,EAAMlC,SACjB0C,EAAS1C,EAASI,SAAS8B,EAAM7B,UAAUC,YAAYoC,OAC7DA,EAAOvB,SAAW,KAClBuB,EAAOrB,YAAc,KACrB2G,EAAWoE,MAAMwC,YAAY5O,GAE7BuO,OAGRC,EAAcpT,KAAK,CACfgT,SAAU,OAAQ7K,MAAO,aAAc8K,QAAS,IAAK5R,SAAS,EAC9D0R,SAAU,WACNnG,EAAWoE,MAAMyC,uBAGzBL,EAAcpT,KAAK,CACfgT,SAAU,OAAQ7K,MAAO,eAAgB8K,QAAS,IAAK5R,QAA4B,MAAnBiG,EAAOvB,SACvEgN,SAAU,WACNnG,EAAWoE,MAAM0C,uBAGzBN,EAAcpT,KAAK,CACfgT,SAAU,QAAS7K,MAAO,eAAgB8K,QAAS,IAAK5R,QAA4B,MAAnBiG,EAAOvB,SACxEgN,SAAU,WACNnG,EAAWoE,MAAM2C,cACjBpD,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,UAInE,MACJ,KAAK7C,EAAgB2E,QACjB4L,EAAcpT,KAAK,CACfgT,SAAU,OAAQ7K,MAAO,eAAgB8K,QAAS,IAAK5R,SAAS,EAChE0R,SAAU,WACNnG,EAAWoE,MAAM4C,uBAIzB,MACJ,KAAK/Q,EAAgB0L,OACjB6E,EAAcpT,KAAK,CACfgT,SAAU,OAAQ7K,MAAO,cAAe8K,QAAS,IAAK5R,SAAS,EAC/D0R,SAAU,WACNnG,EAAWoE,MAAM6C,sBAMjCT,EAAcpT,KAAK,CACfgT,SAAU,QAAS7K,MAAO,SAAU8K,QAAS,MAAO5R,SAAS,EAC7D0R,SAAU,WACNnG,EAAWoE,MAAM8C,mBACjBvD,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,UAIvE,IAAMqO,EAA0B,GAYhC,OAXAX,EAAc5I,SAAQ,SAACnB,EAAMgD,GACzB0H,EAAS/T,KAAK,cAAC,GAAD,CAEVgT,SAAU3J,EAAK2J,SACf7K,MAAOkB,EAAKlB,MACZ8K,QAAS5J,EAAK4J,QACd5R,QAASgI,EAAKhI,QACd0R,SAAU1J,EAAK0J,UALV1G,OAUT,qBACIoE,IAAKA,EACL1P,GAAG,mBACHZ,UAAW,YAAc2G,EAAM7B,UAAUQ,eAAiBrD,EAAcuQ,aAAe,UAAY,IACnGtS,QAAS,aAJb,SAQK0T,KCqREC,I,MA/ZO,WAAO,IAAD,EAEgBtH,qBAAWC,IAA3C7F,EAFgB,EAEhBA,MAAOyJ,EAFS,EAETA,SAAU3D,EAFD,EAECA,WAQnB6D,EAAMC,iBAAuB,MAC7BuD,EAAYvD,iBAA0B,MAEtC/G,EAAc7C,EAAM7B,UAAUU,kBAC9BT,EAAa4B,EAAM7B,UAAUC,WAE7B2H,GADc/F,EAAMlC,SAASI,SAASE,GAAYoC,OAC1CR,EAAM7B,UAAUE,UAAUD,IACxCpE,qBAAU,WAENyP,EAAShM,EAAWkE,yBAA0B,CAAED,OAAQiI,EAAIE,UAC5D,IAAMuD,EAAcD,EAAUtD,QAC9BuD,EAAOC,MAAQ,IACfD,EAAOE,OAAS,KACjB,IAEHtT,qBAAU,WACFgG,EAAM7B,UAAUQ,eAAiBrD,EAAc8O,eAC/CmD,EACI1K,EAAY5D,SAASC,UACM,MAA3B2D,EAAY1D,aAAuB,EAAI0D,EAAY1D,YAAYD,UAC/D2D,EAAYvF,aAGrB,CAACuF,EAAa7C,EAAM7B,UAAUQ,gBAEjC,IAAM4O,EAAkB,SAACxI,EAAsBC,EAAsB1H,GACjE,IAAMkQ,EAAOL,EAAUtD,QAA8B4D,WAAW,MAE1DvM,GAAY6E,EAAMO,KAAKpF,SAAW6D,GAAgB,GAElD2I,EADgBlK,EAAgBlG,GAA4B+H,UACxCjL,KAAI,SAACwJ,GAAD,OAAW1C,EAAW0C,KAChD+J,GAAY,GACK,GAAjB3I,IACA2I,EAAW5H,EAAMO,KAAKpF,SAAW8D,GAErCwI,EAAII,UAAY,OAChBJ,EAAIK,SAAS,EAAG,EAAG,IAAK,IAexB,IAdA,IAAMC,EAAQ,GAMVC,EAAO,EACLC,EAMA,GACGzI,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAI0I,EAAQ,OACRZ,EAAQS,EACRR,EAhBO,GAiBLY,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,IAAIrH,SAAStB,EAAI,IAc9C,OAbI2I,IACAD,EAAQ,OACRZ,EAAQS,GACRR,EAASa,IAETT,EAAK7G,SAAStB,KACd0I,EAAQ,QAERN,GAAYpI,IACZ0I,EAAQ,WAEZD,EAAY9U,KAAK,CAAE6U,KAAM,GAAKA,EAAMH,UAAWK,EAAOZ,QAAOC,SAAQY,YAE7D3I,EAAI,IACR,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAEjCwI,GAAQD,KACR,MACJ,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,KAAK,GAEjCC,GAAQD,IACR,MACJ,QAEIC,GAAQD,IAGpBE,EAAYtK,SAAQ,SAAC0K,GACZA,EAAQF,UACTV,EAAII,UAAYQ,EAAQR,UACxBJ,EAAIK,SAASO,EAAQL,KAAM,EAAGK,EAAQf,MAAOe,EAAQd,YAG7DU,EAAYtK,SAAQ,SAAC0K,GACbA,EAAQF,UACRV,EAAII,UAAYQ,EAAQR,UACxBJ,EAAIK,SAASO,EAAQL,KAAM,EAAGK,EAAQf,MAAOe,EAAQd,QACrDE,EAAII,UAAY,OAChBJ,EAAIa,WAAWD,EAAQL,KAAM,EAAGK,EAAQf,MAAOe,EAAQd,YAG/DE,EAAIc,QAGFC,EAA2B,GAC3BC,EAA4B,GAC5BC,EAA0B,GAC5BC,EAA4B,6BAC1BC,EAAW3O,EAAMlC,SAASE,WAAatC,EAAW8L,OACxD,GAAIxH,EAAM7B,UAAUQ,eAAiBrD,EAAc8O,cAAe,CAE9DzP,EAAoB+I,SAAQ,SAACkL,EAAMrJ,GAC/B,IACMrE,GADU6E,EAAMO,KAAKpF,SACCqE,GAAK,GAC3BsJ,EAAOnU,EAAmB6K,GAC1BuJ,EAAOjU,EAAiBqG,GACxB6N,EAAOnU,EAAgBsG,GACvB8N,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAAInI,SAAStB,GACnCuE,EAAajH,EAAY5D,SAASC,WAAaqG,EAC/C0J,GAA4C,MAA3BpM,EAAY1D,aAAuB,EAAI0D,EAAY1D,YAAYD,YAAcqG,EAC9F2J,EAAgB,SAAC3R,GACnB,OACIyC,EAAMlC,SAASE,WAAatC,EAAWuC,MACnC,qCACI,sBAAM5E,UAAU,SAAhB,SAA0BkE,EAASsR,EAAOD,IAC1C,yCACA,sBAAMvV,UAAU,QAAhB,SAAyBkE,EAASwR,EAAOD,IACzC,wCAGJ,mCACI,sBAAMzV,UAAU,SAAhB,SAA0BkE,EAASwR,EAAOD,OAI1DP,EAAUrV,KACN,8BACK8V,EAwCG,qCACI,qBACI3V,UAAW,CACP,OACCyQ,IAAejH,EAAY5D,SAAS1B,OAAS,UAAY,GACzD0R,GAA4C,MAA3BpM,EAAY1D,cAAwB0D,EAAY1D,YAAY5B,OAAS,eAAiB,IAC1GjE,KAAK,KACPC,QAAS,WAEL,IAAM4F,GAAgB8P,GAA4C,MAA3BpM,EAAY1D,aAAwB0D,EAAY1D,YAAY5B,OAC7FsF,EAAY1D,YAAc,KAChCsK,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IAEF9D,aAAcxD,EAAiByD,KAAMC,SAAU,CAAEC,UAAWqG,EAAGhI,QAAQ,GAAS4B,mBAS5FkM,cAAe,WACX,IAAIvB,GAAejH,EAAY5D,SAAS1B,OAAxC,CACA,IAAM4B,GACA8P,GAA4C,MAA3BpM,EAAY1D,aAAwB0D,EAAY1D,YAAY5B,OACzE,CAAE2B,UAAWqG,EAAGhI,QAAQ,GAAU,KAC5CkM,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IAEF9D,aAAcxD,EAAiByD,KAAMG,oBA9BrD,SAwCK+P,GAAc,KAEnB,qBACI7V,UAAW,CACP,OACCyQ,GAAcjH,EAAY5D,SAAS1B,OAAS,UAAY,GACxD0R,GAA4C,MAA3BpM,EAAY1D,aAAuB0D,EAAY1D,YAAY5B,OAAS,eAAiB,IACzGjE,KAAK,KACPC,QAAS,WAEL,IAAM4F,EAAgB8P,GAA4C,MAA3BpM,EAAY1D,aAAuB0D,EAAY1D,YAAY5B,OAClE,KAA1BsF,EAAY1D,YAClBsK,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IAEF9D,aAAcxD,EAAiByD,KAAMC,SAAU,CAAEC,UAAWqG,EAAGhI,QAAQ,GAAQ4B,mBAS3FkM,cAAe,WACX,IAAIvB,IAAcjH,EAAY5D,SAAS1B,OAAvC,CACA,IAAM4B,EACA8P,GAA4C,MAA3BpM,EAAY1D,aAAuB0D,EAAY1D,YAAY5B,OACvC,KAAjC,CAAE2B,UAAWqG,EAAGhI,QAAQ,GAClCkM,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IAEF9D,aAAcxD,EAAiByD,KAAMG,oBA9BrD,SAwCK+P,GAAc,QA1HvB,qBACI7V,UAAW,CACPyQ,EAAa,SAAW,GACxBmF,EAAgB,cAAgB,IAClC3V,KAAK,KACPC,QAAS,WAEL,IAAM4F,EAAe8P,EAA0C,KAA1BpM,EAAY1D,YACjDsK,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IAEF9D,aAAcxD,EAAiByD,KAAMC,SAAU,CAAEC,UAAWqG,EAAGhI,QAAQ,GAAS4B,mBAS5FkM,cAAe,WACX,IAAIvB,EAAJ,CACA,IAAM3K,EAAgB8P,EAAkD,KAAlC,CAAE/P,UAAWqG,EAAGhI,QAAQ,GAC9DkM,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IAEF9D,aAAcxD,EAAiByD,KAAMG,oBA1BrD,SAoCK+P,GAAc,MAtCjB3J,OAmIlBvJ,EAAmB0H,SAAQ,SAACD,EAAQ8B,GAEhCiJ,EAAWtV,KACP,qBAEIG,UAAWoK,EAAOxH,KAAO4G,EAAYvF,UAAY,SAAW,GAC5D/D,QAAS,WACLkQ,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IAEF9D,aAAcxD,EAAiB4T,OAAQ7R,UAAWmG,EAAOxH,SAPzE,SAiBI,qCAAQwH,EAAOhK,KAAf,QAhBK8L,OAsBjB,IAxL8D,eAwLrDA,GACLkJ,EAASvV,KACL,qBAEIG,UAAWwJ,EAAYzD,SAAWmG,EAAI,EAAI,SAAW,GACrDhM,QAAS,WACLkQ,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAU,GADD,IACc9D,aAAcxD,EAAiB6T,QAAShQ,QAASmG,EAAI,QAL5EA,KAHRA,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAgBTmJ,EAAgB,qCACZ,qBACInV,QAAS,WACLkQ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAFnE,SAII,4CAEJ,qBACIrF,QAAS,WACLuM,EAAWuJ,MAAMC,oBAFzB,SAII,8CAIZ,IAAMC,EAAkB,SAACrP,EAAiBsP,GAAiC,IAAD,EACvB,KAARtP,EACnC,CAAC,IAAK,OAAQ2C,EAAYxD,YAAcmQ,EACpC,kBAAM/F,EAAShM,EAAWyE,qBAAsB,CAC5CC,OAAO,2BACAU,GADD,IACcxD,WAAYmQ,QAGxC,CAAC,IAAK,OAAQ3M,EAAYvD,YAAckQ,EACpC,kBAAM/F,EAAShM,EAAWyE,qBAAsB,CAC5CC,OAAO,2BACAU,GADD,IACcvD,WAAYkQ,QAX0B,mBACjEnO,EADiE,KAC1DoO,EAD0D,KACrDtW,EADqD,KAC3CuW,EAD2C,KAiBtE,OAHIF,GAAU,IACVnO,GAAUmO,EAAS,EAAI,IAAM,QAG7B,qBACInW,UAAW,CACPoW,EACAtW,EAAW,SAAW,IACxBG,KAAK,KACPC,QAASmW,EALb,SAOI,+BAAOrO,EAAQmO,OAI3B,OACI,sBACI7F,IAAKA,EACL1P,GAAG,gBACHZ,UAAW,YAAc2G,EAAM7B,UAAUQ,eAAiBrD,EAAc8O,cAAgB,UAAY,IACpG7Q,QAAS,aAJb,UAOI,cAAC,EAAD,CAAYW,UAAU,gBAClBC,YAAa,CACT,CACIV,KAAM,QAASc,QAASoU,EAAUhV,KAC9B,8BAIR,CACIF,KAAM,SAAUc,SAAS,EAAOZ,KAC5B,qCACI,qBAAKN,UAAW,kBAAoBwJ,EAAY9D,cAAgBxD,EAAiByD,KAAO,UAAY,IAApG,SACKuP,IAEL,qBAAKlV,UAAW,mBAAqBwJ,EAAY9D,cAAgBxD,EAAiB4T,OAAS,UAAY,IAAvG,SACKX,SAMrB1U,SAAU,IAEd,qBAAKT,UAAW,aAAhB,SACI,wBAAQsQ,IAAKwD,MAEjB,qBAAK9T,UAAW,iBAAmBwJ,EAAY9D,cAAgBxD,EAAiB6T,QAAU,UAAY,IAAtG,SACKX,IAEL,sBAAKpV,UAAW,YAAcwJ,EAAY9D,cAAgBxD,EAAiBoU,SAAW,UAAY,IAAlG,UACKJ,EAAgB,KAAM,IACtBA,EAAgB,KAAM,KACtBA,EAAgB,IAAK,GACrBA,EAAgB,IAAK,KACrBA,EAAgB,IAAK,IACrBA,EAAgB,KAAM,IACtBA,EAAgB,KAAM,KACtBA,EAAgB,IAAK,GACrBA,EAAgB,IAAK,KACrBA,EAAgB,IAAK,OAE1B,qBAAKlW,UAAU,YAAf,SACKqV,SCzRFkB,I,MA7HY,WAAO,IAAD,EAEDhK,qBAAWC,IAA/B7F,EAFqB,EAErBA,MACF5B,GAHuB,EAEdqL,SACIzJ,EAAM7B,UAAUC,YACnC,IAAmB,GAAfA,EAAkB,OAAQ,6BAE9B,IAAMmE,EAAOvC,EAAMlC,SAASI,SAASE,GAC/B2H,EAAQ/F,EAAM7B,UAAUE,UAAUD,GAEpCyR,EAAqB,6BACzB,OAAQtN,EAAKrC,MACT,KAAKnE,EAAgBmK,MACjB,IAAM1F,EAAS+B,EAAK/B,OAChBsP,EAAO,IACX,GAAuB,MAAnBtP,EAAOvB,SAAkB,CACzB,IAAMC,EAAYsB,EAAOvB,SAASC,UAC5B6Q,EAAapV,EAAoBuE,GACjC8Q,EAAYnV,EAAiBqE,GACnC4Q,EAAI,UAAMC,EAAN,aAAqBC,EAArB,KAER,IAC6B,EADzBxJ,EAAa,IACjB,GAAuB,MAAnBhG,EAAOvB,SACPuH,EAAU,qBAAOhD,EAAgBhD,EAAOlD,kBAA9B,aAAO,EAAmC7D,KAA1C,KAGd,IAAMwW,EAAeC,GAAe,OAAQ,CACxC,CAAEC,MAAO,QAASvM,MAAO,GAAKmC,EAAMO,KAAKtF,MAAOzG,SAAS,GACzD,CAAE4V,MAAO,OAAQvM,MAAOmC,EAAMO,KAAKrF,MAAO1G,SAAS,GACnD,CAAE4V,MAAO,MAAOvM,MAAO/I,EAAiBkL,EAAMO,KAAKpF,UAAW3G,SAAS,GACvE,CAAE4V,MAAO,QAASvM,MAAOmC,EAAMO,KAAKnF,MAAO5G,SAAS,KAGlD6V,EAAgBF,GAAe,QAAS,CAC1C,CAAEC,MAAO,OAAQvM,MAAOkM,EAAMvV,QAAiB,KAARuV,GACvC,CAAEK,MAAO,SAAUvM,MAAO4C,EAAYjM,QAAuB,KAAdiM,GAC/C,CAAE2J,MAAO,WAAYvM,MAAO,IAAKrJ,SAAS,GAC1C,CAAE4V,MAAO,UAAWvM,MAAOyM,OAAO7P,EAAOpB,SAAU7E,SAAS,GAC5D,CAAE4V,MAAO,WAAYvM,MAAOD,EAAkBnD,EAAOnB,YAAa9E,QAA8B,GAArBiG,EAAOnB,YAClF,CAAE8Q,MAAO,WAAYvM,MAAOD,EAAkBnD,EAAOlB,YAAa/E,QAA8B,GAArBiG,EAAOlB,cAGtFuQ,EACI,qBACIxW,UACI,QAFR,SAKI,gCACK4W,EACAG,EACC,WAEE,GAAuB,MAAnB5P,EAAOvB,SAAkB,CAKzB,IAJA,IAAMqR,EAA4B,GAC5B7M,EAASD,EAAgBhD,EAAOlD,WAChCoQ,EAAI,OAAGjK,QAAH,IAAGA,OAAH,EAAGA,EAAQ4B,UACfkL,EAAG,OAAG7C,QAAH,IAAGA,OAAH,EAAGA,EAAMlI,OACTD,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIA,EAAIgL,EAAK,CACT,IAAMC,EAAQ,OAAG/M,QAAH,IAAGA,OAAH,EAAGA,EAAQ4B,UAAUE,GAC7BE,EAAM,OAAGhC,QAAH,IAAGA,OAAH,EAAGA,EAAQgC,OAAOF,GACxBkL,EAAQ5V,GAAkB2F,EAAOvB,SAASC,UAAYsR,GAAY,IACxEF,EAAWpX,KACP,sBAAaG,UAAU,SAAvB,UACI,qBAAKA,UAAU,WAAf,SAA0B,+BAAOmX,MACjC,qBAAKnX,UAAU,SAAf,SAAwB,+BAAOoM,MAC/B,qBAAKpM,UAAU,QAAf,SAAuB,+BAAOoX,QAHxBlL,SAOd+K,EAAWpX,KACP,sBAAaG,UAAU,iBAAvB,UACI,qBAAKA,UAAU,aACf,qBAAKA,UAAU,WACf,qBAAKA,UAAU,YAHTkM,IAQtB,OAAQ,qCACJ,qBAAKlM,UAAU,QAAf,SACI,4CAEJ,qBAAKA,UAAU,gBAAf,SACKiX,OAIb,OAAQ,6BAtCV,QA4Cd,MACJ,KAAKvU,EAAgB2E,QACjB,IAAMF,EAAS+B,EAAK/B,OAEdkQ,EAAkBR,GAAe,UAAW,CAC9C,CAAEC,MAAO,QAASvM,MAAOpD,EAAOc,UAAW/G,SAAS,GACpD,CAAE4V,MAAO,YAAavM,MAAO,IAAKrJ,SAAS,GAC3C,CAAE4V,MAAO,YAAavM,MAAO,IAAKrJ,SAAS,GAC3C,CAAE4V,MAAO,aAAcvM,MAAO,IAAKrJ,SAAS,KAEhDsV,EACI,qBACIxW,UACI,QAFR,SAKI,8BACKqX,MAOrB,OACI,qBAAKzW,GAAG,iBAAR,SACK4V,MAQPK,GAAiB,SAACS,EAAoBC,GACxC,IAAMC,EAAyB,GAc/B,OAbAD,EAAelN,SAAQ,SAAC1D,EAAOuF,GAC3BsL,EAAQ3X,KACJ,sBAEIG,UACI,UACC2G,EAAMzF,QAAU,WAAa,IAJtC,UAMI,qBAAKlB,UAAU,QAAf,SAAuB,iCAAO2G,EAAMmQ,MAAb,SACvB,qBAAK9W,UAAU,QAAf,SAAuB,+BAAO2G,EAAM4D,YAN/B2B,OAUT,qCACJ,qBAAKlM,UAAU,QAAf,SACI,+BAAOsX,MAEX,qBAAKtX,UAAU,gBAAf,SACKwX,QC2EEC,I,MA7NU,SAAC9X,GAEtB,IAAM8M,EAAa9M,EAAM8M,WACnBiL,EAAe/X,EAAM+X,aACrB/N,EAAY+N,EAAa/N,UACzBgO,EAAgBD,EAAa1N,OAAOL,GACpCiO,EAAmBF,EAAaE,iBAChCC,EAAaF,EAAcG,KAAKF,GAChCG,EAAYJ,EAAcK,KAAKJ,GAE/BK,EAAoB,SAACC,GACvB,IAAMnO,EAAS2N,EAAa1N,OAC5BD,EAAOJ,GAAWmO,KAAKF,GAAoBM,EAC3CzL,EAAW0L,mBAAX,2BACOT,GADP,IAEI1N,OAAQD,MAGVqO,EAAgB,SAACC,GACnBR,EAAWX,IAAMmB,EACjBR,EAAWlC,QAAS,EACpBkC,EAAWS,QAAS,EACpBL,EAAkBJ,IAEhBU,EAAsB,SAACC,GACzB,IAAMzO,EAAS2N,EAAa1N,OACtByO,EAAS1O,EAAOJ,GAAWqO,KAAKJ,GACtC7N,EAAOJ,GAAWqO,KAAKJ,GAAoBa,EAASD,EACpD/L,EAAW0L,mBAAX,2BACOT,GADP,IAEI1N,OAAQD,MAIV2O,EAASb,EAAWX,IACpByB,EAAwB,CAC1B,CACI3Q,MAAO,KACPlI,SAAU4Y,GAAUtW,EAAiBwW,MACrC7Y,WAAW,EACXsW,SAAU,WAAQ+B,EAAchW,EAAiBwW,SAErD,CACI5Q,MAAO,IACPlI,SAAU4Y,GAAUtW,EAAiByW,KACrC9Y,WAAW,EACXsW,SAAU,WAAQ+B,EAAchW,EAAiByW,QAErD,CACI7Q,MAAO,IACPlI,SAAU4Y,GAAUtW,EAAiB0W,KACrC/Y,WAAW,EACXsW,SAAU,WAAQ+B,EAAchW,EAAiB0W,QAErD,CACI9Q,MAAO,IACPlI,SAAU4Y,GAAUtW,EAAiB2W,KACrChZ,WAAW,EACXsW,SAAU,WAAQ+B,EAAchW,EAAiB2W,QAErD,CACI/Q,MAAO,IACPlI,SAAU4Y,GAAUtW,EAAiB4W,KACrCjZ,WAAW,EACXsW,SAAU,WAAQ+B,EAAchW,EAAiB4W,QAErD,CACIhR,MAAO,IACPlI,SAAU+X,EAAWlC,OACrB5V,WAAY0M,EAAWwB,QAAQgL,eAC/B5C,SAAU,WACNwB,EAAWlC,QAAUkC,EAAWlC,OAChCkC,EAAWS,QAAS,EACpBL,EAAkBJ,KAG1B,CACI7P,MAAO,MACPlI,SAAU+X,EAAWS,OACrBvY,WAAY0M,EAAWwB,QAAQiL,eAC/B7C,SAAU,WACNwB,EAAWS,QAAUT,EAAWS,OAChCT,EAAWlC,QAAS,EACpBsC,EAAkBJ,KAG1B,CACI7P,MAAO,MACPlI,UAAU,EACVC,WAAW,EACXsW,SAAU,WACN5J,EAAWwB,QAAQkL,WAG3B,CACInR,MAAO,MACPlI,UAAU,EACVC,UAAW4X,EAAcG,KAAK3L,QAAU,EACxCkK,SAAU,WACN5J,EAAWwB,QAAQmL,WAG3B,CACIpR,MAAO,OACPlI,UAAU,EACVC,UAAWgY,GAAa,EACxB1B,SAAU,WACNkC,GAAqB,KAG7B,CACIvQ,MAAO,OACPlI,UAAU,EACVC,UAAWgY,GAAa,GACxB1B,SAAU,WACNkC,EAAoB,MA0C1Bc,EAA4B,GAgBlC,OAfAV,EAAQtO,SAAQ,SAACiP,EAAQpN,GACrBmN,EAAWxZ,KACP,wBAEIG,WACKsZ,EAAOxZ,SAAW,SAAW,KAC7BwZ,EAAOvZ,UAAY,WAAa,IAErCG,QAAS,kBAAMoZ,EAAOjD,YAN1B,SAQI,+BAAOiD,EAAOtR,SAPTkE,OAYT,qCACJ,wBACI3B,MAAOmN,EAAa6B,eACpBC,SAAU,SAACvH,GACP,IAAMhE,EAAUtO,EAAM+X,aAChB+B,EAAWC,SAASzH,EAAE0H,OAAOpP,OAC7BqP,EAAOH,EAAWxL,EAAQsL,eAC1BvP,EAASiE,EAAQjE,OACnB4P,EAAO,EACP5P,EAAOK,SAAQ,SAACwP,GACZ,IAAK,IAAI3N,EAAI,EAAGA,EAAI0N,EAAM1N,IAAK,CAE3B,IADA,IAAM4N,EAAsB,GACnBC,EAAI,EAAGA,EAAIF,EAAM/B,KAAK3L,OAAQ4N,IACnCD,EAAOja,KAAK,EAAC,IAEjBga,EAAM5P,MAAM7C,OAAO6G,EAAQsL,eAAgB,EAAGO,OAG/CF,EAAO,GACd5P,EAAOK,SAAQ,SAACwP,GACZA,EAAM5P,MAAM7C,OAAOqS,EAAU3L,KAAKkM,IAAIJ,OAG9C3L,EAAQsL,eAAiBE,EACzBhN,EAAWwB,QAAQgM,gBAAgBta,EAAM+X,eAvBjD,SAyBM,WAEE,IADA,IAAMrD,EAAsB,GACnBnI,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMgO,EAAMhO,EAAI,EACViO,EAAaD,EAAMxC,EAAa6B,eACtClF,EAAKxU,KACD,wBAEI0K,MAAO2P,EACPla,UAAWma,EAAa,MAAQ,GAHpC,SAKKD,GAJIhO,IAQjB,OAAOmI,EAfT,KAkBLgF,OC7HHe,GAAiB,SAACpQ,EAAwBqQ,EAAuBC,EAAmB1Q,EAAkBE,GACxG,IAAMmC,EAAMjC,EAAwB,GAAjBqQ,EAAqB,EAAI,GACtCE,EAAOvQ,EAAwB,GAAjBqQ,EAAqB,EAAI,GACzCra,EAAY,GAEhB,GAAIiM,EAAIhC,MAAMqQ,GAAW1Q,GAAUE,GAAW,CAC1C9J,EAAY,SACZ,IAAMwa,EAAeC,GAAaxO,EAAI6L,KAAMlO,EAAUE,GACtDyQ,EAAKzC,KAAKzN,SAAQ,SAACqQ,EAAaX,GAC5B,IAAK,IAAIY,EAAI,EAAGA,GAAKD,EAAYpC,OAAS,EAAI,GAAIqC,IAAK,CACnD,IAAMC,EAAYH,GAAaF,EAAKzC,KAAMiC,EAAGY,GACzCJ,EAAKtQ,MAAMqQ,GAAWP,GAAGY,KAExBE,GAAeL,EAAcI,IAAcC,GAAeD,EAAWJ,MAEtExa,EAAY,eAK5B,OAAOA,GASL6a,GAAiB,SAACC,EAAmBC,GACvC,OAAQD,EAAOE,KAAOF,EAAO9G,MAAQ+G,EAAOC,MAAQF,EAAOE,KAAOF,EAAO9G,OAAS+G,EAAOC,KAAOD,EAAO/G,OAC/F8G,EAAOE,KAAOD,EAAOC,KAAOD,EAAO/G,OAAS8G,EAAOE,MAAQD,EAAOC,MAUxEP,GAAe,SAAC3C,EAAoBlO,EAAkBE,GAExD,IADA,IAAIkR,EAAO,EACF9O,EAAI,EAAGA,EAAItC,EAAUsC,IAAK,CAC/B,IAAMgM,EAAUJ,EAAK5L,GACrB8O,GAAQC,GAAW/C,GAEvB,IAAMQ,EAASZ,EAAKlO,GAChBoK,EAAQiH,GAAWvC,GAMvB,OAJIA,EAAOJ,SACP0C,GAAQhH,EAAQ,EAAIlK,EACpBkK,GAAgB,GAEb,CAAEgH,OAAMhH,UAgBbiH,GAAa,SAAC/C,GAChB,IAAIgD,EAAO,EACX,OAAQhD,EAAQhB,KACZ,KAAK9U,EAAiB4W,KAAMkC,EAAO,GAAI,MACvC,KAAK9Y,EAAiB2W,KAAMmC,EAAO,EAAG,MACtC,KAAK9Y,EAAiB0W,KAAMoC,EAAO,EAAG,MACtC,KAAK9Y,EAAiByW,KAAMqC,EAAO,EAAG,MACtC,KAAK9Y,EAAiBwW,MAAOsC,EAAO,EAKxC,OAHIhD,EAAQvC,SACRuF,GAAQ,KAELA,GAGIC,GArLK,SAACxb,GAWjB,IAPA,IAAM+X,EAAe/X,EAAM+X,aAErBjL,GADc9M,EAAMyb,YACPzb,EAAM8M,YAEnB4O,EAAiC,GARM,WAWpCC,GAKL,IAJA,IAAMC,EAA0B,GAC1B1B,EAAQnC,EAAa1N,OAAOsR,GAC5BE,EAAa9D,EAAa/N,WAAa2R,EAdJ,WAgBhCpP,GACL,IAAMuP,EAA0B,GAChC5B,EAAM/B,KAAKzN,SAAQ,SAAC6N,EAAS6B,GACzB,IAAI2B,EAAU,GAEd,OAAQxD,EAAQhB,KACZ,KAAK9U,EAAiB0W,KAAM4C,GAAW,OAAgB,IAAK,MAC5D,KAAKtZ,EAAiByW,KAAM6C,GAAW,OAAgB,IAAK,MAC5D,KAAKtZ,EAAiBwW,MAAO8C,GAAW,QAAiB,KAAM,MAC/D,KAAKtZ,EAAiB2W,KAAM2C,GAAW,OAAgB,IAAK,MAC5D,KAAKtZ,EAAiB4W,KAAM0C,GAAW,OAAgB,IAEvDxD,EAAQvC,SACR+F,GAAW,SAKf,IAFA,IAAMC,EAAyB,GACzBC,EAAS1D,EAAQI,OAAS,EAAI,EAfL,WAgBtBqC,GACL,IAAMkB,EAAczB,GAAe1C,EAAa1N,OAAQsR,EAAGpP,EAAG6N,EAAGY,GAC/C,WAAfkB,IACY,EAEfF,EAAQ9b,KACJ,qBAEIG,UAAW,CACP6b,EACC3D,EAAQI,OAAS,OAAS,IAC7BrY,KAAK,KACPC,QAAS,WACLuM,EAAWwB,QAAQ6N,aAAa5P,EAAG6N,EAAGY,KANrCA,KAPRA,EAAI,EAAGA,EAAIiB,EAAQjB,IAAM,EAAzBA,GAkBTc,EAAS5b,KACL,qBAEIG,UAAW0b,EAFf,SAIKC,GAHI5B,OAOjBwB,EAAS1b,KACL,qBAAaG,UAAU,OAAvB,SACKyb,GADKvP,KA9CTA,EAAIwL,EAAa6B,eAAiB,EAAGrN,GAAK,EAAGA,IAAM,EAAnDA,GAmDTmP,EAAgBxb,KACZ,qBAEIG,UACIwb,EAAa,MAAQ,OAH7B,SAMKD,GALID,KA1DRA,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAqET,OACI,qBAAKtb,UAAU,SAAf,SACKqb,KCvBEU,GA9DM,SAACpc,GAElB,IAAMqc,EAAWrc,EAAMka,MACjBnC,EAAe/X,EAAM+X,aACrBuE,EAA6F,GAA5EvE,EAAa3R,QAAU2R,EAAa1R,WAAa0R,EAAazR,YAG/EiW,EAA8B,GAChCC,EAAgB,EACpBH,EAASlE,KAAKzN,SAAQ,SAAC6N,EAAShM,GAC5B,IAAIkQ,EAAM,EACV,OAAQlE,EAAQhB,KACZ,KAAK9U,EAAiB4W,KAAMoD,EAAM,GAAI,MACtC,KAAKha,EAAiB2W,KAAMqD,EAAM,EAAG,MACrC,KAAKha,EAAiB0W,KAAMsD,EAAM,EAAG,MACrC,KAAKha,EAAiByW,KAAMuD,EAAM,EAAG,MACrC,KAAKha,EAAiBwW,MAAOwD,EAAM,EAEnClE,EAAQvC,SACRyG,GAAO,KAEXD,GAAiBC,KAGrB,IAAMC,EAAUF,EAAgBF,EAChCE,EAAkBE,EAA0BF,EAAhBF,EAC5B,IA1B+C,eA0BtC/P,GACL,IAAM3E,EAAM2E,EAA+B,EAA1BwL,EAAa1R,WAa9BkW,EAAarc,KAAK,qBAAaG,UAXvBuH,EAAM,GAAK,EACPA,EAAM,GAAK,EACJ,OAEA,OAGJ,SAIa2E,KAdvBA,EAAI,EAAGA,EAAIiQ,EAAejQ,IAAM,EAAhCA,GAiBT,IAAMoQ,EAA4B,GAAhBL,EACZM,EAAYF,EAMb,qBAAKlK,MAAO,CACTC,KAAK,GAAD,OAAKkK,EAAL,MACJtI,MAAM,GAAD,OAAuC,IAAjCmI,EAAgBF,GAAtB,OACNjc,UAAU,SARZ,qBAAKmS,MAAO,CACTC,KAAK,GAAD,OAAKkK,EAAL,MACJtI,MAAO,OACRhU,UAAU,SAMjB,OACI,sBAAKA,UAAU,UAAf,UACKkc,EACAK,MCoJEC,GAlMM,SAAC7c,GAalB,IAXA,IAAM+X,EAAe/X,EAAM+X,aACrB/N,EAAY+N,EAAa/N,UACzBqS,EAAWtE,EAAa1N,OAAOL,GAC/B8C,EAAa9M,EAAM8M,WACnB2O,EAAczb,EAAMyb,YACpBqB,EAAgB9c,EAAM8c,cAGtBC,EAAgC,GAEhCC,EAAcjF,EAAa6B,eAAiB6B,EAAYjP,OAZf,WAatCD,GAEL,IAAM0Q,EAAW1Q,EAAIyQ,EAEfE,EAAUD,GAAY,EACxBE,EAAgB,IAChBD,IACAC,EAAgB1B,EAAYwB,GAAUE,eAE1CJ,EAAe7c,KACX,gCACI,qBACIG,UAAW,CACP,UACC6c,EAAoB,GAAV,SACb5c,KAAK,KACPC,QAAS,WACD2c,GACAJ,EAAcK,IAP1B,SAWI,+BAAOA,MAEX,qBACI9c,UAAW,CACP,MACqC,GAArCL,EAAM+X,aAAa6B,eAAsB,UAAY,IACvDtZ,KAAK,KACPC,QAAS,WACL,IAAM+N,EAAUtO,EAAM+X,aAChB1N,EAASiE,EAAQjE,OACjB/I,EAAQgN,EAAQsL,gBAAkBrN,EAAI,GAC5ClC,EAAOK,SAAQ,SAACwP,GACZA,EAAM5P,MAAM7C,OAAOnG,EAAO,MAE9BgN,EAAQsL,eAAiBtL,EAAQsL,eAAiB,EAClD9M,EAAWwB,QAAQgM,gBAAgBta,EAAM+X,eAbjD,SAgBI,uCAEJ,qBACI1X,UAAW,CACP,MACqC,IAArCL,EAAM+X,aAAa6B,eAAuB,UAAY,IACxDtZ,KAAK,KACPC,QAAS,WACL,IAAM+N,EAAUtO,EAAM+X,aAChB1N,EAASiE,EAAQjE,OACjB/I,EAAQgN,EAAQsL,gBAAkBrN,EAAI,GAC5ClC,EAAOK,SAAQ,SAACwP,GAEZ,IADA,IAAMC,EAAsB,GACnBC,EAAI,EAAGA,EAAIF,EAAM/B,KAAK3L,OAAQ4N,IACnCD,EAAOja,KAAK,EAAC,IAEjBga,EAAM5P,MAAM7C,OAAOnG,EAAO,EAAG6Y,MAEjC7L,EAAQsL,eAAiBtL,EAAQsL,eAAiB,EAClD9M,EAAWwB,QAAQgM,gBAAgBta,EAAM+X,eAjBjD,SAoBI,yCApDExL,KAVTA,EAAI,EAAGA,EAAIwL,EAAa6B,eAAgBrN,IAAM,EAA9CA,GAqET,IAAM4L,EAAsB,GACtBiF,EAA4B,GA2ClC,OA1CAf,EAASlE,KAAKzN,SAAQ,SAAC6N,EAAShM,GAC5B,IACIwP,EADehE,EAAaE,kBAAoB1L,EACzB,UAAY,GACnClE,EAAQ,GACZ,OAAQkQ,EAAQhB,KACZ,KAAK9U,EAAiB0W,KAAM4C,GAAW,OAAQ1T,EAAQ,IAAK,MAC5D,KAAK5F,EAAiByW,KAAM6C,GAAW,OAAQ1T,EAAQ,IAAK,MAC5D,KAAK5F,EAAiBwW,MAAO8C,GAAW,QAAS1T,EAAQ,KAAM,MAC/D,KAAK5F,EAAiB2W,KAAM2C,GAAW,OAAQ1T,EAAQ,IAAK,MAC5D,KAAK5F,EAAiB4W,KAAM0C,GAAW,OAAQ1T,EAAQ,IAEvDkQ,EAAQvC,SACR3N,GAAS,KACT0T,GAAW,SAEXxD,EAAQI,SACRtQ,GAAS,MAEb8P,EAAKjY,KACD,qBAEIG,UAAW0b,EACXxb,QAAS,WACLuM,EAAW0L,mBAAX,2BACOT,GADP,IAEIE,iBAAkB1L,MAN9B,SASI,+BAAOlE,KARFkE,IAWb,IAAM8Q,EAAShB,EAAShE,KAAK9L,GAC7B6Q,EAAWld,KACP,qBAEIG,UAAW0b,EAFf,SAII,qBAAKvJ,MAAO,CAAE8B,OAAkB,GAAT+I,EAAe,QAHjC9Q,OASb,sBAAKlM,UAAU,gBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,cAAC,GAAD,CACIyM,WAAYA,EACZiL,aAAcA,MAGtB,sBAAK1X,UAAU,QAAf,UACI,sBAAKA,UAAU,QAAf,UACI,wBACIA,UAC8B,GAA1B0X,EAAa/N,UAAiB,SAAW,GAE7CzJ,QAAS,WACLuM,EAAWwB,QAAQgP,cAAc,IALzC,SAQI,6CAEJ,wBACIjd,UAC8B,GAA1B0X,EAAa/N,UAAiB,SAAW,GAE7CzJ,QAAS,WACLuM,EAAWwB,QAAQgP,cAAc,IALzC,SAQI,gDAGR,qBAAKjd,UAAU,SAAf,SACK0c,IAEL,qBAAK1c,UAAU,QAAf,SACI,wBACIA,UACI0X,EAAawF,WAAa,SAAW,GAEzChd,QAAS,WACLuM,EAAWwB,QAAQkP,aAAazF,EAAawF,aALrD,SAQI,gDAIZ,sBAAKld,UAAU,OAAf,UACI,qBAAKA,UAAU,QAAf,SACK8X,IAEL,cAAC,GAAD,CACIJ,aAAcA,EACdmC,MAAOmC,IAEX,cAAC,GAAD,CACItE,aAAcA,EACd0D,YAAaA,EACb3O,WAAYA,IAEhB,qBAAKzM,UAAU,SAAf,SACK+c,W,kBC5MEK,KAAOC,IAAV,+LAOI,SAAC1d,GAAD,OAAWA,EAAM2d,mBAE1B,SAAC3d,GAAD,OAAWA,EAAM4d,WAClB,SAAC5d,GAAD,OAAWA,EAAM6d,UACb,SAAC7d,GAAD,OAAWA,EAAM8d,aAG3BC,aAAe,CACnBJ,gBAAiB,UACjBG,UAAW,UACXF,QAAS,IACTC,OAAQ,KAGSJ,KAAOC,IAAV,+CACH,SAAC1d,GAAD,OAAgCA,EAAMge,WAD9C,IAIMC,GAAQR,KAAOS,KAAV,0FAKD,SAACle,GAAD,OAAUA,EAAMme,YACpB,SAACne,GAAD,OAAUA,EAAMiV,SACV,SAACjV,GAAD,OAAUA,EAAMoe,cAEnCH,GAAMF,aAAe,CACjBI,SAAU,UACVlJ,MAAO,UACPmJ,WAAY,WCpCT,I,MAuIQC,GAvIa,SAACre,GAQzB,IAAM8J,EAAc9J,EAAM+X,aAAajO,YAEjCwU,EAA6B,GAKnCxU,EAAYyU,MAAK,SAACC,EAAGC,GACjB,OAAmB,GAAXD,EAAEE,OAAcF,EAAEG,aAA2B,GAAXF,EAAEC,OAAcD,EAAEE,gBAGhE,IADA,IAAMC,EAAkB9U,EAAYvC,MAAMvH,EAAM+X,aAAa6B,gBAX3D,WAYOrN,GAEL,IAAMhC,EAAQgC,EAAIvM,EAAM6e,QAAQrS,OAC1BsS,EAAsB,GAC5B,GAAIvU,EAAO,CACP,IAAMwU,EAAY/e,EAAM6e,QAAQtS,GAE1BjL,EADStB,EAAM6e,QAAQrS,OAASxM,EAAMyK,OAAO4B,UAAUG,QAAU,EAChDD,EAAI,EAAIA,EACzBiL,GAAqB,GAAVlW,GAAe,EAAItB,EAAMyK,OAAO4B,UAAU/K,GACrDwN,GAAqB,GAAVxN,EAAc,MAAQtB,EAAMyK,OAAOgC,OAAOnL,GAE3Dwd,EAAK5e,KACD,qBAAaG,UAAU,QAAvB,SACI,iCAAOyO,EAAP,IAAkB0I,EAAlB,MAA8B,cAACyG,GAAD,CAAOhJ,MAAM,OAAb,SAAqB8J,QAD7C,IAKd,IAbO,eAaE3E,GAEL,IAAM4E,EAAahf,EAAMqE,YAAcmT,EAAe,GAAJ4C,EAC5CsE,EAASvQ,KAAK8Q,MAAMD,EAAa,IACjC7B,EAAgB4B,EAAYL,EAC5BQ,EAASF,EAAa,GAAKA,GAAc,GAC3ClO,GAAa,EACjBhH,EAAYY,SAAQ,SAACyU,GACbA,EAAQT,QAAUtE,GAAK+E,EAAQR,aAAepS,IAC9CuE,GAAa,MAKrB,IAAM4L,EAAU5S,EAAY0C,QAAU,KAAOsE,EASzCsO,GAAgB,EACpBR,EAAgBlU,SAAQ,SAACyU,GACjBA,EAAQT,QAAUtE,GAAK+E,EAAQR,aAAepS,IAC9C6S,GAAgB,MAIxBN,EAAK5e,KACD,qBAEIG,UAAW,CACP,MACC6e,GAAUxC,EAAU,UAAY,GAChC5L,EAAa,SAAW,GACxBsO,EAAgB,OAAS,IAC5B9e,KAAK,KACPC,QAAS,WACL,IAAMmU,EAAO1U,EAAM+X,aAAajO,YAChC,GAAKgH,EAEE,CACH,IAAIlJ,GAAO,EACX8M,EAAKhK,SAAQ,SAACyU,EAAS7d,GACf6d,EAAQT,QAAUtE,GAAK+E,EAAQR,aAAepS,IAC9C3E,EAAMtG,MAGdoT,EAAKjN,OAAOG,EAAK,QARjB8M,EAAKxU,KAAK,CAAEwe,OAAQtE,EAAGuE,YAAapS,IAUxCmI,EAAK6J,MAAK,SAACC,EAAGC,GAGV,OAFwB,EAAXD,EAAEE,OAAaF,EAAEG,aACN,EAAXF,EAAEC,OAAaD,EAAEE,gBAGlC3e,EAAM+X,aAAajO,YAAc4K,EACjC1U,EAAMqf,eAAerf,EAAM+X,aAAajO,cAE5CuI,cAAe,WACXrS,EAAM8c,cAAcK,IA9B5B,SAiCI,+BAAQ+B,EAAyB,IAAhB/B,KAhCZ/C,EAAI,KAhCZA,EAAI,EAAGA,EAxBN,EAwBqBA,IAAM,EAA5BA,OAoEN,CAEH0E,EAAK5e,KACD,qBAAaG,UAAU,SAAb,IAEd,IAAK,IAAI+Z,EAAI,EAAGA,EAjGN,EAiGqBA,IAC3B0E,EAAK5e,KACD,qBAAiBG,UAAU,OAAjB+Z,EAAI,IAI1BkE,EAAYpe,KACR,qBAEIG,UACI,UACEkK,EAAqB,GAAb,YAJlB,SAOKuU,GANIvS,KAlGRA,EAAI,EAAGA,EARO,EAQaA,IAAM,EAAjCA,GA6GT,OACI,qBAAKlM,UAAU,eAAf,SACKie,KCpHAgB,GAAiBC,wBAAc,IAqJtCC,GAAiB,SAAC1V,EAA6BzF,EAAqBoG,EAAsBoU,GAK5F,IAHA,IAAMpD,EAA6B,GAF8F,WAKxHlP,GAEL,IAP6H,eAOpH6N,GAEL,IAAM4E,EAAa3a,EAAcoG,EAAO4B,UAAUE,GAAS,GAAJ6N,EACnDtJ,GAAa,EACjBhH,EAAYY,SAAQ,SAACyU,GACbA,EAAQT,QAAUtE,GAAK+E,EAAQR,aAAepS,IAC9CuE,GAAa,MAGrB,IAAM4N,EAASvQ,KAAK8Q,MAAMD,EAAa,IACjC7B,EAAgB0B,EAAQtS,GAAKmS,EAC/B5N,GACA2K,EAAYvb,KAAK,CAAE8e,aAAY7B,mBAZ9B/C,EAAI,EAAGA,EAHF,EAGiBA,IAAM,EAA5BA,IAFJ7N,EAAI,EAAGA,EAAI9B,EAAO4B,UAAUG,OAAQD,IAAM,EAA1CA,GAsBT,OAHAkP,EAAY8C,MAAK,SAACC,EAAGC,GACjB,OAAOA,EAAEO,WAAaR,EAAEQ,cAErBvD,GAGIgE,GAjLO,WAAO,IAAD,EAEgB7S,qBAAWC,IAA3C7F,EAFgB,EAEhBA,MAAOyJ,EAFS,EAETA,SAAU3D,EAFD,EAECA,WAKnB6D,EAAMC,iBAAO,IAanB,GAZA5P,qBAAU,WAENyP,EAAShM,EAAWsE,2BAA4B,CAAEL,OAAQiI,EAAIE,YAC/D,IASC7J,EAAM7B,UAAUQ,eAAiBrD,EAAcod,gBAC/C,OAAQ,6BAGZ,IAAM3H,EAAe/Q,EAAM7B,UAAUoB,oBAS/BN,EAAW8R,EAAa9R,SACxBE,EAAc4R,EAAa5R,YAC3BsE,EAAoB,eAASD,EAAgBuN,EAAazT,YAC1D8B,EAAU2R,EAAa3R,QACvBC,EAAa0R,EAAa1R,WAC1BC,EAAayR,EAAazR,WAG5BqH,EADS9L,EAAiBoE,EAASC,WAChBuE,EAAOhK,KACxBoe,EAAoB,GAEP,MAAf1Y,IAGAwH,GAAS,WAAQ5C,EAAa5E,EAAa,IAG3C2F,EAAarB,EAAQxE,EAASC,UAAWC,EAAYD,YAEzDuE,EAAO4B,UAAU3B,SAAQ,SAACE,GAEtBiU,EAAQ3e,KAAK2B,GAAkBoE,EAASC,UAAY0E,GAAS,QAGjE,IAAM6Q,EAAc+D,GAAezH,EAAajO,YAAa7D,EAASC,UAAWuE,EAAQoU,GAEnF/B,EAAgB,SAACK,GACnBnW,EAAMN,QAAQiZ,cAAcxC,EAAe,KAAM,KACjDyC,YAAW,WACP5Y,EAAMN,QAAQmZ,eAAe1C,KAC9B,MAGH2C,EAAyB,WA2B7B,OA1BAA,EAAa,qCACT,qBACIvf,QAAS,WACLkQ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAFnE,SAII,4CAEJ,qBACIvF,UAAW,CACP0X,EAAagI,UAAY,GAAK,WAChCzf,KAAK,KACPC,QAAS,WACLuM,EAAWwB,QAAQ0R,MAAK,IALhC,SAOI,0CAEJ,qBACI3f,UAAW,CACP0X,EAAagI,UAAY,GAAK,WAChCzf,KAAK,KACPC,QAAS,WACLuM,EAAWwB,QAAQ2R,uBAL3B,SAOI,+CAIJ,cAACX,GAAeY,SAAhB,CAAyBtV,MAAO,CAC5Bf,YAAakO,GADjB,SAKI,sBACIpH,IAAKA,EACL1P,GAAG,kBACHZ,UAAW,YAAc2G,EAAM7B,UAAUQ,eAAiBrD,EAAcod,gBAAkB,UAAY,IACtGnf,QAAS,aAJb,UAOI,sBAAKF,UAAU,YAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,QAAf,SAAuB,4CACvB,qBAAKA,UAAU,QAAf,SAAuB,+BAAOsN,SAElC,sBAAKtN,UAAU,SAAf,UACI,qBAAKA,UAAU,QAAf,SAAuB,+CACvB,qBAAKA,UAAU,QAAf,SAAuB,+BAAOoK,EAAOtH,gBAEzC,sBAAK9C,UAAU,SAAf,UACI,qBAAKA,UAAU,QAAf,SAAuB,6CACvB,qBAAKA,UAAU,QAAf,SAAuB,+BAAOwe,EAAQve,KAAK,aAE/C,sBAAKD,UAAU,SAAf,UACI,qBAAKA,UAAU,QAAf,SAAuB,8CACvB,qBAAKA,UAAU,QAAf,SAAuB,+BAAO+F,EAAUC,EAAaC,YAG7D,cAAC,GAAD,CACIyR,aAAcA,EACd8G,QAASA,EACTpU,OAAQA,EACRpG,YAAa4B,EAASC,UACtB4W,cAAeA,EACfuC,eAAgB,SAACvV,GAAD,OAAiCgD,EAAWuS,eAAevV,MAE/E,cAAC,GAAD,CACI2R,YAAaA,EACb1D,aAAcA,EACdjL,WAAYA,EACZgQ,cAAeA,IAGnB,qBAAKzc,UAAU,YAAf,SACKyf,UCtJfK,I,MAAc,KAoIdC,IAlIY3C,KAAOC,IAAV,qFAkIM,SAAC9S,GAClB,IAAIC,EAAM,GAKV,OAJa,GAATD,IACeC,EAAXD,EAAQ,EAAS,MACV,OAERC,IAGIwV,GApIW,WAAO,IAAD,EAEEzT,qBAAWC,IAAjC7F,EAFoB,EAEpBA,MACF9B,GAHsB,EAEb4H,WACE9F,EAAMlC,SAASI,UAC1BE,EAAa4B,EAAM7B,UAAUC,WAC7Bkb,EAAYtZ,EAAMlC,SAASI,SAASsH,OAGpC+T,EAAY3P,iBAAO,IARG,EAUY/P,mBAAS,IAVrB,mBAUrB2f,EAVqB,KAUPC,EAVO,OAWgB5f,mBAAS,IAXzB,mBAWrB6f,EAXqB,KAWLC,EAXK,OAYF9f,mBAAS,GAZP,mBAYrB+f,EAZqB,KAYdC,EAZc,KActBC,EAAc5b,EAASE,GAAY8B,MAAQnE,EAAgBmK,MAC5DhI,EAASE,GAAYoC,OAAyB,KAC7CpB,EAAyB,MAAf0a,EAAsB,EAAIA,EAAY1a,QAChDC,EAA4B,MAAfya,EAAsB,EAAIA,EAAYza,WACnDC,EAA4B,MAAfwa,EAAsB,EAAIA,EAAYxa,WAsFzD,GArFAtF,qBAAU,WACN,IAAI4f,EAAQ,EACNJ,EAA8B,GAC9BE,EAAgC,GACrB1Z,EAAMlC,SAASI,SAEvBwF,SAAQ,SAACnB,EAAMgD,GAYpB,GAVIhD,EAAKrC,MAAQnE,EAAgBgF,MAC7ByY,EAAatgB,KACT,qBAEIG,UAAW,GACTC,KAAK,KACPkS,MAAO,CAAE6B,MAAM,GAAD,OAAK8L,GAAL,QAHTK,EAAahU,SAO1BjD,EAAKrC,MAAQnE,EAAgBmK,MAAO,CACpC,IAAM1F,EAAS+B,EAAK/B,OACd+P,EAAM/P,EAAOpB,QAAUoB,EAAOnB,WAAamB,EAAOlB,WAClD+N,EAlDJ,GAkDYkD,EAAkB,EAC1BwJ,EAAQ3b,GAAcmH,EACtByU,EAAS5b,GAAcmH,EAAI,GAAKnH,GAAcmH,EAAI,EACxDiU,EAAatgB,KACT,sBAEIG,UAAW,CACP0gB,EAAQ,SAAW,GACnBC,EAAS,OAAS,IACpB1gB,KAAK,KACPkS,MAAO,CAAE6B,MAAM,GAAD,OAAKA,EAAQ,EAAb,OANlB,UAQI,qBAAKhU,UAAU,MAAf,SACI,+BAAOmH,EAAOpB,YAElB,sBAAK/F,UAAU,SAAf,UACI,sBAAMA,UAAW+f,GAAa5Y,EAAOnB,YAArC,SACKsE,EAAkBnD,EAAOnB,cAE9B,sBAAMhG,UAAW+f,GAAa5Y,EAAOlB,YAArC,SACKqE,EAAkBnD,EAAOlB,mBAf7Bka,EAAahU,SAoBtBuU,GACAR,EAAU1P,QAAQoQ,SAAS,CAAExO,KA5E/B,GA4EqCmO,EAAoBT,GAAae,SAAU,WAElFN,GAAe,EAANrJ,MAOjB,IAAK,IAAIhL,EAAI,EAAGA,EAAIqU,EAAOrU,IAAK,CAC5B,IAAI9L,EAAO,GAGLsN,EAAW,EAAKxB,EAAI,GAC1B,GAHcA,EAAI,IAAM,EAIpB9L,EAAO,eAEP,OAAQ8L,EAAI,GACR,KAAK,EAAG9L,EAAO,OAAQ,MACvB,KAAK,EAAGA,EAAO,OAAQ,MACvB,QAASA,EAAO,QAGxBigB,EAAexgB,KACX,qBAAiCG,UAAWI,EAAM+R,MAAO,CAAEC,KAAK,GAAD,OAAK0N,GApGlE,GAoGgF5T,EAAnB,OAA/D,SACIA,EAAI,IAAM,EACN,qBAAKlM,UAAU,MAAMmS,MAAO,CAAEC,KAAK,GAAD,QAAM,GAAN,MAAcE,IAAK,QAArD,SAAgE5E,IAEhE,8BAJE2S,EAAelU,SASjCiU,EAAgBD,GAChBG,EAAkBD,GAClBG,EAASD,KACV,CAACN,EAAWlb,EAAYgB,EAASC,EAAYC,IAE7B,MAAfwa,EACA,OAAQ,6BAGZ,IAAMK,EAAahB,IAtHL,GAsHuBS,EACrC,OACI,qBAAK3f,GAAG,gBAAgBZ,UAAU,eAAlC,SACI,sBAAKA,UAAU,SAASsQ,IAAK4P,EAA7B,UACI,qBAAKlgB,UAAU,SAASmS,MAAO,CAAE6B,MAAM,GAAD,OAAK8M,EAAL,OAAtC,SACKX,IAEL,qBAAKngB,UAAU,UAAUmS,MAAO,CAAE6B,MAAM,GAAD,OAAK8M,EAAL,OAAvC,SACKT,UChHNU,I,MAhBa,WAAO,IAAD,EAEAxU,qBAAWC,IAAjC7F,EAFsB,EAEtBA,MAFsB,EAEf8F,WACE9F,EAAMlC,SAASI,SACb8B,EAAM7B,UAAUC,WACjB4B,EAAMlC,SAASI,SAASsH,OAK1C,OACI,qBAAKvL,GAAG,kBAAkBZ,UAAU,mBCK7BghB,GAjBI,WAEf,OACI,qBAAKpgB,GAAG,eAAR,SACI,cAAC,EAAD,CAAYC,UAAU,aAClBC,YAAa,CACT,CAAEV,KAAM,WAAYc,SAAS,EAAOZ,KAAM,cAAC,GAAD,KAC1C,CAAEF,KAAM,SAAUc,SAAS,EAAMZ,KAAM,yBACvC,CAAEF,KAAM,WAAYc,SAAS,EAAOZ,KAAM,cAAC,GAAD,MAE9CG,SAAU,OCiHXwgB,I,MAxHI,WAAO,IAAD,EAEmB1U,qBAAWC,IAA3C7F,EAFa,EAEbA,MAAOyJ,EAFM,EAENA,SAAU3D,EAFJ,EAEIA,WAFJ,EAIKjM,mBAAS,IAJd,mBAIdmH,EAJc,KAIPuZ,EAJO,OAKK1gB,mBAAS,OALd,mBAKdoH,EALc,KAKPuZ,EALO,OAMM3gB,mBAAS,GANf,mBAMdqH,EANc,KAMJuZ,EANI,OAOK5gB,mBAAS,SAPd,mBAOdsH,EAPc,KAOPuZ,EAPO,KASf/Q,EAAMC,iBAAO,IACnB5P,qBAAU,WAENyP,EAAShM,EAAWkE,yBAA0B,CAAED,OAAQiI,EAAIE,YAC7D,IAEH,IAAIiP,EAAyB,WAC7BA,EAAa,qCACT,qBACIvf,QAAS,WACLkQ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAFnE,SAII,4CAEJ,qBACIrF,QAAS,WACLuM,EAAWQ,KAAKqU,aAAa3Z,EAAOC,EAAOC,EAAUC,IAF7D,SAII,8CAMR,IAAuBE,EAwBjBuZ,EAAkB,SAACvZ,EAAeuC,EAAe8L,EACnDhC,GACA,IAAMmN,EAA4B,GAMlC,OALAnN,EAAKhK,SAAQ,SAACnB,GACVsY,EAAW3hB,KACP,wBAAgC0K,MAAOrB,EAAKqB,MAA5C,SAAoDrB,EAAKuY,SAA5CD,EAAWrV,YAI5B,sBAAKnM,UAAU,OAAf,UACI,qBAAKA,UAAU,QAAf,SACI,+BAAOgI,MAEX,qBAAKhI,UAAU,QAAf,SACI,wBACIuK,MAAOA,EACPiP,SAAU,SAACvH,GACPoE,EAASpE,EAAE0H,OAAOpP,QAH1B,SAMKiX,UAMflM,EAAW3O,EAAMlC,SAASE,WAAatC,EAAW8L,OACxD,OACI,sBACIvN,GAAG,cACHZ,UAAW,YAAc2G,EAAM7B,UAAUQ,eAAiBrD,EAAciQ,aAAe,UAAY,IACnGhS,QAAS,aAHb,UAMI,sBAAKF,UAAU,QAAf,WA1DegI,EA2DI,QAzDnB,sBAAKhI,UAAU,OAAf,UACI,qBAAKA,UAAU,QAAf,SACI,+BAAOgI,MAEX,sBAAKhI,UAAU,QAAf,UAEI,uBACI6G,KAAK,SAAS0D,MAAO5C,EAAO+Z,IAAI,KAAKC,IAAI,MACzCnI,SAAU,SAACvH,GACPiP,EAASU,OAAO3P,EAAE0H,OAAOpP,WAGjC,uBACI1D,KAAK,QAAQzG,KAAK,QAAQshB,IAAI,KAAKC,IAAI,MAAMpX,MAAO5C,EACpD6R,SAAU,SAACvH,GACPiP,EAASU,OAAO3P,EAAE0H,OAAOpP,kBA2CpCgX,EAAgB,OAAQ3Z,GAAO,SAAC2C,GAAoB4W,EAAS5W,KAC1D3I,EAAWb,KAAI,SAAA8gB,GAAU,MAAO,CAAEtX,MAAOsX,EAAMJ,QAASI,OAE3DvM,EAAW,6BACRiM,EAAgB,QAASzZ,GAAO,SAACyC,GAAoB8W,EAAS9W,KAC1D5I,EAAWZ,KAAI,SAAA8gB,GAAU,MAAO,CAAEtX,MAAOsX,EAAMJ,QAASI,OAG/DvM,EAAW,6BACRiM,EAAgB,MAAOvK,OAAOnP,IAAW,SAAC0C,GAAoB6W,EAAOQ,OAAOrX,MACvEzC,GAASnG,EAAW,GAEjBF,EAAuBV,KAAI,SAAC8gB,EAAM3V,GAAQ,MAAO,CAAE3B,MAAO2B,EAAEzB,WAAYgX,QAASI,MAGjFngB,EAAuBX,KAAI,SAAC8gB,EAAM3V,GAAQ,MAAO,CAAE3B,MAAO2B,EAAEzB,WAAYgX,QAASI,UAKjG,qBAAK7hB,UAAU,YAAf,SACKyf,SClDFqC,ID0DM1E,KAAOS,KAAV,iP,MC5HI,WAAO,IAAD,EAEgBtR,qBAAWC,IAA3C7F,EAFgB,EAEhBA,MAAOyJ,EAFS,EAETA,SAAU3D,EAFD,EAECA,WAGnB6D,EAAMC,iBAAO,IACnB5P,qBAAU,WAENyP,EAAShM,EAAWoE,2BAA4B,CAAEH,OAAQiI,EAAIE,YAC/D,IATqB,MAWUhQ,mBAAS,WAXnB,mBAWjByH,EAXiB,KAWN8Z,EAXM,KAapBtC,EAAyB,WAC7BA,EAAa,qCACT,qBACIvf,QAAS,WACLkQ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAFnE,SAII,4CAEJ,qBACIrF,QAAS,WACLuM,EAAWuV,QAAQC,gBAAgBha,IAF3C,SAII,8CAIR,IAAqBD,EAAeuC,EAAe8L,EAmBnD,OAEI,sBACIzV,GAAG,iBACHZ,UAAW,YAAc2G,EAAM7B,UAAUQ,eAAiBrD,EAAcigB,gBAAkB,UAAY,IACtGhiB,QAAS,aAHb,UAMI,qBAAKF,UAAU,QAAf,UA3BagI,EA4BI,OA5BWuC,EA4BHtC,EA5BkBoO,EA4BP,SAAC9L,GAAoBwX,EAAaxX,IA1BtE,sBAAKvK,UAAU,OAAf,UACI,qBAAKA,UAAU,QAAf,SACI,+BAAOgI,MAEX,qBAAKhI,UAAU,QAAf,SACI,uBACI6G,KAAK,OACL0D,MAAOA,EACPiP,SAAU,SAACvH,GACPoE,EAASpE,EAAE0H,OAAOpP,kBAmBlC,qBAAKvK,UAAU,YAAf,SACKyf,SC/BF0C,I,MA/BO,WAAO,IAAD,EAEgB5V,qBAAWC,IAA3C7F,EAFgB,EAEhBA,MAAiB8F,GAFD,EAET2D,SAFS,EAEC3D,YAGzB,GAAI9F,EAAM7B,UAAUQ,eAAiBrD,EAAcmgB,eAC/C,OAAQ,6BAIZ,IAFA,IAAMC,EAAS1b,EAAM7B,UAAUO,eACzBid,EAAgC,GATd,WAUfpW,GACLoW,EAAeziB,KACX,qBAEIG,UAAW,CACPkM,EAAI,GAAKmW,EAAS,SAAW,IAC/BpiB,KAAK,KACPC,QAAS,WACLuM,EAAWoE,MAAM0R,aAAjB,2BAAkC5b,EAAM7B,WAAxC,IAAmDO,eAAgB6G,EAAI,OALtEoW,EAAenW,UAHvBD,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAaT,OACI,qBAAKtL,GAAG,iBACJZ,UAAU,kBADd,SAEI,qBAAKA,UAAU,UAAf,SAA0BsiB,QCoPhCE,I,MAAqB,SAAC5f,EAAaoF,EAAeuC,EACpD8L,EACAhC,EAA4CtU,GAE5C,IAAMyhB,EAA4B,GAMlC,OALAnN,EAAKhK,SAAQ,SAACnB,GACVsY,EAAW3hB,KACP,wBAAgC0K,MAAOrB,EAAKqB,MAA5C,SAAoDrB,EAAKuY,SAA5CD,EAAWrV,YAI5B,sBAEInM,UAAW,CACP,SACAD,EAAY,UAAY,IAC1BE,KAAK,KALX,UAOI,qBAAKD,UAAU,QAAf,SAAwBgI,IACxB,qBAAKhI,UAAU,QAAf,SACI,wBACIA,UACKD,GAAuB,KAAVwK,EAAyB,GAAV,QAEjCA,MAAOA,EACPiP,SAAU,SAACvH,GACPoE,EAASpE,EAAE0H,OAAOpP,QAN1B,SASKiX,QAjBJ5e,KAwBX6f,GAAwB,SAAC7f,EAAaoF,EAAeuC,EACvDmX,EAAaC,EAAatL,EAAmCtW,GAE7D,OACI,sBAEIC,UAAW,CACP,SACAD,EAAY,UAAY,IAC1BE,KAAK,KALX,UAOI,qBAAKD,UAAU,QAAf,SAAwBgI,IACxB,qBAAKhI,UAAU,QAAf,SACI,uBAAO6G,KAAK,SACR7G,UACKD,GAAwB,KAAVwK,GAAkBA,GAASmX,GAAOnX,GAASoX,EAAkB,GAAV,QAEtEpX,MAAOA,EAAOmX,IAAKA,EAAKC,IAAKA,EAC7BnI,SAAU,SAACvH,GACPoE,EAASpE,EAAE0H,OAAOpP,cAdzB3H,IAsBF8f,GA1UM,WAAO,IAAD,EAEiBnW,qBAAWC,IAA3C7F,EAFe,EAEfA,MAAOyJ,EAFQ,EAERA,SAAU3D,EAFF,EAEEA,WAGb8D,iBAAO,IACnB5P,qBAAU,cAGP,IAToB,MAWaH,mBAAiB,IAX9B,mBAWhB+N,EAXgB,KAWJoU,EAXI,OAYyBniB,mBAAiB,IAZ1C,mBAYhBkO,EAZgB,KAYEkU,EAZF,OAaqBpiB,mBAAsB,IAb3C,mBAahB0O,EAbgB,KAaA2T,EAbA,OAcWriB,mBAAsB,IAdjC,mBAchB2O,EAdgB,KAcL2T,EAdK,OAemBtiB,mBAAiB,IAfpC,mBAehBiP,EAfgB,KAeDsT,EAfC,OAgBWviB,mBAAsB,IAhBjC,mBAgBhBuP,EAhBgB,KAgBLiT,EAhBK,OAiBWxiB,mBAAsB,IAjBjC,mBAiBhBqP,EAjBgB,KAiBLoT,EAjBK,OAkBmBziB,mBAAsB,IAlBzC,mBAkBhByP,EAlBgB,KAkBDiT,EAlBC,OAmBC1iB,mBAAiB,IAnBlB,mBAmBhB2iB,EAnBgB,KAmBVC,EAnBU,OAqBS5iB,oBAAkB,GArB3B,mBAqBhB6iB,EArBgB,KAqBLC,EArBK,KAuBjB3e,GAAYgC,EAAMlC,SAASE,UAkDjChE,qBAAU,YAhDS,WAEf,OADA2iB,GAAW,GACH/U,GACJ,KAAKhM,EAAWiM,SACZ,OAAQE,GACJ,KAAKlM,EAAiBoM,SACK,KAAnBM,GAAuBoU,GAAW,GAEtC,MACJ,KAAK9gB,EAAiBqM,IACA,KAAdM,GAAkBmU,GAAW,GAEjC,MACJ,KAAK9gB,EAAiB4M,SAItB,KAAK5M,EAAiB6M,SAClBiU,GAAW,GAKnB,MACJ,KAAK/gB,EAAWiN,MACZ,OAAQC,GACJ,KAAKhN,EAAcmN,KACG,KAAdC,GAAkByT,GAAW,GAEjC,MACJ,KAAK7gB,EAAcqN,KACG,KAAdC,GAAkBuT,GAAW,GAEjC,MACJ,KAAK7gB,EAAcuN,SACO,KAAlBC,GAAsBqT,GAAW,GAK7C,MACJ,KAAK/gB,EAAW2N,KACC,KAATiT,GAAaG,GAAW,IAOpCC,KACD,CAAChV,EAAYG,EAAkBQ,EAAgBC,EAC9CM,EAAeI,EAAWE,EAAWE,EAAekT,IAGxD,IACIK,GAA8B,GAClCA,GAAa3jB,KACT2iB,GAAmBgB,GAAarX,OAAQ,cAAeoC,GACnD,SAAChE,GACGoY,EAAcpY,GACVA,IAAUhI,EAAWiM,WACrBoU,EAAoB,IACpBC,EAAkB,IAClBC,EAAa,KAEbvY,IAAUhI,EAAWiN,QACrBuT,EAAiB,IACjBC,EAAa,IACbC,EAAa,IACbC,EAAiB,KAEjB3Y,IAAUhI,EAAW2N,MACrBkT,EAAQ,MAIhB,CAAC,CAAE7Y,MAAO,GAAIkX,QAAS,KAAMgC,OACzBC,OAAOC,OAAOphB,GAAYqhB,QAvBb,SAAC/c,GAAD,QAAwBlC,KAActC,EAAW8L,QAAUtH,IAAStE,EAAWiM,aAuBzCzN,KAAI,SAAC8gB,GACpD,MAAO,CAAEtX,MAAOsX,EAAKpX,WAAYgX,QAASI,EAAKpX,iBAGvD,IAKJ9F,KAActC,EAAWuC,QACzB4e,GAAa3jB,KACT2iB,GAAmBgB,GAAarX,OAAQ,oBAAqBuC,GACzD,SAACnE,GACGqY,EAAoBrY,GAEhBA,IAAU/H,EAAiBqM,KAC3BiU,EAAa,IAEbvY,IAAU/H,EAAiBoM,UAC3BiU,EAAkB,MAI1B,CAAC,CAAEtY,MAAO,GAAIkX,QAAS,KAAMgC,OACzBC,OAAOC,OAAOnhB,GAAkBzB,KAAI,SAAC8gB,GACjC,IAAMgC,EAAMhC,EAAKpX,WACjB,MAAO,CAAEF,MAAOsZ,EAAKpC,QAASoC,OAGtCtV,IAAehM,EAAWiM,SAAS/D,aAG3C+Y,GAAa3jB,KACT4iB,GAAsBe,GAAarX,OAAQ,kBAAmB+C,GAAiB,EAAG,GAC9E,SAAC3E,GACGsY,EAAkBtY,KAEtBmE,IAAqBlM,EAAiBoM,SAASnE,aAGvD+Y,GAAa3jB,KACT4iB,GAAsBe,GAAarX,OAAQ,aAAcgD,GAAY,EAAG,GACpE,SAAC5E,GACGuY,EAAavY,KAEjBmE,IAAqBlM,EAAiBqM,IAAIpE,cAItD+Y,GAAa3jB,KACT2iB,GAAmBgB,GAAarX,OAAQ,iBAAkBsD,GACtD,SAAClF,GACGwY,EAAiBxY,GAEbA,IAAU9H,EAAcqN,MACxBkT,EAAa,IAEbzY,IAAU9H,EAAcmN,MACxBqT,EAAa,IAEb1Y,IAAU9H,EAAcuN,UACxBkT,EAAiB,MAIzB,CAAC,CAAE3Y,MAAO,GAAIkX,QAAS,KAAMgC,OACzBC,OAAOC,OAAOlhB,GAAe1B,KAAI,SAAC8gB,GAC9B,IAAMgC,EAAMhC,EAAKpX,WACjB,MAAO,CAAEF,MAAOsZ,EAAKpC,QAASoC,OAGtCtV,IAAehM,EAAWiN,MAAM/E,aAGxC+Y,GAAa3jB,KACT4iB,GAAsBe,GAAarX,OAAQ,aAAc0D,GAAY,IAAK,KACtE,SAACtF,GACG0Y,EAAa1Y,KAEjBkF,IAAkBhN,EAAcmN,KAAKnF,aAG7C+Y,GAAa3jB,KACT4iB,GAAsBe,GAAarX,OAAQ,aAAc4D,EAAW,GAAI,KACpE,SAACxF,GACGyY,EAAazY,KAEjBkF,IAAkBhN,EAAcqN,KAAKrF,aAG7C+Y,GAAa3jB,KACT4iB,GAAsBe,GAAarX,OAAQ,iBAAkB8D,EAAe,GAAI,KAC5E,SAAC1F,GACG2Y,EAAiB3Y,KAErBkF,IAAkBhN,EAAcuN,SAASvF,aAGjD+Y,GAAa3jB,KACT2iB,GAAmBgB,GAAarX,OAAQ,OAAQgX,GAC5C,SAAC5Y,GACG6Y,EAAQ7Y,KAGZ,CAAC,CAAEA,MAAO,GAAIkX,QAAS,KAAMgC,OACzBC,OAAOC,OAAOnkB,GAAgBuB,KAAI,SAAC8gB,GAC/B,IAAMjf,EAAMif,EAAKpX,WACjB,MAAO,CAAEF,MAAO3H,EAAK6e,QAAS7e,OAGtC2L,IAAehM,EAAW2N,KAAKzF,aAIvC,IAAIgV,GAAyB,WA8B7B,OA7BAA,GAAa,qCACT,qBACIvf,QAAS,WACLkQ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAFnE,SAII,4CAEJ,qBACIvF,UAAW,CACPqjB,EAAY,GAAK,WACnBpjB,KAAK,IACPC,QAAS,WACLuM,EAAWqX,OAAOC,kBACdxV,EACqB,KAArBG,EAA0B,KAAOA,EACd,KAAnBQ,EAAwB,EAAIA,EACd,KAAdC,EAAmB,EAAIA,EACL,KAAlBM,EAAuB,KAAOA,EAChB,KAAdI,EAAmB,EAAIA,EACT,KAAdE,EAAmB,EAAIA,EACL,KAAlBE,EAAuB,EAAIA,EAClB,KAATkT,EAAc,KAAOA,IAdjC,SAiBI,8CAOJ,sBACIviB,GAAG,gBACHZ,UAAW,CACP,WACA2G,EAAM7B,UAAUQ,eAAiBrD,EAAc+hB,eAAiB,UAAY,IAC9E/jB,KAAK,KACPC,QAAS,aANb,UASI,qBAAKF,UAAU,QAAf,SACKwjB,KAEL,qBAAKxjB,UAAU,YAAf,SACKyf,SCvDXwE,GAAiB,WAAO,IAAD,EACG1X,qBAAWC,IAA/B7F,EADiB,EACjBA,MAEFzB,GAHmB,EACVkL,SAEEzJ,EAAM7B,UAAUI,UAKjC,OACI,sBAAKlF,UAAU,OAAf,UACI,qBAAKA,UAAU,QAAf,SAAuB,2CACvB,sBAAKA,UAAU,SAAf,UACI,wBACIA,UAAWkF,GAAY5C,EAAS6C,OAAS,SAAW,GADxD,SAII,4CAEJ,wBACInF,UAAWkF,GAAY5C,EAASsP,QAAU,SAAW,GADzD,SAII,2CAEJ,wBACI5R,UAAWkF,GAAY5C,EAAS4hB,QAAU,SAAW,GADzD,SAII,oDAOLC,GAnOU,WAAO,IAAD,EACa5X,qBAAWC,IAA3C7F,EADmB,EACnBA,MAAOyJ,EADY,EACZA,SAAU3D,EADE,EACFA,WADE,EAIWjM,mBAAS,IAJpB,mBAIpB4jB,EAJoB,KAIPC,EAJO,OAMW7jB,mBAAS,IANpB,mBAMpB8jB,EANoB,KAMPC,EANO,KAQ3B5jB,qBAAU,WACN6jB,QAAQC,IAAI,6BACb,IACH9jB,qBAAU,WAEN,IAAMkE,EAAW8B,EAAMlC,SAASI,SAE5B5D,EAAQ,EACNmjB,EAA6B,GAC7BE,EAA6B,GAI7Btf,EAAY2B,EAAM7B,UAAUE,UAE5B0H,EAAQ,GAEVuE,EAAK,EACLyT,EAAY,EACZC,EAAY,EACZC,GAAW,EACf/f,EAASwF,SAAQ,SAACnB,EAAMgD,GAEpB,GAAIhD,EAAKrC,MAAQnE,EAAgBgF,KAAM,CACnC,IAAMuF,EAAO/D,EAAK/B,OAClBuF,EAAMO,KAAN,eAAkBA,GAGtB,IAAM4X,EAAM/W,KAAK8Q,MAAM8F,EAAY,GAAK,EAClC/W,EAAW,GAYjB,GAXAA,EAASsD,GAAKA,EACdtD,EAASD,SAAWkX,GAAWC,EAAMA,GAAO,EAC5ClX,EAASC,YAAc8W,EAAY,EAAI,EAAIA,EAAY,GAAK,EAC5D/W,EAASE,SAAW8W,EACpBP,EAAYvkB,KACR,cAAC,GAAD,CAEIoB,MAAOiL,EACPS,YAAazD,GAFRgD,IAKThD,EAAKrC,MAAQnE,EAAgBmK,MAAO,CACpC+X,EAAUC,EACV,IAAM1d,EAAS+B,EAAK/B,OAEdQ,EAAQ+E,EAAMO,KAAKtF,MACnB5B,EAAUoB,EAAOpB,QAAUoB,EAAOnB,WAAamB,EAAOlB,WAC5Dye,GAAa3e,EAEb4e,GADoB,IAAQhd,EAAQ,EACT,EAAI5B,EAC/BkL,SACG,GAAI/H,EAAKrC,MAAQnE,EAAgB0L,OAAQ,CAC5C,IAAMjH,EAAS+B,EAAK/B,OACpB,OAAQA,EAAOoH,YACX,KAAKhM,EAAWiM,SACZ,IAAIQ,EAActC,EAAMO,KAAKpF,SACzBoH,EAAiC,SAApBvC,EAAMO,KAAKnF,MAC5B,OAAQX,EAAOuH,kBACX,KAAKlM,EAAiBoM,SAClBI,GAAe,GAAKA,EAAsC,EAAxB7H,EAAO+H,gBAAsB,GAE/D,MACJ,KAAK1M,EAAiBqM,IAElBG,GAAe,GAAKA,EADF4S,OAAOza,EAAOgI,YACe,GAE/C,MACJ,KAAK3M,EAAiB4M,SAIdJ,EAHCC,GAGc,GAAKD,EAAc,GAAK,IAFxB,GAAKA,EAAc,GAAK,GAI3CC,GAAcA,EAEd,MACJ,KAAKzM,EAAiB6M,SAClBJ,GAAcA,EAKtBvC,EAAMO,KAAKpF,SAAWmH,EACtBtC,EAAMO,KAAKnF,MAAQmH,EAAa,QAAU,QAE1C,MACJ,KAAK1M,EAAWiN,MACZ,IAAIG,EAAkBjD,EAAMO,KAAKtF,MACjC,OAAQR,EAAOsI,eACX,KAAKhN,EAAcmN,KACfD,GAAYiS,OAAOza,EAAO0I,WAE1B,MACJ,KAAKpN,EAAcqN,KACfH,EAAW7B,KAAK8Q,MAAMjP,EAAWxI,EAAO4I,UAAY,KAEpD,MACJ,KAAKtN,EAAcuN,SACfL,EAAWxI,EAAO8I,cAI1BvD,EAAMO,KAAKtF,MAAQgI,GAM/B3K,EAAUkH,GAAV,2BAAoBlH,EAAUkH,IAA9B,IAAkCe,KAAK,eAAMP,EAAMO,MAAQU,aAGvDzE,EAAKrC,MAAQnE,EAAgB2E,UAC7Bid,EAAYzkB,KACR,cAAC,GAAD,CAAwBoB,MAAOA,EAAO+G,MAAQkB,EAAK/B,OAAyBc,WAAvDiE,IAEzBjL,QAGRojB,EAAeD,GACfG,EAAeD,GACf7X,EAAWoE,MAAM0R,aAAjB,2BAAmC5b,EAAM7B,WAAzC,IAAoDE,iBAErD,CAAC2B,EAAMlC,SAASI,WAEnB,IAAMK,EAAWyB,EAAM7B,UAAUI,SAC3B4f,IAAiBne,EAAM7B,UAAUQ,eAAiBrD,EAAcsD,MAAQoB,EAAM7B,UAAUQ,eAAiBrD,EAAcuQ,cAC7H,OACI,sBAAK5R,GAAG,yBAAR,UACI,sBAAKZ,UAAU,YAAf,UACI,sBAAKY,GAAG,aAAR,UACI,sBACIA,GAAG,mBACHZ,UAAWkF,GAAY5C,EAASsP,QAAU,gBAAkB,GAFhE,UAII,wBAAQ5R,UAAU,GAAGE,QAAS,WAC1BkQ,EAAShM,EAAW4C,gBAAiB,CAAE/F,MAAO,KADlD,SAEG,0CACH,wBAAQjB,UAAU,UAAlB,SAA4B,0CAC5B,wBAAQA,UAAU,UAAlB,SAA4B,4CAC5B,yBAAQA,UAAU,GAAGE,QAAS,WAC1BkQ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcmgB,kBAD/D,cAEI,8CACJ,cAAC,GAAD,OAEJ,qBACIxhB,GAAG,eACHZ,UAAWkF,GAAY5C,EAASsP,QAAU,gBAAkB,GAFhE,SAIK0S,IAEL,qBACI1jB,GAAG,kBACHZ,UAAWkF,GAAY5C,EAASsP,QAAU,gBAAkB,GAFhE,SAIKwS,IAGL,qBAAKxjB,GAAG,cACJZ,UAAW8kB,EAAe,SAAW,GACrC5kB,QAAS,WACLkQ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,UAInE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEJ,cAAC,GAAD,OAGJ,qBAAKvF,UAAU,aAAf,SACI,cAAC,GAAD,U,2BCuED+kB,I,MAzQa,WAAO,IAAD,EACUxY,qBAAWC,IAA3C7F,EADsB,EACtBA,MAAOyJ,EADe,EACfA,SAAU3D,EADK,EACLA,WADK,EAGJjM,oBAAkB,GAHd,mBAGvBwkB,EAHuB,KAGhBC,EAHgB,OAIAzkB,mBAAiB,IAJjB,mBAIvB0kB,EAJuB,KAIdC,EAJc,OAKM3kB,mBAAmB,IALzB,mBAKvB4kB,EALuB,KAKXC,EALW,OAMI7kB,mBAAwB,IAN5B,mBAMvB8kB,EANuB,KAMZC,EANY,OAOJ/kB,oBAAkB,GAPd,mBAOvBglB,EAPuB,KAOfC,EAPe,OAQJjlB,mBAAiB,IARb,mBAQvBsW,EARuB,KAQhB4O,EARgB,OASIllB,mBAA0B,IAT9B,mBASvBmE,EATuB,KASZghB,EATY,OAUJnlB,oBAAkB,GAVd,mBAUvBolB,EAVuB,KAUfC,EAVe,KAY9BllB,qBAAU,WACN6jB,QAAQC,IAAI,gCACb,IAGH,IAAMqB,EAAS,SAACC,GAEZF,GAAQ,GACRV,EAAW,yBACXva,EAAsB,SAAD,kHAAsHjE,EAAMrC,MAAM1D,KAClJolB,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF3B,QAAQC,IAAI,WAAI9d,EAAMrC,MAAM1D,GAAhB,kBAAqCulB,EAAQha,QACzCga,EAAQha,OAAS,GAE7BkZ,EAAcc,GACdhB,EAAW,KAEXA,EAAW,6CAEfU,GAAQ,MAEXO,OAAM,SAAAC,GACH7B,QAAQC,IAAI4B,EAAQ,wCACpBR,GAAQ,OAIpBllB,qBAAU,WACN,IAAM0T,EAAsB,GAC5B+Q,EAAW/a,SAAQ,SAACyP,EAAQ5N,GACxBmI,EAAKxU,KACD,sBAEIG,UAAW,CACP,SACAglB,GAAS9Y,EAAI,QAAU,IACzBjM,KAAK,KACPC,QAAS,WACL+kB,EAAS/Y,IAPjB,UAUI,iCAAO4N,EAAOlZ,GAAd,OACA,sBAAMZ,UAAU,QAAhB,SAAyB8Z,EAAOhD,QAChC,qCACA,sBAAM9W,UAAU,OAAhB,SAAwB8Z,EAAOwM,aAC/B,uCAbKpa,OAiBjBqZ,EAAalR,KACd,CAAC+Q,EAAYJ,IAEhBrkB,qBAAU,WACD6kB,GACDM,MAGL,CAACN,IAEJ,IAAMe,EAAe,SAACve,EAAejI,EAAoBsW,GAAkE,IAA5CvW,EAA2C,wDACtH,OACI,wBAAQE,UAAW,CACfD,EAAY,UAAY,GACxBD,EAAW,SAAW,IACxBG,KAAK,KACHC,QAASmW,EAJb,SAMI,+BAAOrO,OAKbwe,EAAoB,SAACxe,EAAeye,GACtC,OACI,sBACIzmB,UAAU,cADd,UAGI,+BAAOgI,IACP,+BAAO,OACNye,MAKPC,EAA0B,IAAXxB,EACfyB,EAAiBvB,EAAWJ,GAClC,OACI,sBAAKpkB,GAAG,yBAAR,UACI,sBAAKZ,UAAU,YAAf,UAyBI,sBAAKA,UAAU,MAAf,UACKumB,EAAa,SAAUf,GAAUI,GAAQ,WACtCT,EAAW,aACXva,EAAsB,SAAD,+DAAmEjE,EAAMrC,MAAM1D,GAA/E,uBAChBolB,MAAK,SAACY,GAEH,OADAd,EAAOV,EAAWjZ,QACXya,QAGlBL,EAAa,UAAoB,GAAVvB,GAAeY,GAAQ,WACtCJ,IACDC,GAAQ,GACRC,EAASiB,EAAe7P,OACxB6O,EAAagB,EAAeL,eAEjCd,GACFe,EAAa,UAAoB,GAAVvB,GAAeQ,GAAUI,GAAQ,WACrD,wBAAC,uBAAAzH,EAAA,6DACGgH,EAAW,aACXX,QAAQC,IAAI,iBAFf,SAGS7Z,EAAsB,SAAD,6CAAiDwa,EAAWJ,GAAOpkB,KAHjG,uBAISgK,EAAsB,SAAD,0CAA8Cwa,EAAWJ,GAAOpkB,KAJ9F,OAKGklB,IACAb,GAAU,GACVT,QAAQC,IAAI,eAPf,0CAAD,SAWR,sBAAKzkB,UAAW,CACZ,MACAwlB,EAAS,UAAY,IACvBvlB,KAAK,KAHP,UAII,qBAAKD,UAAW,CACZ,UACC0mB,EAA0B,GAAX,UAClBzmB,KAAK,KAHP,SAII,+BAAOilB,MAEX,qBAAKllB,UAAW,CACZ,OACA0mB,EAAe,SAAW,IAC5BzmB,KAAK,KAHP,SAIKqlB,UAIb,sBAAKtlB,UAAU,aAAf,UACI,sBAAKA,UAAU,MAAf,UACKumB,EAAa,UAAWf,GAAUI,GAAQ,WACvCH,GAAQ,MAEXc,EAAa,QAASf,GAAwB,KAAd7gB,GAAoBihB,GAAQ,WACzDC,GAAQ,GACR,wBAAC,6BAAA1H,EAAA,6DACGqG,QAAQC,IAAI,iBACNd,EAAmB,GAF5B,SAGS/Y,EAAsB,SAAD,uCAA2CkM,EAA3C,4BAAoEnS,EAApE,wBAA6FgiB,EAAe/lB,KAH1I,YAIO+F,EAAMlC,SAASI,SAASsH,OAAS,GAJxC,wBAKOxF,EAAMlC,SAASI,SAASwF,SAAQ,SAACnB,EAAMgD,GACnCyX,EAAO9jB,KAAP,WAAgB8mB,EAAe/lB,GAA/B,aAAsCsL,EAAtC,cAA6CZ,KAAKC,UAAUrC,GAA5D,UANX,SAQa0B,EAAsB,SAAD,6CAAiD+b,EAAe/lB,KARlG,wBASagK,EAAsB,SAAD,qCAAyC+Y,EAAO1jB,KAAK,OATvF,QAWGukB,QAAQC,IAAI,eACZoC,MAAM,oCAENhB,GAAQ,GAdX,2CAAD,MAiBHU,EAAa,QAASf,GAAwB,KAAd7gB,GAAoBihB,GAAQ,WACzDC,GAAQ,GACR,wBAAC,iCAAA1H,EAAA,yDACkC,GAA3BwI,EAAeG,SADtB,gBAEO1W,EAAShM,EAAWqD,sBAAuB,MAFlD,uCAI8BmD,EAAsB,SAAD,kDAAsD+b,EAAe/lB,GAArE,kBAJnD,cAIaqlB,EAJb,gBAK6BA,EAASC,OALtC,OAKaC,EALb,OAOathB,EAA0B,GAChCshB,EAAQ9b,SAAQ,SAACuc,GACb/hB,EAAShF,KAAKyL,KAAKyb,MAAMH,EAAOV,UAEpCzZ,EAAWoE,MAAMwC,YAAjB,2BAAkC1M,EAAMlC,UAAxC,IAAkDI,WAAUF,UAAWA,KAX9E,QAaGyL,EAAShM,EAAW8D,oBAAqB,CAAEjH,MAAO,IAClDmP,EAAShM,EAAW4C,gBAAiB,CAAE/F,MAAO,IAC9C4kB,GAAQ,GAfX,2CAAD,SAoBHL,EACG,sBAAKxlB,UAAU,OAAf,UACKwmB,EAAkB,KACf,sBAAMxmB,UAAU,QAAhB,SAAyB2mB,EAAe/lB,MAE3C4lB,EAAkB,QACf,uBACI3f,KAAK,OACL2S,SAAU,SAACvH,GAGPyT,EAASzT,EAAE0H,OAAOpP,QAEtBA,MAAOuM,KAGd0P,EAAkB,OAEf,yBAAQxmB,UAAW,CACf,QACA2mB,EAAeG,SAAW,EAAI,UAAY,IAC5C7mB,KAAK,KACHsK,MAAO5F,EACP6U,SAAU,SAACvH,GACP0T,EAAa1T,EAAE0H,OAAOpP,QAN9B,UAQI,wBAAQA,MAAM,KACd,wBAAQA,MAAOlI,EAAWuC,MAA1B,SAAkCvC,EAAWuC,QAC7C,wBAAQ2F,MAAOlI,EAAW8L,OAA1B,SAAmC9L,EAAW8L,aAGrDqY,EAAkB,OACf,sBAAMxmB,UAAU,QAAhB,SAAyB,aAE5BwmB,EAAkB,OACf,sBAAMxmB,UAAU,QAAhB,SAAyB2mB,EAAeG,eAnC1C,qCCxNfE,I,MATa,WAAO,IAAD,EACUza,qBAAWC,IADrB,EACtB7F,MADsB,EACfyJ,SADe,EACL3D,WAGzB,OAAQ,+BCsBGwa,I,MAxBY,WAAO,IAAD,EACW1a,qBAAWC,IAA3C7F,EADqB,EACrBA,MAAOyJ,EADc,EACdA,SAAU3D,EADI,EACJA,WACnB6D,EAAMC,iBAAO,IAQnB,OANA5P,qBAAU,WACqB,GAAvBgG,EAAMnC,eAAwD,GAAlCmC,EAAMlC,SAASI,SAASsH,SACpDmE,EAAIE,QAAQjG,MAAQe,KAAKC,UAAU5E,EAAMlC,aAE9C,CAACkC,EAAMnC,gBAGN,sBAAK5D,GAAG,2BAAR,UACI,0BAAU0P,IAAKA,IACf,wBACIpQ,QAAS,WACLuM,EAAWoE,MAAMwC,YAAY/H,KAAKyb,MAAMzW,EAAIE,QAAQjG,QACpD6F,EAAShM,EAAW8D,oBAAqB,CAACjH,MAAO,IACjDmP,EAAShM,EAAW4C,gBAAiB,CAAE/F,MAAO,KAJtD,qCCcGimB,GAzBE,WAAO,IAAD,EAES3a,qBAAWC,IAA/B7F,EAFW,EAEXA,MAAOyJ,EAFI,EAEJA,SAEf,OACI,qBAAKxP,GAAG,gBAAR,SACI,cAAC,EAAD,CAAYC,UAAU,aAClBC,YAAa,CACT,CAAEV,KAAM,UAAWc,SAAS,EAAMZ,KAAM,cAAC,GAAD,KACxC,CACIF,KAAM,OAAQc,QAA4C,IAAnCyF,EAAMlC,SAASI,SAASsH,OAC/C7L,KAA6B,GAAvBqG,EAAMnC,cAAqB,6BAAQ,cAAE,GAAF,KAE7C,CAAEpE,KAAM,SAAUc,SAAS,EAAOZ,KAAM,cAAC,GAAD,KACxC,CAAEF,KAAM,QAASc,SAAS,EAAOZ,KAAM,cAAC,GAAD,KACvC,CAAEF,KAAM,cAAec,SAAS,EAAMZ,KAAM,yBAC5C,CAAEF,KAAM,UAAWc,SAAS,EAAMZ,KAAM,0BAE5CG,SAAUkG,EAAMnC,cAChBpD,eAAgB,SAACH,GAAD,OAAmBmP,EAAShM,EAAW4C,gBAAiB,CAAE/F,MAAOA,U,gBCnBpFkmB,GAYT,WAAYxgB,EAAcygB,GAAuC,IAAD,iCAVxDA,kBAUwD,OATxDhX,cASwD,OARxDzJ,WAQwD,OAMzD0gB,eAAiB,SAAC/iB,GACrB,EAAK8L,SAAShM,EAAW2C,UAAW,CAAEzC,WAPsB,KAazD+O,YAAc,SAACnK,GAClB,EAAKke,aAAa,CAAEvgB,KAAMzC,EAAW6E,cAAenC,QAAS,CAAEoC,WAdH,KAgBzDiP,mBAAqB,SAACjS,GACzB,EAAKkhB,aAAa,CAAEvgB,KAAMzC,EAAWkF,qBAAsBxC,QAAS,CAAEZ,0BAjBV,KAoBzD8Y,eAAiB,SAACvV,GACrB,EAAK2d,aAAa,CAAEvgB,KAAMzC,EAAWmF,iBAAkBzC,QAAS,CAAE2C,kBArBN,KAwBzDoH,MAAQ,CAEXyW,YAAa,SAACrmB,GACV,IAAMoH,EAAS,EAAK1B,MAAM7B,UAAUE,UAAU/D,GAAOoH,OACrDA,EAAO8J,MAAMmL,gBAAkB,OAC/BiC,YAAW,WACPlX,EAAO8J,MAAMmL,gBAAkB,KAEhC,MAEPiK,cAAe,WACX,IAAMxiB,EAAa,EAAK4B,MAAM7B,UAAUC,WACxC,EAAK8L,MAAMyW,YAAYviB,IAE3ByiB,eAAgB,WACZ,EAAK7gB,MAAM7B,UAAUM,aAAaiF,SAAQ,SAACpJ,GACvC,EAAK4P,MAAMyW,YAAYrmB,OAI/BshB,aAAc,SAACzd,GACX,EAAKsL,SAAShM,EAAWgF,eAAgB,CAAEtE,eAE/C0O,YAAa,WACT,IAAMzO,EAAa,EAAK4B,MAAM7B,UAAUC,WACxC,EAAK8L,MAAM0R,aAAX,2BACO,EAAK5b,MAAM7B,WADlB,IAEIG,cAAeF,EAAYG,SAAU5C,EAASsP,YAGtD6V,gBAAiB,WACb,EAAK5W,MAAM0R,aAAX,2BACO,EAAK5b,MAAM7B,WADlB,IAEIG,eAAgB,EAAGC,SAAU5C,EAAS6C,OAAQC,aAAc,OAGpEiO,YAAa,SAACnK,GACV,EAAKkH,SAAShM,EAAW6E,cAAe,CAAEC,UAS9Cwe,eAAgB,WACZ,OAAO,EAAK/gB,MAAMlC,SAASI,SAAS,GAAGsC,QAE3CwgB,YAAa,SAACziB,GACV,EAAK2L,MAAM0R,aAAX,2BAA6B,EAAK5b,MAAM7B,WAAxC,IAAmDI,eAGvD0iB,eAAgB,SAAC/gB,EAAuBM,GACpC,IAAMyV,EAAW,EAAKjW,MAAM7B,UAAUC,WAChCF,EAAW,EAAK8B,MAAMlC,SAASI,SAASqC,QAC9CrC,EAASuC,OAAOwV,EAAW,EAAG,EAAG,CAAE/V,OAAMM,WACzC,EAAKiJ,SAAShM,EAAW+E,cAAe,CAAEtE,aACxB,EAAK8B,MAAM7B,UAAUE,UAAUkC,QACvCE,OAAOwV,EAAW,EAAG,EAAG,IAClC,EAAK/L,MAAMyW,YAAY1K,EAAW,IAGtCzJ,kBAAmB,WACf,IAAMyJ,EAAW,EAAKjW,MAAM7B,UAAUC,WAChCF,EAAW,EAAK8B,MAAMlC,SAASI,SAASqC,QACxCC,EAAS,CACfA,UAAmB,WACnBtC,EAASuC,OAAOwV,EAAW,EAAG,EAAG,CAC7B/V,KAAMnE,EAAgB2E,QACtBF,OAAQA,IAEZ,EAAKiJ,SAAShM,EAAW+E,cAAe,CAAEtE,aACxB,EAAK8B,MAAM7B,UAAUE,UAAUkC,QACvCE,OAAOwV,EAAW,EAAG,EAAG,IAClC,EAAK/L,MAAMyW,YAAY1K,EAAW,IAEtCxJ,iBAAkB,WAiBd,EAAKvC,MAAM+W,eAAellB,EAAgB0L,OAX3B,CACXG,WAAY,KACZG,iBAAkB,KAClBQ,eAAgB,EAChBC,UAAW,EACXM,cAAe,KACfI,UAAW,EACXE,UAAW,EACXE,cAAe,EACfkT,KAAM,QAIdrS,gBAAiB,WACb,IAAMhM,EAAY,EAAK6B,MAAM7B,UACvB8X,EAAW9X,EAAUC,WACrBF,EAAW,EAAK8B,MAAMlC,SAASI,SAASqC,QAC9CrC,EAASuC,OAAOwV,EAAW,EAAG,EAAG,CAC7B/V,KAAMnE,EAAgBmK,MACtB1F,OAAQ,CAGJvB,SAAU,KACVE,YAAa,KACb7B,UAAWpC,EAAUgB,MACrBkD,QAASjB,EAAUO,eACnBW,WAAY,EACZC,WAAY,EACZgI,QAAS,CACLxE,YAAa,GACbO,OAAQ,CACJ,CACI8N,KAAM,CAAC,CACHZ,IAAK9U,EAAiB0W,KACtBR,QAAQ,EACR3C,QAAQ,IAEZkS,KAAM1lB,EAAa2lB,KACnB7d,MAAO,CAAC,CAAC,EAAC,KACV+N,KAAM,CAAC,IAEX,CACIF,KAAM,CAAC,CACHZ,IAAK9U,EAAiB0W,KACtBR,QAAQ,EACR3C,QAAQ,IAEZkS,KAAM1lB,EAAa4lB,MACnB9d,MAAO,CAAC,CAAC,EAAC,KACV+N,KAAM,CAAC,KAGfkF,YAAY,MAIxB,EAAK9M,SAAShM,EAAW+E,cAAe,CAAEtE,aAExB,EAAK8B,MAAM7B,UAAUE,UAAUkC,QACvCE,OAAOwV,EAAW,EAAG,EAAG,IAClC,EAAK/L,MAAMyW,YAAY1K,EAAW,IAEtCxL,cAAe,SAACnQ,GACZ,IAAM2b,EAAW,EAAKjW,MAAM7B,UAAUC,WAChCmO,EAAa,EAAKvM,MAAMlC,SAASI,SAAS5D,GAChD,GAEI,CAACyB,EAAgBmK,MAAOnK,EAAgB2E,QAAS3E,EAAgB0L,QAAQZ,SAAS0F,EAAWrM,OAEpF,GAAT5F,EACF,CACE,IAAM4D,EAA0B,EAAK8B,MAAMlC,SAASI,SAASqC,QAC7DrC,EAASuC,OAAOnG,EAAO,GACvB,EAAKmP,SAAShM,EAAW+E,cAAe,CAAEtE,aACtC5D,GAAS2b,IACT,EAAKjW,MAAM7B,UAAUC,aACrB,EAAKqL,SAAShM,EAAWgF,eAAgB,CAAEtE,UAAW,EAAK6B,MAAM7B,eAI7E6O,iBAAkB,WACd,IAAMiJ,EAAW,EAAKjW,MAAM7B,UAAUC,WACtC,EAAK8L,MAAMO,cAAcwL,IAS7BoL,qBAAsB,WAClB,IAAMpL,EAAW,EAAKjW,MAAM7B,UAAUC,WAEtC,OADa,EAAK4B,MAAMlC,SAASI,SAAS+X,EAAW,GAC5C/V,MAAQnE,EAAgBqF,QAC7B,EAAKpB,MAAM7B,UAAUC,aACrB,EAAKqL,SAAShM,EAAWgF,eAAgB,CAAEtE,UAAW,EAAK6B,MAAM7B,aAC1D,IAKfmjB,iBAAkB,WACd,IAAMrL,EAAW,EAAKjW,MAAM7B,UAAUC,WAEtC,GADa,EAAK4B,MAAMlC,SAASI,SAAS+X,EAAW,GAC5C/V,MAAQnE,EAAgBqF,MAAO,CAEpC,IAAMhD,EAAa6X,EAAW,EAG9B,OADA,EAAK/L,MAAM0R,aAAX,2BAA6B,EAAK5b,MAAM7B,WAAxC,IAAmDC,iBAC5C,EAEX,OAAO,GAGXmjB,qBAAsB,WAClB,IAAMrjB,EAAW,EAAK8B,MAAMlC,SAASI,SACjC+X,EAAW,EAAKjW,MAAM7B,UAAUC,WACpC,GAEI,GAAIF,IADJ+X,GACuB/V,MAAQnE,EAAgB2E,QAAS,CACpD,EAAKV,MAAM7B,UAAUC,WAAa6X,EAClC,EAAKxM,SAAShM,EAAWgF,eAAgB,CAAEtE,UAAW,EAAK6B,MAAM7B,YACjE,aAEC8X,EAAW,IAGxBuL,iBAAkB,WACd,IAAMtjB,EAAW,EAAK8B,MAAMlC,SAASI,SACjC+X,EAAW,EAAKjW,MAAM7B,UAAUC,WACpC,GAEI,GAAIF,IADJ+X,GACuB/V,MAAQnE,EAAgB2E,SAAWuV,GAAY/X,EAASsH,OAAS,EAAG,CACvF,EAAKxF,MAAM7B,UAAUC,WAAa6X,EAClC,EAAKxM,SAAShM,EAAWgF,eAAgB,CAAEtE,UAAW,EAAK6B,MAAM7B,YACjE,aAEC8X,EAAW/X,EAASsH,OAAS,IAG1Cic,iBAAkB,WACd,EAAKzhB,MAAM7B,UAAUC,WAAa,EAClC,EAAKqL,SAAShM,EAAWgF,eAAgB,CAAEtE,UAAW,EAAK6B,MAAM7B,aAGrEgN,gBAAiB,SAAC1M,GACd,EAAKgL,SAAShM,EAAWgF,eAAgB,CACrCtE,UAAU,2BAAM,EAAK6B,MAAM7B,WAAlB,IAA6BM,oBAI9CkO,kBAAmB,WACf,IAAMvO,EAAa,EAAK4B,MAAM7B,UAAUC,WAClCoC,EAAS,EAAKR,MAAMlC,SAASI,SAASE,GAAYoC,OAKpDvB,EAAWuB,EAAOvB,SACN,MAAZA,IACAA,EAAW,CAAEC,UAAW,EAAG3B,QAAQ,IAEvC,EAAKkM,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAc8O,gBAChE,EAAKX,SAAShM,EAAWyE,qBAAsB,CAC3CC,OAAO,2BACA,EAAKnC,MAAM7B,UAAUU,mBADtB,IAIFI,WACAE,YAAaqB,EAAOrB,YACpB7B,UAAWkD,EAAOlD,UAClB8B,QAASoB,EAAOpB,QAChBC,WAAYmB,EAAOnB,WACnBC,WAAYkB,EAAOlB,gBAK/BwN,kBAAmB,WACf,IAAM1O,EAAa,EAAK4B,MAAM7B,UAAUC,WACzB,EAAK4B,MAAMlC,SAASI,SAASE,GAAYoC,OACxD,EAAKiJ,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcigB,mBAGpExO,iBAAkB,WACd,IAAM3O,EAAa,EAAK4B,MAAM7B,UAAUC,WACzB,EAAK4B,MAAMlC,SAASI,SAASE,GAAYoC,OACxD,EAAKiJ,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAc+hB,kBAGpEzQ,kBAAmB,WACf,IAAMxO,EAAa,EAAK4B,MAAM7B,UAAUC,WAClCoC,EAAS,EAAKR,MAAMlC,SAASI,SAASE,GAAYoC,OAClD8G,EAAU9G,EAAO8G,QACjBoa,EAAmC,CACrCziB,SAAUuB,EAAOvB,SACjBE,YAAaqB,EAAOrB,YACpB7B,UAAWkD,EAAOlD,UAClB8B,QAASoB,EAAOpB,QAChBC,WAAYmB,EAAOnB,WACnBC,WAAYkB,EAAOlB,WACnBsT,eAAgBtL,EAAQjE,OAAO,GAAGC,MAAMkC,OACxC1C,YAAa6B,KAAKyb,MAAMzb,KAAKC,UAAU0C,EAAQxE,cAC/CyT,WAAYjP,EAAQiP,WACpBvT,UAAW,EACXiO,iBAAkB,EAClB0Q,sBAAuB,EACvBte,OAAQsB,KAAKyb,MAAMzb,KAAKC,UAAU0C,EAAQjE,SAC1C0V,WAAW,GAEf,EAAKvH,mBAAmBkQ,GACxB,EAAKjY,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcod,oBA/TR,KAwUzDpS,KAAO,CACVqU,aAAc,SAAC3Z,EAAeC,EAAeC,EAAkBC,GAC3D,IAAM/C,EAAa,EAAK4B,MAAM7B,UAAUC,WAGxC,EAAKqL,SAAShM,EAAW2E,qBAAsB,CAC3CxB,IAAKxC,EACL+D,OAAQ,CACJnB,QAAOC,QAAOC,WAAUC,WAGhC,EAAKsI,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,OAChE,EAAKsL,MAAM0W,kBApV6C,KA6VzDvF,QAAU,CACbC,gBAAiB,SAACha,GACd,IAAMlD,EAAa,EAAK4B,MAAM7B,UAAUC,WACxC,EAAKqL,SAAShM,EAAW2E,qBAAsB,CAC3CxB,IAAKxC,EACL+D,OAAQ,CACJb,eAGR,EAAKmI,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,OAChE,EAAKsL,MAAM0W,kBAvW6C,KAiXzDzD,OAAS,CACZC,kBAAmB,SAACxV,EAAwBG,EAA2CQ,EAAwBC,EAC3GM,EAAqCI,EAAmBE,EAAmBE,EAAuBkT,GAClG,IAAMpe,EAAa,EAAK4B,MAAM7B,UAAUC,WACxC,EAAKqL,SAAShM,EAAW2E,qBAAsB,CAC3CxB,IAAKxC,EACL+D,OAAQ,CACJyF,aACAG,mBACAQ,iBACAC,YACAM,gBACAI,YACAE,YACAE,gBACAkT,UAGR,EAAK/S,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,OAChE,EAAKsL,MAAM0W,kBApY6C,KA6YzDvR,MAAQ,CACXC,iBAAkB,WACd,IAAMlR,EAAa,EAAK4B,MAAM7B,UAAUC,WAClC0b,EAAc,EAAK9Z,MAAMlC,SAASI,SAASE,GAAYoC,OACvDqC,EAAc,EAAK7C,MAAM7B,UAAUU,kBACzC,EAAK4K,SAAShM,EAAW2E,qBAAsB,CAC3CxB,IAAKxC,EACL+D,OAAO,2BACA2X,GADD,IAIF7a,SAAU4D,EAAY5D,SACtBE,YAAa0D,EAAY1D,YACzB7B,UAAWuF,EAAYvF,UACvB8B,QAASyD,EAAYzD,QACrBC,WAAYwD,EAAYxD,WACxBC,WAAYuD,EAAYvD,eAGhC,EAAKmK,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,OAChE,EAAKsL,MAAM0W,kBAja6C,KA+azDtZ,QAAU,CACbgM,gBAAiB,SAACvC,GACd,IAAMzJ,EAAU,EAAKtH,MAAM7B,UAAUoB,oBACrC,EAAK2K,MAAM0R,aAAX,2BAA6B,EAAK5b,MAAM7B,WAAxC,IAAmDoB,oBAAqB+H,MAE5E6N,aAAc,SAACjS,EAAsBD,EAAkBE,GACnD,IAAMmE,EAAU,EAAKtH,MAAM7B,UAAUoB,oBAC/ByD,EAAYsE,EAAQtE,UACpBO,GAAS+D,EAAQjE,OAAOL,GAAWM,MAAMJ,GAAcD,GAAUE,GACvE,EAAKsG,SAAShM,EAAWsF,sBAAuB,CAAEC,YAAWE,eAAcD,WAAUE,WAAUI,WAEnGiP,OAAQ,WAGJ,IAAMjT,EAAsB,EAAKS,MAAM7B,UAAUoB,oBAC3C6D,EAAS7D,EAAoB8D,OAC7BL,EAAYzD,EAAoByD,UAChCgO,EAAgB5N,EAAOJ,GACvBiO,EAAmB1R,EAAoB0R,iBACvC3N,EAAQ0N,EAAc1N,MAC5B0N,EAAcG,KAAd,aAAyBH,EAAcG,MAEvCH,EAAcG,KAAK1Q,OACfwQ,EAAmB,EAAG,EACtB,CAAEV,IAAK9U,EAAiB0W,KAAMnD,QAAQ,EAAO2C,QAAQ,IAEzDrO,EAAMI,SAAQ,SAACke,GACXA,EAAKnhB,OACDwQ,EAAmB,EAAG,EAAG,EAAC,OAGlCD,EAAcK,KAAK5Q,OACflB,EAAoB0R,iBAAmB,EAAG,EAAG,GAEjD7N,EAAOJ,GAAagO,EAEpB,EAAKvH,SAAShM,EAAWkF,qBAAsB,CAAEpD,yBAErDkT,OAAQ,WAGJ,IAAMlT,EAAsB,EAAKS,MAAM7B,UAAUoB,oBAC3C6D,EAAS7D,EAAoB8D,OAC7BL,EAAYzD,EAAoByD,UAChCgO,EAAgB5N,EAAOJ,GACvBiO,EAAmB1R,EAAoB0R,iBACvC3N,EAAQ0N,EAAc1N,MAC5B0N,EAAcG,KAAd,aAAyBH,EAAcG,MAEvCH,EAAcG,KAAK1Q,OAAOwQ,EAAkB,GAC5C3N,EAAMI,SAAQ,SAACke,GACXA,EAAKnhB,OAAOwQ,EAAkB,MAElCD,EAAcK,KAAK5Q,OAAOwQ,EAAkB,GAC5C7N,EAAOJ,GAAagO,EAEhBC,EAAmB,GACnB1R,EAAoB0R,mBAExB,EAAKxH,SAAShM,EAAWkF,qBAAsB,CAAEpD,yBAErDsiB,eAAgB,SAACvnB,GACb,IAAMiF,EAAsB,EAAKS,MAAM7B,UAAUoB,oBACjDA,EAAoB0R,iBAAmB3W,EACvC,EAAKkX,mBAAmBjS,IAE5BuiB,eAAgB,WAEZ,OAD4B,EAAK9hB,MAAM7B,UAAUoB,oBACtB0R,kBAE/B8Q,kBAAmB,SAACxN,GAChB,IAAMjN,EAAU,EAAKtH,MAAM7B,UAAUoB,oBACrC+H,EAAQsL,eAAiB2B,EACzBjN,EAAQjE,OAAOK,SAAQ,SAACwP,GACpB,IAAM5P,EAAuB,IAAIxD,MAAmByU,GACpDsJ,QAAQC,IAAI,qBAAQxa,EAAMkC,QAC1B,IAAK,IAAID,EAAI,EAAGA,EAAIjC,EAAMkC,OAAQD,IAAK,CACnCjC,EAAMiC,GAAK,IAAIzF,MAAiBoT,EAAM/B,KAAK3L,QAC3CqY,QAAQC,IAAI,wCACZ,IAAK,IAAI1K,EAAI,EAAGA,EAAI9P,EAAMiC,GAAGC,OAAQ4N,IACjC9P,EAAMiC,GAAG6N,GAAK,IAAItT,MAAe,GACjCwD,EAAMiC,GAAG6N,GAAG,IAAK,EAGzBF,EAAM5P,MAAQA,KAElB,EAAK4G,MAAM0R,aAAX,2BAA6B,EAAK5b,MAAM7B,WAAxC,IAAmDoB,oBAAqB+H,MAE5E0a,cAAe,WAEX,OAAmC,GADnB,EAAKhiB,MAAM7B,UAAUoB,oBACtB0R,kBAEnBgR,aAAc,WACV,IAAM3a,EAAU,EAAKtH,MAAM7B,UAAUoB,oBAC/B2iB,EAAa5a,EAAQjE,OAAOiE,EAAQtE,WAC1C,OAAOsE,EAAQ2J,kBAAoBiR,EAAW/Q,KAAK3L,OAAS,GAEhE2c,cAAe,WACX,IAAM7a,EAAU,EAAKtH,MAAM7B,UAAUoB,oBACrC,OAAO+H,EAAQjE,OAAOiE,EAAQtE,YAElCof,cAAe,WACX,IAAM9a,EAAU,EAAKtH,MAAM7B,UAAUoB,oBAErC,OADmB+H,EAAQjE,OAAOiE,EAAQtE,WACxBmO,KAAK7J,EAAQ2J,mBAOnCK,kBAAmB,SAACC,GAChB,IAAMjK,EAAU,EAAKtH,MAAM7B,UAAUoB,oBAC/B6D,EAASkE,EAAQjE,OACJD,EAAOkE,EAAQtE,WACvBmO,KAAK7J,EAAQ2J,kBAAoBM,EAC5C,EAAKC,mBAAL,2BAA6BlK,GAA7B,IAAsCjE,OAAQD,MAOlDif,UAAW,SAAC3Q,GACR,IAAMR,EAAa,EAAK5J,QAAQ8a,gBAChClR,EAAWX,IAAMmB,EACjBR,EAAWlC,QAAS,EACpBkC,EAAWS,QAAS,EACpB,EAAKrK,QAAQgK,kBAAkBJ,IAOnCoR,gBAAiB,SAACC,GACd,IAAMjb,EAAU,EAAKtH,MAAM7B,UAAUoB,oBAC/B6D,EAASkE,EAAQjE,OACvBD,EAAOkE,EAAQtE,WAAWqO,KAAK/J,EAAQ2J,kBAAoBsR,EAC3D,EAAK/Q,mBAAL,2BAA6BlK,GAA7B,IAAsCjE,OAAQD,MAOlDof,eAAgB,WACZ,IAAMlb,EAAU,EAAKtH,MAAM7B,UAAUoB,oBAErC,OADmB+H,EAAQjE,OAAOiE,EAAQtE,WACxBqO,KAAK/J,EAAQ2J,mBAOnCqB,aAAc,WACV,MAAO,CACH7W,EAAiB2W,KACjB3W,EAAiB0W,KACjB1W,EAAiByW,MACnBrL,SAAS,EAAKS,QAAQ8a,gBAAgB7R,MAO5CgC,aAAc,WACV,MAAO,CACH9W,EAAiB0W,KACjB1W,EAAiByW,MACnBrL,SAAS,EAAKS,QAAQ8a,gBAAgB7R,MAG5C+F,cAAe,SAAChc,GACZ,IAAMgN,EAAU,EAAKtH,MAAM7B,UAAUoB,oBACrC+H,EAAQtE,UAAY1I,EACpBgN,EAAQ2J,iBAAmB,EAC3B,EAAKO,mBAAmBlK,IAE5BkP,YAAa,SAACiM,GACV,IAAMnb,EAAU,EAAKtH,MAAM7B,UAAUoB,oBACrC+H,EAAQiP,WAAakM,EACrB,EAAKjR,mBAAmBlK,IAE5Bob,WAAY,SAAC3J,GACT,IAAMzR,EAAU,EAAKtH,MAAM7B,UAAUoB,oBACrC+H,EAAQyR,UAAYA,EACpB,EAAKvH,mBAAmBlK,IAG5Bqb,iBAAkB,WACd,IAAMrb,EAAU,EAAKtH,MAAM7B,UAAUoB,oBACrC+H,EAAQtE,UAAiC,GAArBsE,EAAQtE,UAAiB,EAAI,EACjDsE,EAAQ2J,iBAAmB,EAC3B,EAAKO,mBAAmBlK,IAG5B+Q,eAAgB,SAACvV,GAIb,IAHA,IAAMwE,EAAU,EAAKtH,MAAM7B,UAAUoB,oBAC/BqjB,EAAatb,EAAQjE,OACrBA,EAAyB,IAAIvD,MAAM,GAChCyF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAMxB,IALA,IAAMsd,EAAevb,EAAQxE,YAAY0C,OACnCsd,EAAiBF,EAAWrd,GAAG4L,KAAK3L,OACpCud,EAAYH,EAAWrd,GAAGjC,MAC1BA,EAAuB,IAAIxD,MAAM+iB,GAE9BG,EAAI,EAAGA,EAAIH,EAAcG,IAC9B,GAAIA,EAAID,EAAUvd,OACdlC,EAAM0f,GAAKD,EAAUC,OAClB,CACH1f,EAAM0f,GAAK,IAAIljB,MAAMgjB,GACrB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAgBG,IAChC3f,EAAM0f,GAAGC,GAAK,IAAInjB,MAAM,GACxBwD,EAAM0f,GAAGC,GAAG,IAAK,EAI7B5f,EAAOkC,GAAP,2BACOqd,EAAWrd,IADlB,IAEIjC,YAKZ2V,oBAAqB,WACjB,IAAM7a,EAAa,EAAK4B,MAAM7B,UAAUC,WAClC0b,EAAc,EAAK9Z,MAAMlC,SAASI,SAASE,GAAYoC,OACvDqC,EAAc,EAAK7C,MAAM7B,UAAUoB,oBACnC+H,EAAU,GAChBA,EAAQxE,YAAcD,EAAYC,YAClCwE,EAAQjE,OAASR,EAAYQ,OAC7BiE,EAAQiP,WAAa1T,EAAY0T,WACjC,EAAK9M,SAAShM,EAAW2E,qBAAsB,CAC3CxB,IAAKxC,EACL+D,OAAO,2BACA2X,GADD,IAEFxS,cAGR,EAAKmC,SAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,OAChE,EAAKsL,MAAM0W,iBAGfrZ,cAAe,SAACD,GAEZ,IAAI4b,EAAQ,EAUZ,OATA5b,EAAQjE,OAAOK,SAAQ,SAACwP,GACpBA,EAAM5P,MAAMI,SAAQ,SAACke,GACjBA,EAAKle,SAAQ,SAACyf,GACNA,EAAK,IACLD,aAKTA,GAuGXlK,KAAM,SAACoK,GAIH,IAFA,IAAMC,EAAU,EAAKrjB,MAAM7B,UAAUqB,eAC/BK,EAAyBC,MAAM,IAC5ByF,EAAI,EAAGA,EAAI,GAAIA,IACpB1F,EAAa0F,GAAK,EAGtB,EAAK2E,MAAM0R,aAAX,2BACO,EAAK5b,MAAM7B,WADlB,IAEII,SAAU5C,EAAS4hB,QAAS/d,eAAgB6jB,KAMhD,IAJA,IAAIC,EAAY,EACVllB,EAAa,EAAK4B,MAAM7B,UAAUC,WAClCF,EAAW,EAAK8B,MAAMlC,SAASI,SAC/BqlB,GAAU,IAAIC,MAAOC,UAfH,WAgBfle,GACL,IAAMhD,EAAOrE,EAASqH,GAItB8d,EAAQnqB,KACJ0f,YAAW,WACP,GAAIwK,GAAW,CAACrnB,EAAgBmK,MAAOnK,EAAgBqF,OAAOyF,SAAStE,EAAKrC,MAAO,OAM3EqC,EAAKrC,MAAQnE,EAAgBqF,MACzB,CAACzF,EAAS6C,OAAQJ,GAAc,CAACzC,EAAS4hB,QAAShY,GAPoB,mBAKxEhH,EALwE,KAK9DmlB,EAL8D,KAQ/E,EAAKxZ,MAAM0R,aAAX,2BAA6B,EAAK5b,MAAM7B,WAAxC,IAAmDC,WAAYslB,EAAMnlB,iBAE1E+kB,IAEH/gB,EAAKrC,MAAQnE,EAAgBmK,OAAQ,WACrC,IAAM1F,EAAS+B,EAAK/B,OAEduF,EAAQ,EAAK/F,MAAM7B,UAAUE,UAAUkH,GACvC9B,EAAoB,eAASD,EAAgBhD,EAAOlD,YACnC,MAAnBkD,EAAOvB,UAA0C,MAAtBuB,EAAOrB,aAClC2F,EAAarB,EAAQjD,EAAOvB,SAASC,UAAWsB,EAAOrB,YAAYD,WAEvE,IAAMmG,EAAS,OAAG5B,QAAH,IAAGA,OAAH,EAAGA,EAAQ4B,UACpBse,EAAS,EAAK3jB,MAAM7B,UAAUoB,oBAC9B+H,EAA0B8b,EAC1B5iB,EAAO8G,QAD6B,CAAEjE,OAAQsgB,EAAOtgB,OAAQP,YAAa6gB,EAAO7gB,YAAayT,WAAYoN,EAAOpN,YAEjH7W,EAAU,EAAKM,MAAMN,QACrBsB,EAAQ+E,EAAMO,KAAKtF,MAEnB4iB,EAAQ,IAAQ5iB,EAAQ,EACxB6iB,EAAQ,IAAQ7iB,GAASR,EAAOpB,QAAUoB,EAAOnB,WAAamB,EAAOlB,YACrEwkB,EAAgBF,EAAQ,GAGzBR,GACDC,EAAQnqB,KACJ0f,YAAW,WACP,EAAK1O,MAAM0R,aAAX,2BAA6B,EAAK5b,MAAM7B,WAAxC,IAAmDI,SAAU5C,EAAS6C,YAEvE8kB,EAAYO,IAGvB,IA5BoC,eA4B3Bte,GACL,IAAIwe,EAAS,EACP7Q,EAAQ5L,EAAQjE,OAAOkC,GAE7B2N,EAAM/B,KAAKzN,SAAQ,SAAC6N,EAAS6B,GAEzB,IAAM4Q,EAAW/I,OAAO1J,EAAQhB,IAAIzM,WAAWmgB,QAAQ,MAAO,KAC1DC,EAAWN,EAAQI,EACnBzS,EAAQvC,SACRkV,GAAY,KAEhB5c,EAAQxE,YAAYY,SAAQ,SAACyU,EAASnE,GAClCd,EAAM5P,MAAM0Q,GAAGZ,GAAG1P,SAAQ,SAACygB,EAAOxP,GAE9B,GAAIwP,GAA4B,MAAnB3jB,EAAOvB,SAAkB,CAClC,IAAM5B,EAAcmD,EAAOvB,SAASC,UAE9B8Y,GADgBjS,EAAMO,KAAKpF,SAAW7D,GAAe,GACzBgI,EAAU8S,EAAQR,aAAgC,GAAjBQ,EAAQT,OACrEA,EAASvQ,KAAK8Q,MAAMD,EAAa,IAEjC7B,EADOtb,EAAiBmd,EAAa,IACdN,EACvB6K,EAAW,GAAMrP,EAAM7B,KAAK+B,GAAK,GACjCiB,EAAO0P,EAASG,EAAW,EAAIvP,EAC/ByP,EAAQ9c,EAAQiP,WAIlBsN,EAAQC,EAFRzP,EAAO6P,EAILG,GAAM,IAAIb,MAAOC,UAAYF,EACnCF,EAAQnqB,KACJ0f,YAAW,WACPlZ,EAAQiZ,cAAcxC,EAAe,KAAMoM,GAC3C1iB,EAAamY,OACdsL,EAAYjP,EAAOgQ,IAE1BhB,EAAQnqB,KACJ0f,YAAW,WACP/Y,EAAamY,KACmB,GAA5BnY,EAAamY,IACbtY,EAAQmZ,eAAe1C,KAE5BmN,EAAYc,EAAOC,WAKtCN,GAAUG,MA/CT3e,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAkDT+d,GAAaO,EA9EwB,IAnBpCte,EAAInH,EAAYmH,GAAK6d,EAAUllB,EAASsH,OAASpH,EAAa,GAAImH,IAAM,EAAxEA,KAvyBb+e,KAAK7D,aAAeA,EACpB6D,KAAKtkB,MAAQA,EACbskB,KAAK7a,SAAW,SAACvJ,EAAkBC,GAAnB,OAAoCsgB,EAAa,CAAEvgB,OAAMC,cCmJ3EokB,I,MAAkB,SACpBvrB,GAQA,IAAM8Q,EAAa9Q,EAAMwrB,WAAaxrB,EAAMyrB,aAC5C,OACI,wBACIprB,UAAWyQ,EAAa,SAAW,GACnCvQ,QAAS,WACAuQ,IACD9Q,EAAM0rB,aAAa1rB,EAAMyrB,cACzBzrB,EAAM2rB,eALlB,SASK3rB,EAAMS,SAMbmrB,GAAW,SACb5rB,GAQAgB,qBAAU,WACFhB,EAAMI,WACNJ,EAAM6rB,YAAY,MAEvB,CAAC7rB,EAAMI,YACV,IAAM0rB,EAAS9rB,EAAM+rB,WAAWvf,OAChC,OACI,sBAAKnM,UAAW,CAAC,OAAQL,EAAMI,UAAY,UAAY,IAAIE,KAAK,KAAhE,UACI,iCAAON,EAAMqI,MAAb,OACA,uBACIhI,UAAW,CACNL,EAAMI,WAAuB,GAAV0rB,EAA2B,GAAb,YACjC9rB,EAAMI,YAAc0rB,EAAS,GAAKA,EAAS,IAAM,QAAU,GAC3D9rB,EAAMI,WAAc4rB,GAAUhsB,EAAM+rB,YAAsB,GAAR,OACrDzrB,KAAK,KACP4G,KAAMlH,EAAMisB,OAAS,WAAa,OAClCrhB,MAAO5K,EAAM+rB,WACblS,SAAU,SAACvH,GAAD,OAAOtS,EAAM6rB,YAAYvZ,EAAE0H,OAAOpP,cAMtDohB,GAAY,SAAC9H,GAEf,SADAA,EAAc,MAAPA,EAAe,GAAKA,GACnBgI,MAAM,sBAOHC,GA1OI,WAEf,IAAMxb,EAAMC,iBAAO,IAFE,EAIa/P,mBAAuC,SAJpD,mBAId2qB,EAJc,KAIHE,EAJG,OAKS9e,qBAAWC,IAAjC7F,EALa,EAKbA,MAAO8F,EALM,EAKNA,WALM,EAMWjM,mBAAS,IANpB,mBAMdurB,EANc,KAMJC,EANI,OAOWxrB,mBAAS,IAPpB,mBAOdyrB,EAPc,KAOJC,EAPI,OAQiB1rB,mBAAS,IAR1B,mBAQd2rB,EARc,KAQDC,EARC,OASS5rB,mBAAS,KATlB,mBASd0kB,EATc,KASLC,EATK,OAUO3kB,oBAAS,GAVhB,mBAUd6rB,EAVc,KAULC,EAVK,OAYW9rB,oBAAS,GAZpB,mBAYd+rB,EAZc,KAYHC,EAZG,KA4BrB,OAAQ,qCACJ,qBAAK5rB,GAAG,OAAR,SAAe,wDACf,sBAAKA,GAAG,cAAc0P,IAAKA,EAA3B,UACI,qBAAKtQ,UAAU,QAAf,SACI,iEAEJ,sBAAKA,UAAU,OAAf,UACI,cAAC,GAAD,CACIorB,aAAa,QACbhrB,KAAK,QAAQ+qB,UAAWA,EACxBE,aAAcA,EACdC,WAAY,kBAAMnG,EAAW,OAEjC,cAAC,GAAD,CACIiG,aAAa,QACbhrB,KAAK,QAAQ+qB,UAAWA,EACxBE,aAAcA,EACdC,WAAY,kBAAMnG,EAAW,OAEjC,cAAC,GAAD,CACIiG,aAAa,SACbhrB,KAAK,iBAAiB+qB,UAAWA,EACjCE,aAAcA,EACdC,WAAY,kBAAMnG,EAAW,UAGrC,sBAAKnlB,UAAU,OAAf,UACI,cAAC,GAAD,CACIgI,MAAM,YACN0jB,WAAYK,EACZP,YAAaQ,EACbJ,QAAQ,EACR7rB,WAAY,CAAC,QAAS,UAAUyN,SAAS2d,KAE7C,cAAC,GAAD,CACInjB,MAAM,WACN0jB,WAAYO,EACZT,YAAaU,EACbN,QAAQ,EACR7rB,WAAY,CAAC,QAAS,UAAUyN,SAAS2d,KAE7C,cAAC,GAAD,CACInjB,MAAM,mBACN0jB,WAAYS,EACZX,YAAaY,EACbR,QAAQ,EACR7rB,WAAY,CAAC,UAAUyN,SAAS2d,QAGxC,qBAAKnrB,UAAU,UAAf,SACI,sBAAMA,UAAWqsB,EAAU,QAAU,GAArC,SAA0CnH,MAE9C,qBACIllB,UAAW,CAAC,MAnEH,WACjB,OAAQmrB,GACJ,IAAK,QAAS,OAAO,EACrB,IAAK,QACD,MAAmB,IAAZY,GAAkBA,EAAS5f,OAAS,GAAK4f,EAAS5f,OAAS,KAAOwf,GAAUI,IACnE,IAAZE,GAAkBA,EAAS9f,OAAS,GAAK8f,EAAS9f,OAAS,KAAOwf,GAAUM,GAEpF,IAAK,SACD,OAAOF,EAAS5f,OAAS,GAAK4f,EAAS5f,OAAS,KAAOwf,GAAUI,IAC7DE,EAAS9f,OAAS,GAAK8f,EAAS9f,OAAS,KAAOwf,GAAUM,IAC1DE,EAAYhgB,OAAS,GAAKggB,EAAYhgB,OAAS,KAAOwf,GAAUQ,IAyDhDM,IAAkBF,EAAa,UAAY,IAAItsB,KAAK,KAD5E,SAGI,wBACIC,QAAS,WAEL,IAAMoE,EAAQ,SAAC1D,EAAYR,GACvBkQ,EAAIE,QAAQ2B,MAAMwL,QAAU,IAC5B4B,YAAW,WACP9S,EAAW4a,eAAX,2BACO1gB,EAAMrC,OADb,IAEIC,SAAS,EACT3D,KACAR,YAEL,MAKP,OAHAosB,GAAW,GACXF,GAAS,GACTnH,EAAW,wBACHgG,GACJ,IAAK,QACD7mB,GAAO,EAAG,SACVkoB,GAAW,GAEX,MACJ,IAAK,QAED5hB,EAAsB,SAAD,+CAAmDmhB,EAAnD,6BAAgFE,EAAhF,MAChBjG,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF3B,QAAQC,IAAI0B,EAAQha,QACJga,EAAQha,OAAS,EAE7B7H,EAAM6hB,EAAQ,GAAGvlB,GAAIulB,EAAQ,GAAG/lB,OAEhCksB,GAAS,GACTnH,EAAW,yEAEfqH,GAAW,MAEdpG,OAAM,SAAAC,GACH7B,QAAQC,IAAI4B,EAAQ,wCACpBmG,GAAW,MAGnB,MACJ,IAAK,SAED,GAAIP,GAAYE,EAAa,CACzBG,GAAS,GACTnH,EAAW,uCACXqH,GAAW,GACX,MAGJ,wBAAC,+BAAArO,EAAA,sEACwBvT,EAAsB,SAAD,6DAAiEmhB,EAAjE,MAD7C,cACO9F,EADP,gBAEuBA,EAASC,OAFhC,UAEOC,EAFP,OAGG3B,QAAQC,IAAInZ,KAAKC,UAAU4a,EAAQ,GAAG/J,QACtB+J,EAAQ,GAAG/J,IAAM,GAJpC,iBAMOkQ,GAAS,GACTnH,EAAW,2CAPlB,yCASwBva,EAAsB,SAAD,uDAA2DmhB,EAA3D,eAA0EE,EAA1E,OAT7C,eASOhG,EATP,iBAUuBA,EAASC,OAVhC,QAUOC,EAVP,OAWOhB,EAAW,IACX0B,MAAM,6CACNwE,EAAa,SAbpB,QAeGmB,GAAW,GAfd,2CAAD,KAvDhB,4BCrDDE,I,MA/BG,SACd/sB,GAEE,IAAD,EACuC4M,qBAAWC,IAA3C7F,EADP,EACOA,MAAOyJ,EADd,EACcA,SAAU3D,EADxB,EACwBA,WACzB,OACI,sBAAK7L,GAAG,aAAaZ,UAAW,CAAC,IAAIC,KAAK,KAA1C,UACI,qBAAKD,UAAU,YAAf,SACI,+BAAO2G,EAAMrC,MAAMlE,SAEvB,qBACIJ,UAAU,SAEVE,QAAS,WACLuM,EAAWoE,MAAMwC,YAAjB,2BACO1M,EAAMlC,UADb,IAEII,SAAU,MAEd4H,EAAW4a,eAAX,2BACO1gB,EAAMrC,OADb,IAEIC,SAAS,EACTnE,KAAM,MAEVgQ,EAAShM,EAAW4C,gBAAiB,CAAE/F,MAAO,KAbtD,SAeI,iDCVHuL,GAAgB0S,wBAAc,IAuD5ByN,GArDG,WAAO,IAAD,EAEUC,qBAAWlmB,EAASrC,GAF9B,mBAEbsC,EAFa,KAENygB,EAFM,KAGdhX,EAAW,SAACyc,EAAwB/lB,GAAzB,OAA0CsgB,EAAa,CAAEvgB,KAAMgmB,EAAY/lB,QAASA,KAC/F2F,EAAa,IAAI0a,GAAWxgB,EAAOygB,GACzC,OACI,qBACIxmB,GAAG,aACHksB,SAAU,IACVC,UAAW,SAAC9a,GAAD,OCnBe,SAACA,EAAkBtL,EAAcyJ,EAAoB3D,GAGvF,GAA2B,GAAvB9F,EAAMnC,cAAV,CAIA,IAAMO,EAAa4B,EAAM7B,UAAUC,WAC7BG,EAAWyB,EAAM7B,UAAUI,SAC3BP,EAAYgC,EAAMlC,SAASE,UAC3BqoB,EAAermB,EAAMlC,SAASI,SAASE,GACvCkoB,EAAgBtmB,EAAM7B,UAAUE,UAAUD,GAEhD,OAAQioB,EAAanmB,MACjB,KAAKnE,EAAgB2E,QAGjB,OAFe2lB,EAAa7lB,OAEpBR,EAAM7B,UAAUQ,eACpB,KAAKrD,EAAcsD,KAEf,GAAIL,GAAY5C,EAAS6C,OACrB,OAAQ8M,EAAErP,KACN,IAAK,IACD6J,EAAWoE,MAAM4C,oBAM7B,MACJ,KAAKxR,EAAcigB,gBACf,OAAQjQ,EAAErP,KACN,IAAK,SACL,IAAK,IACDwN,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAO3E,MACJ,KAAK7C,EAAgB0L,OAGjB,OAFe4e,EAAa7lB,OAEpBR,EAAM7B,UAAUQ,eACpB,KAAKrD,EAAcsD,KAEf,GAAIL,GAAY5C,EAAS6C,OACrB,OAAQ8M,EAAErP,KACN,IAAK,IACD6J,EAAWoE,MAAM6C,mBAM7B,MACJ,KAAKzR,EAAc+hB,eACf,OAAQ/R,EAAErP,KACN,IAAK,SACL,IAAK,IACDwN,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,QAO3E,MACJ,KAAK7C,EAAgBmK,MACjB,IAAM1F,EAAS6lB,EAAa7lB,OAE5B,OAAQR,EAAM7B,UAAUQ,eACpB,KAAKrD,EAAcsD,KAEf,GAAIL,GAAY5C,EAAS6C,OACrB,OAAQ8M,EAAErP,KACN,IAAK,IACD6J,EAAWoE,MAAMyC,oBAEjB,MACJ,IAAK,IACsB,MAAnBnM,EAAOvB,UACP6G,EAAWoE,MAAM0C,oBAGrB,MACJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,GAAI5O,GAAatC,EAAW8L,OAAQ,MACpC,IACM+e,GADwC,SAA5BD,EAAchgB,KAAKnF,MAAmB/D,EAA4BI,GACpDyd,OAAO3P,EAAErP,KAAO,GAIhDuE,EAAOvB,SAAW,CAACC,UAAWqnB,EAAclpB,YAAaE,OAAQgpB,EAAchpB,QAC/EiD,EAAOlD,UAAYipB,EAAcjpB,UACjCwI,EAAWoE,MAAMwC,YAAY1M,EAAMlC,UACnCgI,EAAWoE,MAAM0W,gBAEjB,MACJ,IAAK,IACD9a,EAAWoE,MAAM2C,cAEjB,MACJ,IAAK,IACDzI,MAAM,qCAAsC,CAExCE,KAAM,OACNC,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBT,IAAK,2CAGRkb,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAA9c,GACFsb,QAAQC,IAAInZ,KAAKC,UAAUrC,OAE9Bkd,OAAM,SAAAC,GACH7B,QAAQC,IAAI4B,EAAQ,2CAG5B,MACJ,IAAK,IACDtb,MAAM,qCAAsC,CAExCE,KAAM,OACNC,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAEjBT,IAAI,2CAAD,OAA6C/F,EAA7C,cAA6DuG,KAAKC,UAAUpE,GAA5E,UAIX,MACJ,IAAK,IACDsF,EAAWwB,QAAQ0R,MAAK,QAI7B,GAAIza,GAAY5C,EAASsP,QAE5B,OAAQK,EAAErP,KACN,IAAK,SACL,IAAK,IACD6J,EAAWoE,MAAM4W,kBAEjB,MACJ,IAAK,QACD,IAAM5iB,EAAW8B,EAAMlC,SAASI,SAC1BsoB,EAAetoB,EAAS8B,EAAM7B,UAAUG,eAAekC,OAAuB8G,QACpFtH,EAAM7B,UAAUM,aAAaiF,SAAQ,SAACpJ,GACjC4D,EAAS5D,GAAOkG,OAAuB8G,QAAU3C,KAAKyb,MAAMzb,KAAKC,UAAU4hB,OAEhF1gB,EAAWoE,MAAMwC,YAAjB,2BAAkC1M,EAAMlC,UAAxC,IAAkDI,cAClD4H,EAAWoE,MAAM4W,kBACjBhb,EAAWoE,MAAM2W,iBAM7B,MACJ,KAAKvlB,EAAc8O,cACf,OAAQkB,EAAErP,KACN,IAAK,SACL,IAAK,IACDwN,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,OAC3D,MAUJ,IAAK,QACDkH,EAAWuJ,MAAMC,mBAKzB,MACJ,KAAKhU,EAAcod,gBACf,IAAMpR,EAAUtH,EAAM7B,UAAUoB,oBAC1BwZ,EAAYzR,EAAQyR,UAC1B,OAAQzN,EAAErP,KACN,IAAK,SACL,IAAK,IACDwN,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAcsD,OAC3D,MACJ,IAAK,YACD,IAAKkH,EAAWwB,QAAQ0a,gBAAiB,CACrC,IAAM1c,EAAMQ,EAAWwB,QAAQwa,iBAC/Bhc,EAAWwB,QAAQua,eAAevc,EAAM,GAG5C,MACJ,IAAK,aACD,IAAKQ,EAAWwB,QAAQ2a,eAAgB,CACpC,IAAM3c,EAAMQ,EAAWwB,QAAQwa,iBAC/Bhc,EAAWwB,QAAQua,eAAevc,EAAM,GAG5C,MACJ,IAAK,UACD,IAAM8L,EAAYtL,EAAWwB,QAAQkb,iBACjCpR,EAAY,IACZtL,EAAWwB,QAAQgb,gBAAgBlR,EAAY,GAGnD,MACJ,IAAK,YACD,IAAMA,EAAYtL,EAAWwB,QAAQkb,iBACjCpR,EAAY,GACZtL,EAAWwB,QAAQgb,gBAAgBlR,EAAY,GAGnD,MACJ,IAAK,IACDtL,EAAWwB,QAAQqb,mBAEnB,MACJ,IAAK,IAAK7c,EAAWwB,QAAQ+a,UAAU5mB,EAAiBwW,OAAQ,MAChE,IAAK,IAAKnM,EAAWwB,QAAQ+a,UAAU5mB,EAAiByW,MAAO,MAC/D,IAAK,IAAKpM,EAAWwB,QAAQ+a,UAAU5mB,EAAiB0W,MAAO,MAC/D,IAAK,IAAKrM,EAAWwB,QAAQ+a,UAAU5mB,EAAiB2W,MAAO,MAC/D,IAAK,IAAKtM,EAAWwB,QAAQ+a,UAAU5mB,EAAiB4W,MAAO,MAC/D,IAAK,IACD,GAAIvM,EAAWwB,QAAQgL,eAAgB,CACnC,IAAMpB,EAAapL,EAAWwB,QAAQ8a,gBACtClR,EAAWlC,QAAUkC,EAAWlC,OAChCkC,EAAWS,QAAS,EACpB7L,EAAWwB,QAAQgK,kBAAkBJ,GAGzC,MACJ,IAAK,IACD,GAAIpL,EAAWwB,QAAQiL,eAAgB,CACnC,IAAMrB,EAAapL,EAAWwB,QAAQ8a,gBACtClR,EAAWS,QAAUT,EAAWS,OAChCT,EAAWlC,QAAS,EACpBlJ,EAAWwB,QAAQgK,kBAAkBJ,GAGzC,MACJ,IAAK,IACDpL,EAAWwB,QAAQkL,SAEnB,MACJ,IAAK,SACG1M,EAAWwB,QAAQ6a,gBAAgBhR,KAAK3L,OAAS,GACjDM,EAAWwB,QAAQmL,SAGvB,MAEJ,IAAK,IACGsG,GACAjT,EAAWwB,QAAQ0R,MAAK,GAG5B,MAEJ,IAAK,QACGD,GACAjT,EAAWwB,QAAQ2R,sBAGvB,MAEJ,IAAK,IACD,IAAM7V,EAAwB,CAC1BmT,WAAYjP,EAAQiP,WACpBlT,OAAQiE,EAAQjE,OAChBP,YAAawE,EAAQxE,aAEzBod,MAAMvb,KAAKC,UAAUxB,MAW7C,GAAIpD,EAAM7B,UAAUQ,eAAiBrD,EAAcsD,MAC/C,CAAC7C,EAAgBmK,MAAOnK,EAAgB2E,QAAS3E,EAAgB0L,QAAQZ,SAASwf,EAAanmB,MAC/F,GAAI3B,GAAY5C,EAAS6C,OACrB,OAAQ8M,EAAErP,KACN,IAAK,YACD6J,EAAWoE,MAAMmX,uBAEjB,MACJ,IAAK,aACDvb,EAAWoE,MAAMoX,mBAEjB,MACJ,IAAK,UACDxb,EAAWoE,MAAMqX,uBAEjB,MACJ,IAAK,YACDzb,EAAWoE,MAAMsX,mBAEjB,MACJ,IAAK,SACD1b,EAAWoE,MAAM8C,mBAEjB,MACJ,IAAK,IACDlH,EAAWoE,MAAMuX,mBAEjB,MACJ,IAAK,IACD3b,EAAWoE,MAAMC,kBACjB,MACJ,IAAK,IACDrE,EAAWoE,MAAMsC,oBACjB,MACJ,IAAK,IACD1G,EAAWoE,MAAMuC,mBACjB,MACJ,IAAK,IACD,IAAMjM,EAAS6lB,EAAa7lB,OAC5BiJ,EAAShM,EAAWwE,eAAgB,CAAEjC,MAAO1E,EAAc8O,gBAC3DX,EAAShM,EAAWyE,qBAAsB,CACtCC,OAAO,2BACAnC,EAAM7B,UAAUU,mBADjB,IAEFI,SAAUuB,EAAOvB,SACjBE,YAAaqB,EAAOrB,YAGpB7B,UAAWkD,EAAOlD,UAClB8B,QAASoB,EAAOpB,iBAM7B,GAAIb,GAAY5C,EAAS4hB,QAE5B,OAAQjS,EAAErP,KACN,IAAK,IACe+D,EAAM7B,UAAUqB,eACxBkE,SAAQ,SAAC+iB,GACbC,cAAcD,MAElB3gB,EAAWoE,MAAM0R,aAAjB,2BACO5b,EAAM7B,WADb,IAEIqB,eAAgB,GAAIjB,SAAU5C,EAAS6C,UAE3CwB,EAAMN,QAAQinB,eDjWWC,CAAuBtb,EAAGtL,EAAOyJ,EAAU3D,IAHhF,SAKI,cAACD,GAAcqT,SAAf,CAAwBtV,MAAO,CAAE5D,QAAOyJ,WAAU3D,cAAlD,SAES9F,EAAMrC,MAAMC,QAGT,qCACI,cAAC,GAAD,IACA,cAAC,EAAD,CAAY1D,UAAU,cAClBC,YAAa,CACT,CAAEV,KAAM,UAAWc,SAAS,EAAMZ,KAAM,yBACxC,CAAEF,KAAM,UAAWc,SAAS,EAAMZ,KAAM,yBACxC,CAAEF,KAAM,QAASc,SAAS,EAAOZ,KAAM,cAAC,GAAD,KACvC,CAAEF,KAAM,UAAWc,SAAS,EAAMZ,KAAM,yBACxC,CAAEF,KAAM,SAAUc,SAAS,EAAMZ,KAAM,yBACvC,CAAEF,KAAM,UAAWc,SAAS,EAAMZ,KAAM,yBACxC,CAAEF,KAAM,UAAWc,SAAS,EAAMZ,KAAM,0BAE5CG,SAAU,OAdlB,cAAC,GAAD,SERT+sB,OAlBf,WAaE,OAZA7sB,qBAAU,WAER8sB,SAASC,cAAgB,WAAc,OAAO,GAE9CC,OAAOC,iBAAiB,WAAW,SAAU3b,GAEvC,CAAC,GAAI,GAAI,GAAI,GAAI,IAAI4b,QAAQ5b,EAAE6b,UAAY,GAC7C7b,EAAE8b,oBAEH,KAEF,IAED,cAAC,GAAD,KCVWC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlI,MAAK,YAAkD,IAA/CmI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFjB,SAASkB,eAAe,SAM1BX,Q","file":"static/js/main.44b45092.chunk.js","sourcesContent":["import { ChangeType } from \"contents/redux/store\";\r\n\r\nexport const DEGREE12_FLAT_LIST = [\r\n    'Ⅰ', 'bⅡ', 'Ⅱ', 'bⅢ', 'Ⅲ', 'Ⅳ', 'bⅤ', 'Ⅴ', 'bⅥ', 'Ⅵ', 'bⅦ', 'Ⅶ'\r\n];\r\nexport const DEGREE12_SHARP_LIST = [\r\n    'Ⅰ', '#Ⅰ', 'Ⅱ', '#Ⅱ', 'Ⅲ', 'Ⅳ', '#Ⅳ', 'Ⅴ', '#Ⅴ', 'Ⅵ', '#Ⅵ', 'Ⅶ'\r\n];\r\n\r\nexport const KEY12_FLAT_LIST = [\r\n    'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'\r\n];\r\nexport const KEY12_SHARP_LIST = [\r\n    'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'\r\n];\r\nexport const KEY12_MAJOR_SCALE_LIST = [\r\n    'C', 'Db', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab', 'A', 'Bb', 'B'\r\n];\r\nexport const KEY12_MINOR_SCALE_LIST = [\r\n    'Cm', 'C#m', 'Dm', 'D#m', 'Em', 'Fm', 'F#m', 'Gm', 'G#m', 'Am', 'Bbm', 'Bm'\r\n];\r\nexport const SCALE_LIST = [\r\n    'major', 'minor'\r\n];\r\nexport const RYTHM_LIST = [\r\n    '4/4', '2/4', '3/4', '6/8', '12/8'\r\n];\r\n\r\nexport enum TimeSignatures {\r\n    BEAT_4ON4 = '4/4',\r\n    BEAT_2ON4 = '2/4',\r\n    BEAT_3ON4 = '3/4',\r\n    BEAT_6ON8 = '6/8',\r\n    BEAT_12ON8 = '12/8',\r\n}\r\n\r\nexport type KeyScaleParams = {\r\n    keyIndex: number;\r\n    signature: number;\r\n}\r\n\r\nexport enum KeyScale {\r\n    C_DUR = '0',\r\n    DES_DUR = '1',\r\n};\r\n\r\nexport const DIATONIC_MAJOR_SCALE_DEGREE_NAMES = [\r\n    'Ⅰ', 'Ⅰmaj7',\r\n    'Ⅱm', 'Ⅱm7',\r\n    'Ⅲm', 'Ⅲm7',\r\n    'Ⅳ', 'Ⅳmaj7',\r\n    'Ⅴ', 'Ⅴ7',\r\n    'Ⅵm', 'Ⅵm7',\r\n    'Ⅶm(-5)', 'Ⅶm7(-5)'\r\n]\r\n\r\nexport const DIATONIC_NATURAL_MINOR_SCALE_DEGREE_NAMES = [\r\n    'Ⅰm', 'Ⅰm7',\r\n    'Ⅱm(-5)', 'Ⅱm7(-5)',\r\n    'bⅢ', 'bⅢM7',\r\n    'Ⅳm', 'Ⅳm7',\r\n    'Ⅴm', 'Ⅴm7',\r\n    'bⅥ', 'bⅥM7',\r\n    'bⅦ', 'bⅦ7'\r\n]\r\nexport enum SymbolKey {\r\n    MAJOR,\r\n    MINOR,\r\n    SUS4,\r\n    DIM,\r\n    AUG,\r\n    MAJ7,\r\n    SEVENTH,\r\n    MIN7,\r\n    MINOR_MAJ7,\r\n    ADD9,\r\n    MINOR_ADD9,\r\n    SIXTH_9TH,\r\n    MINOR_MINUS5,\r\n}\r\n\r\nexport enum SymbolType {\r\n    TRIAD,\r\n    TETRAD7TH,\r\n    TETRAD9TH,\r\n    OTHER,\r\n}\r\n\r\nexport type SymbolParams = {\r\n    key: SymbolKey;\r\n    category: SymbolType;\r\n    name: string;\r\n    struct: string[];\r\n    intervals: number[];\r\n}\r\n\r\n// export const SYMBOL_PARAMS_LIST: SymbolParams[] = [\r\n//     { key: SymbolKey.MAJOR, category: SymbolType.TRIAD, sortNo: 1, \"parentNo\": 0, \"depth\": 1, \"name\": \"\", \"struct\": ['p1', 'M3', 'p5'], \"fixed\": ['p1'], \"intervals\": [0, 4, 7] },\r\n//     { key: SymbolKey.MINOR, category: SymbolType.TRIAD, sortNo: 2, \"parentNo\": 0, \"depth\": 1, \"name\": \"m\", \"struct\": ['p1', 'm3', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 7] },\r\n//     { key: SymbolKey.SUS4, category: SymbolType.TRIAD, sortNo: 3, \"parentNo\": 0, \"depth\": 1, \"name\": \"sus4\", \"struct\": ['p1', 'p4', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 5, 7] },\r\n//     { key: SymbolKey.DIM, category: SymbolType.TRIAD, sortNo: 4, \"parentNo\": 0, \"depth\": 1, \"name\": \"dim\", \"struct\": ['p1', 'm3', 'd5'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 6] },\r\n//     { key: SymbolKey.AUG, category: SymbolType.TRIAD, sortNo: 5, \"parentNo\": 0, \"depth\": 1, \"name\": \"aug\", \"struct\": ['p1', 'M3', 'a5'], \"fixed\": [\"p1\"], \"intervals\": [0, 4, 8] },\r\n//     { key: SymbolKey.MAJ7, category: SymbolType.TETRAD7TH, sortNo: 6, \"parentNo\": 0, \"depth\": 1, \"name\": \"maj7\", \"struct\": ['p1', 'M3', 'p5', 'M7'], \"fixed\": [\"p1\"], \"intervals\": [0, 4, 7, 11] },\r\n//     { key: SymbolKey.SEVENTH, category: SymbolType.TETRAD7TH, sortNo: 7, \"parentNo\": 0, \"depth\": 1, \"name\": \"7\", \"struct\": ['p1', 'M3', 'p5', 'm7'], \"fixed\": [\"p1\"], \"intervals\": [0, 4, 7, 10] },\r\n//     { key: SymbolKey.MIN7, category: SymbolType.TETRAD7TH, sortNo: 8, \"parentNo\": 0, \"depth\": 1, \"name\": \"m7\", \"struct\": ['p1', 'm3', 'p5', 'm7'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 7, 10] },\r\n//     { key: SymbolKey.MINOR_MAJ7, category: SymbolType.TETRAD7TH, sortNo: 9, \"parentNo\": 0, \"depth\": 1, \"name\": \"mmaj7\", \"struct\": ['p1', 'm3', 'p5', 'M7'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 7, 11] },\r\n//     { key: SymbolKey.ADD9, category: SymbolType.TETRAD9TH, sortNo: 10, \"parentNo\": 0, \"depth\": 1, \"name\": \"add9\", \"struct\": ['p1', 'M2', 'M3', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 2, 4, 7] },\r\n//     { key: SymbolKey.MINOR_ADD9, category: SymbolType.TETRAD9TH, sortNo: 11, \"parentNo\": 0, \"depth\": 1, \"name\": \"madd9\", \"struct\": ['p1', 'M2', 'm3', 'p5'], \"fixed\": [\"p1\"], \"intervals\": [0, 2, 3, 7] },\r\n//     { key: SymbolKey.SIXTH_9TH, category: SymbolType.OTHER, sortNo: 12, \"parentNo\": 0, \"depth\": 1, \"name\": \"6(9)\", \"struct\": ['p1', 'M2', 'M3', 'p5', 'M6'], \"fixed\": [\"p1\"], \"intervals\": [0, 2, 4, 7, 9] },\r\n//     { key: SymbolKey.MINOR_MINUS5, category: SymbolType.TRIAD, sortNo: 13, \"parentNo\": 0, \"depth\": 1, \"name\": \"m(-5)\", \"struct\": ['p1', 'm3', 'd5'], \"fixed\": [\"p1\"], \"intervals\": [0, 3, 6] },\r\n// ];\r\n\r\nexport const SYMBOL_PARAMS_LIST: SymbolParams[] = [\r\n    { key: SymbolKey.MAJOR, category: SymbolType.TRIAD, name: \"\", \"struct\": ['p1', 'M3', 'p5'], \"intervals\": [0, 4, 7] },\r\n    { key: SymbolKey.MINOR, category: SymbolType.TRIAD, name: \"m\", \"struct\": ['p1', 'm3', 'p5'], \"intervals\": [0, 3, 7] },\r\n    { key: SymbolKey.SUS4, category: SymbolType.TRIAD, name: \"sus4\", \"struct\": ['p1', 'p4', 'p5'], \"intervals\": [0, 5, 7] },\r\n    { key: SymbolKey.DIM, category: SymbolType.TRIAD, name: \"dim\", \"struct\": ['p1', 'm3', 'd5'], \"intervals\": [0, 3, 6] },\r\n    { key: SymbolKey.AUG, category: SymbolType.TRIAD, name: \"aug\", \"struct\": ['p1', 'M3', 'a5'], \"intervals\": [0, 4, 8] },\r\n    { key: SymbolKey.MAJ7, category: SymbolType.TETRAD7TH, name: \"maj7\", \"struct\": ['p1', 'M3', 'p5', 'M7'], \"intervals\": [0, 4, 7, 11] },\r\n    { key: SymbolKey.SEVENTH, category: SymbolType.TETRAD7TH, name: \"7\", \"struct\": ['p1', 'M3', 'p5', 'm7'], \"intervals\": [0, 4, 7, 10] },\r\n    { key: SymbolKey.MIN7, category: SymbolType.TETRAD7TH, name: \"m7\", \"struct\": ['p1', 'm3', 'p5', 'm7'], \"intervals\": [0, 3, 7, 10] },\r\n    { key: SymbolKey.MINOR_MAJ7, category: SymbolType.TETRAD7TH, name: \"mmaj7\", \"struct\": ['p1', 'm3', 'p5', 'M7'], \"intervals\": [0, 3, 7, 11] },\r\n    { key: SymbolKey.ADD9, category: SymbolType.TETRAD9TH, name: \"add9\", \"struct\": ['p1', 'M2', 'M3', 'p5'], \"intervals\": [0, 2, 4, 7] },\r\n    { key: SymbolKey.MINOR_ADD9, category: SymbolType.TETRAD9TH, name: \"madd9\", \"struct\": ['p1', 'M2', 'm3', 'p5'], \"intervals\": [0, 2, 3, 7] },\r\n    { key: SymbolKey.SIXTH_9TH, category: SymbolType.OTHER, name: \"6(9)\", \"struct\": ['p1', 'M2', 'M3', 'p5', 'M6'], \"intervals\": [0, 2, 4, 7, 9] },\r\n    { key: SymbolKey.MINOR_MINUS5, category: SymbolType.TRIAD, name: \"m(-5)\", \"struct\": ['p1', 'm3', 'd5'], \"intervals\": [0, 3, 6] },\r\n];\r\n\r\nexport type SymbolTypeParams = {\r\n    type: SymbolType;\r\n    list: SymbolKey[];\r\n}\r\nexport const SYMBOL_TYPE_LIST: SymbolTypeParams[] = [\r\n    {\r\n        type: SymbolType.TRIAD, list: [\r\n            SymbolKey.MAJOR,\r\n            SymbolKey.MINOR,\r\n            SymbolKey.SUS4,\r\n            SymbolKey.DIM,\r\n            SymbolKey.AUG,\r\n            SymbolKey.MINOR_MINUS5\r\n        ]\r\n    },\r\n    {\r\n        type: SymbolType.TETRAD7TH, list: [\r\n            SymbolKey.MAJ7,\r\n            SymbolKey.SEVENTH,\r\n            SymbolKey.MINOR_MAJ7,\r\n        ]\r\n    },\r\n    {\r\n        type: SymbolType.TETRAD9TH, list: [\r\n            SymbolKey.ADD9,\r\n            SymbolKey.MINOR_ADD9,\r\n        ]\r\n    },\r\n];\r\n\r\nexport type ChordPair = {\r\n    degreeIndex: number;\r\n    symbolKey: SymbolKey;\r\n    isFlat: boolean;\r\n}\r\nexport const DIATONIC_MAJOR_SCALE_LIST: ChordPair[] = [\r\n    { degreeIndex: 0, symbolKey: SymbolKey.MAJOR, isFlat: false},\r\n    { degreeIndex: 2, symbolKey: SymbolKey.MINOR, isFlat: false },\r\n    { degreeIndex: 4, symbolKey: SymbolKey.MINOR, isFlat: false },\r\n    { degreeIndex: 5, symbolKey: SymbolKey.MAJOR, isFlat: false },\r\n    { degreeIndex: 7, symbolKey: SymbolKey.MAJOR, isFlat: false },\r\n    { degreeIndex: 9, symbolKey: SymbolKey.MINOR, isFlat: false },\r\n    { degreeIndex: 11, symbolKey: SymbolKey.MINOR_MINUS5, isFlat: false },\r\n];\r\n\r\nexport const DIATONIC_MINOR_SCALE_LIST: ChordPair[] = [\r\n    { degreeIndex: 0, symbolKey: SymbolKey.MINOR, isFlat: false },\r\n    { degreeIndex: 2, symbolKey: SymbolKey.MINOR_MINUS5, isFlat: false },\r\n    { degreeIndex: 3, symbolKey: SymbolKey.MAJOR, isFlat: true },\r\n    { degreeIndex: 5, symbolKey: SymbolKey.MINOR, isFlat: false },\r\n    { degreeIndex: 7, symbolKey: SymbolKey.MINOR, isFlat: false },\r\n    { degreeIndex: 8, symbolKey: SymbolKey.MAJOR, isFlat: true },\r\n    { degreeIndex: 10, symbolKey: SymbolKey.MAJOR, isFlat: true },\r\n];\r\n\r\nexport const getChangeTypeLabel = (changeType: ChangeType) => {\r\n    switch(changeType) {\r\n        case ChangeType.MODULATE: return 'MODULATE';\r\n        case ChangeType.TEMPO: return 'TEMPO';\r\n        case ChangeType.BEAT: return 'BEAT';\r\n    }\r\n}\r\n\r\nexport const API_DOMAIN = 'https://vh-sqlite.glitch.me';\r\n// export const API_DOMAIN = 'http://localhost:5000';","import { useState, useEffect } from 'react';\r\n\r\nimport './TabbedPane.css';\r\n\r\ntype TabbedPaneProps = {\r\n    groupName: string;\r\n    activeNo: number;\r\n    tabElements: TabElements[];\r\n    selectTabIndex?: Function;\r\n}\r\n\r\ntype TabElements = {\r\n    name: string;\r\n    disable: boolean;\r\n    cont: JSX.Element;\r\n}\r\n\r\nconst TabbedPane = (props: TabbedPaneProps) => {\r\n    const [activeNo, setActiveNo] = useState(props.activeNo);\r\n\r\n    // const [tabList, setTabList] = useState<JSX.Element[]>([]);\r\n    // const [contList, setContList] = useState<JSX.Element[]>([]);\r\n\r\n    // タブ押下時の処理\r\n    const selectTabIndex = (index: number) => {\r\n        if (props.selectTabIndex !== undefined) {\r\n            props.selectTabIndex(index);\r\n        } else {\r\n            setActiveNo(index);\r\n        }\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     const tabList: JSX.Element[] = [];\r\n    //     const contList: JSX.Element[] = [];\r\n    //     props.tabElements.forEach((tab, index) => {\r\n    //         tabList.push(\r\n    //             <TabLabel\r\n    //                 key={index} name={tab.name} isActive={index == activeNo} isDisable={tab.disable}\r\n    //                 selectTab={() => selectTabIndex(index)}\r\n    //             />)\r\n    //             ;\r\n    //         contList.push(\r\n    //             <TabContents key={index} cont={tab.cont} isActive={index == activeNo} />\r\n    //         );\r\n    //     });\r\n    //     setTabList(tabList);\r\n    //     setContList(contList);\r\n    //     console.log('create TabbedPane');\r\n    // }, [activeNo]);\r\n\r\n    useEffect(() => {\r\n        setActiveNo(props.activeNo);\r\n    }, [props.activeNo]);\r\n\r\n    return (\r\n        <div id={props.groupName}>\r\n            <div className=\"tab-list\">\r\n                {/* {tabList} */}\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <TabLabel\r\n                            key={index} name={tab.name} isActive={index == activeNo} isDisable={tab.disable}\r\n                            selectTab={() => selectTabIndex(index)}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n            <div className=\"cont-list\">\r\n                {/* {contList} */}\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <TabContents key={index} cont={tab.cont} isActive={index == activeNo} />\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst TabLabel = (props: {\r\n    name: string;\r\n    isActive: boolean;\r\n    isDisable: boolean;\r\n    selectTab: Function;\r\n}) => {\r\n    const classValues = [];\r\n    classValues.push('tab-menu');\r\n    classValues.push(props.isActive ? 'active' : '');\r\n    classValues.push(props.isDisable ? 'tab-disable' : '');\r\n    return (\r\n        <div className={classValues.join(' ')} onClick={() => props.selectTab()}>\r\n            <span>{props.name}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst TabContents = (props: {\r\n    isActive: boolean;\r\n    cont: JSX.Element;\r\n}) => {\r\n    return (\r\n        <div className={[\r\n            'tab-cont',\r\n            props.isActive ? '' : 'hidden'].join(' ')}\r\n        >\r\n            {props.cont}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabbedPane;","import { SymbolKey, SYMBOL_PARAMS_LIST, TimeSignatures } from 'contents/common/define'\r\nimport { Sampler } from 'tone'\r\nimport { ActionType } from './reducer'\r\n\r\nexport type Store = {\r\n    login: LoginParams;\r\n    scoreTabIndex: number;\r\n    noteData: NoteData;\r\n    noteState: NoteState;\r\n    reffers: Reffers;\r\n    sampler: Sampler;\r\n    soundUseList: number[];\r\n}\r\n\r\nexport type LoginParams = {\r\n    isLogin: boolean,\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nexport type ScoreCache = {\r\n    reffer?: HTMLDivElement;\r\n    init: DetailInit;\r\n    progress: ScoreProgress;\r\n}\r\n\r\n/**\r\n * 譜面の進捗情報を管理するタイプ。\r\n */\r\n export type ScoreProgress = {\r\n    /** 連番 */\r\n    no: number;\r\n    /** 小節の合計 */\r\n    barCount: number;\r\n    /** 余りの拍 */\r\n    remaindBeat: number;\r\n    /** 小節頭が訪れる時間（ミリ秒） */\r\n    headMSec: number;\r\n}\r\n\r\nexport type Reffers = {\r\n    contextMneu: HTMLDivElement;\r\n    chordPalette: HTMLDivElement;\r\n    sectionPalette: HTMLDivElement;\r\n    changePalette: HTMLDivElement;\r\n    initPalette: HTMLDivElement;\r\n    backingPalette: HTMLDivElement;\r\n}\r\n\r\nexport enum FloatWndState {\r\n    NONE,\r\n    CONTEXT_MENU,\r\n    CHORD_PALETTE,\r\n    SECTION_PALETTE,\r\n    CHANGE_PALETTE,\r\n    INIT_PALETTE,\r\n    BACKING_PALETTE,\r\n    SETTING_EDITOR,\r\n}\r\nexport type ChordPaletteState = {\r\n    isAddition: boolean;\r\n    selectedLine: ChordPaletteLine,\r\n    // rootIndex: number;\r\n    // isFlat: false;\r\n    molecule: Key12Info;\r\n    denominator: Key12Info | null;\r\n    symbolKey: SymbolKey;\r\n    sustain: number;\r\n    headAdjust: number;\r\n    tailAdjust: number;\r\n}\r\nexport enum ChordPaletteLine {\r\n    Root, Symbol, Sustain, Adjuster\r\n}\r\n\r\nexport type BackingEditorState = {\r\n    molecule: Key12Info;\r\n    denominator: Key12Info | null;\r\n    symbolKey: SymbolKey;\r\n    sustain: number;\r\n    headAdjust: number;\r\n    tailAdjust: number;\r\n    channelRowSize: number;\r\n    useChannels: ChannelParam[];\r\n    layers: BackingLayer[];\r\n    isUsePedal: boolean;\r\n    selectedLenIndex: number;\r\n    sideIndex: number;\r\n    selectedChannelIndex: number;\r\n    isCorrect: boolean;\r\n}\r\nexport type ChannelParam = {\r\n    octave: number;\r\n    structIndex: number;\r\n}\r\nexport type BackingLayer = {\r\n    side: BACKING_SIDE;\r\n    lens: BackingLen[];\r\n    table: boolean[][][];\r\n    vels: number[];\r\n}\r\nexport enum BACKING_SIDE {\r\n    LEFT = 'LEFT',\r\n    RIGHT = 'RIGHT'\r\n}\r\n\r\nexport type BackingLen = {\r\n    len: BACKING_LEN_TYPE;\r\n    isHalf: boolean;\r\n    isDiv3: boolean;\r\n}\r\n\r\nexport enum BACKING_LEN_TYPE {\r\n    LEN16 = 'LEN16',\r\n    LEN8 = 'LEN8',\r\n    LEN4 = 'LEN4',\r\n    LEN2 = 'LEN2',\r\n    LEN1 = 'LEN1',\r\n}\r\n\r\n\r\nexport type NoteData = {\r\n    scoreName: string;\r\n    chordMode: CHORD_MODE;\r\n    dataList: NoteElement[];\r\n}\r\n\r\n/**\r\n * 譜面の入力モードを定義\r\n */\r\nexport enum CHORD_MODE {\r\n    /** 音階コード入力 */\r\n    SCALE = 'SCALE',\r\n    /** 直接コード入力 */\r\n    DIRECT = 'DIRECT'\r\n}\r\n\r\nexport type NoteState = {\r\n    focusIndex: number;\r\n    cacheList: ScoreCache[];\r\n    criteriaIndex: number;\r\n    editMode: EditMode;\r\n    selectedList: number[];\r\n    defaultSustain: number;\r\n    floatwndState: FloatWndState;\r\n    chordPaletteState: ChordPaletteState;\r\n    backingPaletteState: null | BackingEditorState;\r\n    backingThreads: NodeJS.Timeout[];\r\n}\r\n\r\nexport enum EditMode {\r\n    NORMAL,\r\n    BACKING,\r\n    PREVIEW,\r\n}\r\n\r\nexport type DetailInit = {\r\n    tempo: number;\r\n    rythm: string;\r\n    keyIndex: number;\r\n    scale: string;\r\n}\r\n\r\nexport type DetailSection = {\r\n    labelName: string;\r\n}\r\n\r\nexport type DetailChord = {\r\n    molecule: Key12Info | null;\r\n    denominator: Key12Info | null;\r\n    symbolKey: SymbolKey;\r\n    sustain: number;\r\n    headAdjust: number;\r\n    tailAdjust: number;\r\n    backing: BackingScript;\r\n}\r\n\r\nexport type Key12Info = {\r\n    rootIndex: number;\r\n    isFlat: boolean;\r\n}\r\n\r\nexport type BackingScript = {\r\n    useChannels: ChannelParam[];\r\n    layers: BackingLayer[];\r\n    isUsePedal: boolean;\r\n}\r\n\r\nexport type DetailFixed = {\r\n    label: string;\r\n}\r\n\r\nexport type DetailChange = {\r\n    changeType: null | ChangeType;\r\n    modulateRelation: null | ModulateRelation;\r\n    domminantValue: number;\r\n    keyAdjust: number;\r\n    tempoRelation: null | TempoRelation;\r\n    tempoDiff: number;\r\n    tempoRate: number;\r\n    tempoAbsolute: number;\r\n    beat: null | TimeSignatures;\r\n}\r\n\r\nexport enum ChangeType {\r\n    MODULATE = 'Modulate',\r\n    TEMPO = 'Tempo',\r\n    BEAT = 'Beat'\r\n}\r\n\r\n// export type ChangeModulation = {\r\n//     relation: ModulateRelation;\r\n//     value: number;\r\n// }\r\n\r\nexport enum ModulateRelation {\r\n    DOMINANT = 'Domminant',\r\n    PARALLEL = 'Parallel',\r\n    RELATIVE = 'Relative',\r\n    KEY = 'Key',\r\n}\r\n\r\n// export type ChangeBeat = {\r\n//     value: number;\r\n// }\r\n\r\n// export type ChangeTempo = {\r\n//     relation: TempoRelation;\r\n//     value: number;\r\n// }\r\n\r\nexport enum TempoRelation {\r\n    DIFF = 'Diff',\r\n    RATE = 'Rate',\r\n    ABSOLUTE = 'Absolute'\r\n}\r\n\r\nexport type NoteElement = {\r\n    type: TypeNoteElement;\r\n    detail: DetailInit | DetailSection | DetailChord | DetailChange | DetailFixed;\r\n}\r\n\r\n/**\r\n * ノート要素の種類を定義します。\r\n */\r\nexport enum TypeNoteElement {\r\n    /** 初期値 */\r\n    Init = 'init',\r\n    /** セクション */\r\n    Section = 'section',\r\n    /** コード */\r\n    Chord = 'chord',\r\n    /** 転調 */\r\n    Change = 'Change',\r\n    /** 固定要素 */\r\n    Fixed = 'fixed'\r\n}\r\n\r\n/**\r\n * ディスパッチメソッドに指定するオブジェクトを定義します。\r\n */\r\nexport type Action = {\r\n    type: ActionType;\r\n    payload: any;\r\n}\r\n\r\n/**\r\n * ステートの初期値\r\n */\r\nexport const initialState: Store = {\r\n    login: {\r\n        isLogin: false,\r\n        id: -1,\r\n        name: ''\r\n    },\r\n    scoreTabIndex: 0,\r\n    noteData: { scoreName: '', chordMode: CHORD_MODE.SCALE, dataList: [] },\r\n    noteState: {\r\n        focusIndex: -1,\r\n        cacheList: [],\r\n        criteriaIndex: -1,\r\n        editMode: EditMode.NORMAL,\r\n        selectedList: [],\r\n        defaultSustain: 2,\r\n        floatwndState: FloatWndState.NONE,\r\n        chordPaletteState: {\r\n            isAddition: false,\r\n            selectedLine: ChordPaletteLine.Root,\r\n            // rootIndex: 0,\r\n            // isFlat: false,\r\n            molecule: {rootIndex: 0, isFlat: false},\r\n            denominator: null,\r\n            symbolKey: SYMBOL_PARAMS_LIST[0].key,\r\n            sustain: 4,\r\n            headAdjust: 0,\r\n            tailAdjust: 0\r\n        },\r\n        backingPaletteState: null,\r\n        // {\r\n        //     channelRowSize: 1,\r\n        //     useChannels: [],\r\n        //     isUsePedal: false,\r\n        //     sideIndex: 0,\r\n        //     selectedLenIndex: 0,\r\n        //     selectedChannelIndex: -1,\r\n        //     layers: [],\r\n        //     isCorrect: true\r\n        // },\r\n        backingThreads: []\r\n    },\r\n    reffers: {} as Reffers,\r\n    sampler: initSampler(),\r\n    soundUseList: new Array(88)\r\n};\r\n\r\nfunction initSampler() {\r\n    return new Sampler({\r\n        \"E2\": \"https://dl.dropbox.com/s/0aghs80w9aggubw/KEPSREC040.mp3?dl=0\",\r\n        \"E3\": \"https://dl.dropbox.com/s/wxtf0u0ly03hu44/KEPSREC052.mp3?dl=0\",\r\n        \"A#3\": \"https://dl.dropbox.com/s/hbm9d1vo5tlxymk/KEPSREC058.mp3?dl=0\",\r\n        \"E4\": \"https://dl.dropbox.com/s/3qy88udfkzmzr13/KEPSREC064.mp3?dl=0\",\r\n        \"E5\": \"https://dl.dropbox.com/s/tdjp24r9pfoi2ff/KEPSREC076.mp3?dl=0\",\r\n        \"E6\": \"https://dl.dropbox.com/s/onp7h2vn2d6nhs7/KEPSREC088.mp3?dl=0\",\r\n    }).toDestination();\r\n}","\r\nimport { Store, Action, TypeNoteElement, DetailChord, DetailSection, BackingLayer, BACKING_SIDE, ChannelParam, BACKING_LEN_TYPE, ScoreCache, BackingEditorState } from './store'\r\n\r\n/**\r\n * ディスパッチメソッドの処理種別を定義します。\r\n */\r\nexport enum ActionType {\r\n    SET_LOGIN,\r\n    SELECT_SCORETAB,\r\n    ADD_SECTION,\r\n    SET_DEGREE_INDEX,\r\n    SET_SYMBOL_KEY,\r\n    DETAIL_PARAMS_SETTER,\r\n    GET_ELEMENT_REFFER,\r\n    INIT_DEFAULT_ELEMENTS,\r\n    SELECT_NOTE_ELEMENT,\r\n    GET_REFFER,\r\n    GET_REFFER_CONTEXT,\r\n    GET_REFFER_CHORD_PALETTE,\r\n    GET_REFFER_SECTION_PALETTE,\r\n    GET_REFFER_BACKING_PALETTE,\r\n    FLOATWND_STATE,\r\n    CHORD_PALETTE_SETTER,\r\n    SET_NOTE_DATA,\r\n    SET_DATA_LIST,\r\n    SET_NOTE_STATE,\r\n    INIT_BACKING_PALETTE,\r\n    SET_USE_CHANNELS,\r\n    BACKING_TOGGLE_MATRIX\r\n}\r\n\r\nexport const reducer = (state: Store, action: Action): Store => {\r\n    const type: ActionType = action.type;\r\n    const payload: any = action.payload;\r\n    switch (type) {\r\n        case ActionType.SET_LOGIN:\r\n            return { ...state, login: payload.login };\r\n        case ActionType.SELECT_SCORETAB:\r\n            return { ...state, scoreTabIndex: payload.index };\r\n        case ActionType.ADD_SECTION: {\r\n            const dataList = state.noteData.dataList.slice();\r\n            const detail = {} as DetailSection;\r\n            detail.labelName = 'Section';\r\n            dataList.splice(payload.index + 1, 0, {\r\n                type: TypeNoteElement.Section,\r\n                detail: detail\r\n            });\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SET_DEGREE_INDEX: {\r\n            const detail = state.noteData.dataList[payload.pos].detail as DetailChord;\r\n            if(detail.molecule == null) {\r\n                detail.molecule = {rootIndex: payload.degreeIndex, isFlat: false};\r\n            } else {\r\n                detail.molecule.rootIndex = payload.degreeIndex;\r\n            }\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: state.noteData.dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SET_SYMBOL_KEY: {\r\n            const detail = state.noteData.dataList[payload.pos].detail as DetailChord;\r\n            detail.symbolKey = payload.symbolKey;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: state.noteData.dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.INIT_DEFAULT_ELEMENTS: {\r\n            // const dataList = state.noteData.dataList;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: [\r\n                        {\r\n                            type: TypeNoteElement.Init,\r\n                            detail: {\r\n                                tempo: 80,\r\n                                rythm: '4/4',\r\n                                keyIndex: 0,\r\n                                scale: 'major'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: TypeNoteElement.Fixed,\r\n                            detail: {\r\n                                label: 'START'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: TypeNoteElement.Section,\r\n                            detail: {\r\n                                labelName: 'Section'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: TypeNoteElement.Fixed,\r\n                            detail: {\r\n                                label: 'END'\r\n                            }\r\n                        },\r\n                    ]\r\n                },\r\n                noteState: {\r\n                    ...state.noteState, cacheList: [{} as ScoreCache, {} as ScoreCache, {} as ScoreCache, {} as ScoreCache]\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SELECT_NOTE_ELEMENT: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, focusIndex: payload.index\r\n                }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_CONTEXT: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, contextMneu: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_CHORD_PALETTE: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, chordPalette: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_SECTION_PALETTE: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, sectionPalette: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER_BACKING_PALETTE: {\r\n            return {\r\n                ...state, reffers: { ...state.reffers, backingPalette: payload.reffer }\r\n            };\r\n        }\r\n        case ActionType.FLOATWND_STATE: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, floatwndState: payload.state\r\n                }\r\n            };\r\n        }\r\n        case ActionType.CHORD_PALETTE_SETTER: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, chordPaletteState: payload.params\r\n                }\r\n            };\r\n        }\r\n        case ActionType.DETAIL_PARAMS_SETTER: {\r\n            const dataList = state.noteData.dataList.slice();\r\n            const data = dataList[payload.pos];\r\n            data.detail = payload.params;\r\n            return {\r\n                ...state, noteData: {\r\n                    ...state.noteData, dataList: dataList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.GET_REFFER: {\r\n            return {\r\n                ...state, reffers: payload.reffers\r\n            };\r\n        }\r\n        case ActionType.SET_NOTE_DATA: {\r\n            return {\r\n                ...state, noteData: payload.data\r\n            };\r\n        }\r\n        case ActionType.SET_DATA_LIST: {\r\n            return {\r\n                ...state, noteData: { ...state.noteData, dataList: payload.dataList }\r\n            };\r\n        }\r\n        case ActionType.SET_NOTE_STATE: {\r\n            return {\r\n                ...state, noteState: payload.noteState\r\n            };\r\n        }\r\n        case ActionType.GET_ELEMENT_REFFER: {\r\n            const cache = state.noteState.cacheList[payload.pos];\r\n            cache.reffer = payload.reffer;\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, cacheList: state.noteState.cacheList\r\n                }\r\n            };\r\n        }\r\n        case ActionType.INIT_BACKING_PALETTE: {\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, backingPaletteState: payload.backingPaletteState\r\n                }\r\n            };\r\n        }\r\n        case ActionType.SET_USE_CHANNELS: {\r\n            const editorState = state.noteState.backingPaletteState as BackingEditorState;\r\n            // const baseScript = backingPaletteState.layers;\r\n            const useChannels = payload.useChannels as ChannelParam[];\r\n            // const script: BackingLayer[] = new Array(2);\r\n            // for (let i = 0; i < 2; i++) {\r\n            //     const channelCount = backingPaletteState.useChannels.length;\r\n            //     const lensSplitCount = baseScript[i].lens.length;\r\n            //     const baseTable = baseScript[i].table;\r\n            //     const table: boolean[][][] = new Array(channelCount);\r\n\r\n            //     for (let y = 0; y < channelCount; y++) {\r\n            //         if (y < baseTable.length) {\r\n            //             table[y] = baseTable[y];\r\n            //         } else {\r\n            //             table[y] = new Array(lensSplitCount);\r\n            //             for (let x = 0; x < lensSplitCount; x++) {\r\n            //                 table[y][x] = new Array(1);\r\n            //                 table[y][x][0] = false;\r\n            //             }\r\n            //         }\r\n            //     }\r\n            //     script[i] = {\r\n            //         ...baseScript[i],\r\n            //         table,\r\n            //     };\r\n            // }\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, backingPaletteState: {\r\n                        ...editorState,\r\n                        useChannels,\r\n                        // layers: script\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        case ActionType.BACKING_TOGGLE_MATRIX: {\r\n            const editorState = state.noteState.backingPaletteState as BackingEditorState;\r\n            const sideIndex: number = payload.sideIndex;\r\n            const lenIndex: number = payload.lenIndex;\r\n            const channelIndex: number = payload.channelIndex;\r\n            const divIndex: number = payload.divIndex;\r\n            const script = editorState.layers;\r\n            script[sideIndex].table[channelIndex][lenIndex][divIndex] = payload.isUse;\r\n            // script[sideIndex].table[channelIndex] = line;\r\n            return {\r\n                ...state, noteState: {\r\n                    ...state.noteState, backingPaletteState: {\r\n                        ...editorState, layers: script\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n","import { Key12Info } from \"contents/redux/store\";\r\nimport { API_DOMAIN, KEY12_FLAT_LIST, KEY12_SHARP_LIST, SymbolKey, SymbolParams, SYMBOL_PARAMS_LIST } from \"./define\";\r\n\r\nexport function getSymbolParams(key: SymbolKey): SymbolParams | null {\r\n    let symbol = null;\r\n    SYMBOL_PARAMS_LIST.forEach((data) => {\r\n        if (data.key == key) {\r\n            symbol = data;\r\n        }\r\n    });\r\n    return symbol;\r\n}\r\n\r\nexport const getAdjustSusValue = (value: number): string => {\r\n    let ret = '';\r\n    if (value != 0) {\r\n        if (value > 0) ret = '+' + value;\r\n        else ret = value.toString();\r\n    }\r\n    return ret;\r\n}\r\n\r\n/**　コードネームを返す */\r\nexport const getChordRoot = (rootInfo: Key12Info | null, keyIndex: number): string | null => {\r\n    let name = null;\r\n    if (rootInfo != null) {\r\n        const list = rootInfo.isFlat ? KEY12_FLAT_LIST : KEY12_SHARP_LIST;\r\n        name = list[(rootInfo.rootIndex + keyIndex) % 12];\r\n    }\r\n    return name;\r\n}\r\n\r\n/**　シンボルを返す */\r\nexport const getSymbolName = (symbolKey: SymbolKey): string => {\r\n    let name = '';\r\n    SYMBOL_PARAMS_LIST.forEach((symbol) => {\r\n        if (symbol.key == symbolKey) {\r\n            name = symbol.name;\r\n        }\r\n    });\r\n    return name;\r\n}\r\n\r\nexport const createQueryRequestInit = (sql: string): RequestInit => {\r\n    return {\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ sql })\r\n    }\r\n}\r\n\r\nexport const sendQueryRequestToAPI = (queryType: 'select' | 'update', sql: string): Promise<Response> => {\r\n    return fetch(API_DOMAIN + '/' + queryType,\r\n        createQueryRequestInit(sql)\r\n    );\r\n}\r\n\r\nexport const applyOnChord = (symbol: SymbolParams, molRootIndex: number, denRootIndex: number) => {\r\n\r\n    // 分母とコードルートの差分を算出\r\n    let denInterval = denRootIndex - molRootIndex;\r\n    if (denInterval < 0) {\r\n        denInterval += 12;\r\n    }\r\n    const fixedIntervals: number[] = [];\r\n    const fixedStruct: string[] = [];\r\n    let isAdded = false;\r\n    symbol.intervals.forEach((cur, i) => {\r\n        if (i < symbol.intervals.length) {\r\n            // const next = symbol.intervals[i + 1];\r\n            // if(cur <= denInterval && denInterval < next) {\r\n            if (!isAdded && denInterval < cur) {\r\n                fixedIntervals.push(denInterval);\r\n                fixedStruct.push('den');\r\n                isAdded = true;\r\n            }\r\n            if (denInterval != cur) {\r\n                fixedIntervals.push(cur);\r\n                fixedStruct.push(symbol.struct[i]);\r\n            }\r\n        }\r\n    });\r\n    if (!isAdded) {\r\n        fixedIntervals.push(denInterval);\r\n        fixedStruct.push('den');\r\n    }\r\n    symbol.intervals = fixedIntervals;\r\n    symbol.struct = fixedStruct;\r\n\r\n}","import { DEGREE12_FLAT_LIST, DEGREE12_SHARP_LIST, DIATONIC_MAJOR_SCALE_DEGREE_NAMES, DIATONIC_MINOR_SCALE_LIST, DIATONIC_NATURAL_MINOR_SCALE_DEGREE_NAMES, getChangeTypeLabel, KEY12_FLAT_LIST, KEY12_MAJOR_SCALE_LIST, KEY12_MINOR_SCALE_LIST, KEY12_SHARP_LIST, SCALE_LIST, SymbolKey, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport { getChordRoot, getSymbolName } from \"contents/common/utils\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { DetailChord, DetailFixed, DetailInit, DetailChange, DetailSection, CHORD_MODE, NoteElement, TypeNoteElement, ScoreProgress, Key12Info, ChangeType, ModulateRelation, TempoRelation } from \"contents/redux/store\";\r\nimport { useContext } from \"react\";\r\n\r\ntype ScoreElementDetailProps = {\r\n    index: number;\r\n    noteElement: NoteElement;\r\n}\r\n\r\nconst ScoreElementDetail = (props: ScoreElementDetailProps) => {\r\n\r\n    const { state, dispatcher } = useContext(GlobalContext);\r\n\r\n    const chordMode = state.noteData.chordMode;\r\n    const cache = state.noteState.cacheList[props.index];\r\n\r\n    switch (props.noteElement.type) {\r\n        case TypeNoteElement.Fixed: {\r\n            const detail = props.noteElement.detail as DetailFixed;\r\n            return (\r\n                <span>{detail.label}</span>\r\n            );\r\n        }\r\n        case TypeNoteElement.Init: {\r\n            const detail = props.noteElement.detail as DetailInit;\r\n            const paramLabels: JSX.Element[] = [];\r\n            paramLabels.push(\r\n                <div key={paramLabels.length}>\r\n                    <span>Tempo: </span>\r\n                    <span>{detail.tempo}</span>\r\n                </div>\r\n            );\r\n            paramLabels.push(\r\n                <div key={paramLabels.length}>\r\n                    <span>Beat: </span>\r\n                    <span>{detail.rythm}</span>\r\n                </div>\r\n            );\r\n            if (chordMode == CHORD_MODE.SCALE) {\r\n                paramLabels.push(\r\n                    <div key={paramLabels.length}>\r\n                        <span>Scale: </span>\r\n                        <span>{detail.scale}</span>\r\n                    </div>\r\n                );\r\n                paramLabels.push(\r\n                    <div key={paramLabels.length}>\r\n                        <span>Key: </span>\r\n                        {/* <span>{detail.key}</span> */}\r\n                        <span>{\r\n                            detail.scale == SCALE_LIST[0] ?\r\n                                KEY12_MAJOR_SCALE_LIST[detail.keyIndex] :\r\n                                KEY12_MINOR_SCALE_LIST[detail.keyIndex]\r\n                        }</span>\r\n                    </div>\r\n                );\r\n            }\r\n            return (\r\n                <div>\r\n                    {paramLabels}\r\n                </div>\r\n            );\r\n        }\r\n        case TypeNoteElement.Chord: {\r\n            const detail = props.noteElement.detail as DetailChord;\r\n\r\n            const degreeMolRoot = getDegreeRoot(detail.molecule);\r\n            const degreeDenRoot = getDegreeRoot(detail.denominator);\r\n            const chordMolRoot = getChordRoot(detail.molecule, cache.init.keyIndex);\r\n            const chordDenRoot = getChordRoot(detail.denominator, cache.init.keyIndex);\r\n            let symbolName = '';\r\n            let isDiatonic = false;\r\n            let degreeName = 'blank';\r\n            let chordName = '-';\r\n            if (degreeMolRoot != null) {\r\n                symbolName = getSymbolName(detail.symbolKey);\r\n                const diatonitChordList = cache.init.scale == 'major' ? DIATONIC_MAJOR_SCALE_DEGREE_NAMES : DIATONIC_NATURAL_MINOR_SCALE_DEGREE_NAMES;\r\n                isDiatonic = diatonitChordList.includes(degreeMolRoot + symbolName);\r\n                degreeName = `${degreeMolRoot}${symbolName}${degreeDenRoot == null ? '' : '/' + degreeDenRoot}`;\r\n                chordName = `${chordMolRoot}${symbolName}${chordDenRoot == null ? '' : '/' + chordDenRoot}`;\r\n            }\r\n            const sustainJsx = [];\r\n            for (let i = 0; i < detail.sustain; i++) {\r\n                sustainJsx.push(<span key={i}></span>);\r\n            }\r\n            const barCount = cache.progress.barCount;\r\n            const remaindBeat = cache.progress.remaindBeat;\r\n            const headMSec = Math.round(cache.progress.headMSec / 1000 * 10) / 10;\r\n            // alert(detail.degreeIndex);\r\n            const notesCount = dispatcher.backing.getNotesCount(detail.backing);\r\n            return (\r\n                <>\r\n                    <div className={\r\n                        'degree'\r\n                        + (detail.molecule == null ? ' blank' : '')\r\n                        + (isDiatonic ? ' diatonic' : '')\r\n                        // ダイレクトモード時は非表示\r\n                        + (state.noteData.chordMode == CHORD_MODE.DIRECT ? ' visible' : '')}\r\n                    >\r\n                        <span>{degreeName}</span>\r\n                    </div>\r\n                    <div className={state.noteData.chordMode == CHORD_MODE.DIRECT ? 'degree' : 'chord'}>\r\n                        <span>{chordName}</span>\r\n                    </div>\r\n                    <div className=\"sustain\">\r\n                        {sustainJsx}\r\n                    </div>\r\n                    <div className=\"progress-sustain\">\r\n                        <span className=\"bar\">{barCount != -1 ? barCount : ''}</span>\r\n                        <span className=\"beat\">{remaindBeat != -1 ? remaindBeat : ''}</span>\r\n                    </div>\r\n                    <div className=\"progress-time\">\r\n                        <span>{headMSec}s</span>\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            'backing-script' +\r\n                            (notesCount == 0 ? ' hidden' : '')\r\n                        }\r\n                    >\r\n                        <span>notes: {notesCount}</span>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        case TypeNoteElement.Section: {\r\n            const detail = props.noteElement.detail as DetailSection;\r\n            return (\r\n                <>\r\n                    <div className=\"name\"><span>{detail.labelName}</span></div>\r\n                    <div className=\"border\"></div>\r\n                </>\r\n            );\r\n        }\r\n        case TypeNoteElement.Change: {\r\n            const detail = props.noteElement.detail as DetailChange;\r\n            const prevCache = state.noteState.cacheList[props.index - 1];\r\n            let changeInnerJsx = <></>;\r\n            switch (detail.changeType) {\r\n                case null: {\r\n                    changeInnerJsx = (\r\n                        <>\r\n                            <div className=\"value\">\r\n                                <span>No setting</span>\r\n                            </div>\r\n                            <div className=\"result\">\r\n                                <span>***</span>]\r\n                            </div>\r\n                        </>\r\n                    );\r\n                }\r\n                    break;\r\n                case ChangeType.MODULATE: {\r\n                    const relation = detail.modulateRelation === null ? 'None' : detail.modulateRelation.toString();\r\n                    const isValuable = detail.modulateRelation === ModulateRelation.DOMINANT || detail.modulateRelation === ModulateRelation.KEY;\r\n                    let value = 0;\r\n                    const oldKeyIndex = prevCache.init.keyIndex;\r\n                    const oldIsMinor = prevCache.init.scale == 'minor';\r\n                    const newKeyIndex = cache.init.keyIndex;\r\n                    const newIsMinor = cache.init.scale == 'minor';\r\n                    switch (detail.modulateRelation) {\r\n                        case ModulateRelation.DOMINANT: {\r\n                            value = detail.domminantValue;\r\n                        }\r\n                            break;\r\n                        case ModulateRelation.KEY: {\r\n                            value = detail.keyAdjust;\r\n                        }\r\n                            break;\r\n                        case ModulateRelation.RELATIVE: { } break;\r\n                        case ModulateRelation.PARALLEL: { } break;\r\n                    }\r\n                    const oldKeyName = (!oldIsMinor ? KEY12_MAJOR_SCALE_LIST : KEY12_MINOR_SCALE_LIST)[oldKeyIndex];\r\n                    const newKeyName = (!newIsMinor ? KEY12_MAJOR_SCALE_LIST : KEY12_MINOR_SCALE_LIST)[newKeyIndex];\r\n                    changeInnerJsx = (\r\n                        <>\r\n                            <div className=\"value\">\r\n                                <span>{relation + (isValuable ? ': ' : '')}</span>\r\n                                {isValuable ? (<span>{value}</span>) : <></>}\r\n                            </div>\r\n                            <div className=\"result\">\r\n                                <span>{oldKeyName} → {newKeyName}</span>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                }\r\n                    break;\r\n                case ChangeType.TEMPO: {\r\n                    const relation = detail.tempoRelation === null ? 'None' : detail.tempoRelation.toString();\r\n                    let value = 0;\r\n                    const oldTempo = prevCache.init.tempo;\r\n                    const newTempo = cache.init.tempo;\r\n                    switch (detail.tempoRelation) {\r\n                        case TempoRelation.DIFF: {\r\n                            value = detail.tempoDiff;\r\n                        }\r\n                            break;\r\n                        case TempoRelation.RATE: {\r\n                            value = detail.tempoRate;\r\n                        }\r\n                            break;\r\n                        case TempoRelation.ABSOLUTE: {\r\n                            value = detail.tempoAbsolute;\r\n                        }\r\n                            break;\r\n                    }\r\n                    changeInnerJsx = (\r\n                        <>\r\n                            <div className=\"value\">\r\n                                <span>{relation + ': '}</span>\r\n                                <span>{value}</span>\r\n                            </div>\r\n                            <div className=\"result\">\r\n                                <span>{`${oldTempo} → ${newTempo}`}</span>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                }\r\n                    break;\r\n                case ChangeType.BEAT: {\r\n                    changeInnerJsx = (\r\n                        <>\r\n                        </>\r\n                    );\r\n                }\r\n                    break;\r\n            }\r\n            if (chordMode == CHORD_MODE.SCALE) {\r\n            }\r\n            return (\r\n                <>\r\n                    <div className=\"change-type\">\r\n                        {/* <span>{detail.changeType === null ? '' : getChangeTypeLabel(detail.changeType)}</span> */}\r\n                        <span>{detail.changeType === null ? 'Change' : detail.changeType.toString()}</span>\r\n                    </div>\r\n                    {changeInnerJsx}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n/**　ディグリーネームを返す */\r\nconst getDegreeRoot = (rootInfo: Key12Info | null): string | null => {\r\n    let name = null;\r\n    if (rootInfo != null) {\r\n        const list = rootInfo.isFlat ? DEGREE12_FLAT_LIST : DEGREE12_SHARP_LIST;\r\n        name = list[rootInfo.rootIndex];\r\n    }\r\n    return name;\r\n}\r\n\r\nexport default ScoreElementDetail;","import { DEGREE12_FLAT_LIST, DEGREE12_SHARP_LIST, DIATONIC_MAJOR_SCALE_DEGREE_NAMES, KEY12_FLAT_LIST, KEY12_MAJOR_SCALE_LIST, KEY12_MINOR_SCALE_LIST, KEY12_SHARP_LIST, SYMBOL_PARAMS_LIST } from 'contents/common/define';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport { TypeNoteElement, DetailFixed, DetailSection, DetailInit, DetailChord, DetailChange, NoteElement, FloatWndState, Store, CHORD_MODE, EditMode } from 'contents/redux/store';\r\nimport React, { useContext, useEffect, useState, KeyboardEvent, useRef, MouseEvent } from 'react';\r\nimport ScoreElementDetail from './detail/ScoreElementDetail';\r\nimport './ScoreElement.css';\r\n\r\ntype ScoreElementProps = {\r\n    index: number;\r\n    noteElement: NoteElement;\r\n}\r\n\r\n// type ScoreElementProps = {\r\n//     index: number;\r\n//     type: TypeNoteElement;\r\n//     progress: ProgressInfo;\r\n// }\r\nconst ScoreElement = (props: ScoreElementProps) => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    const isAccept = props.index < state.noteData.dataList.length;\r\n\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        if (isAccept) {\r\n            dispatch(ActionType.GET_ELEMENT_REFFER, { pos: props.index, reffer: ref.current });\r\n        }\r\n    }, [state.noteData.dataList]);\r\n\r\n    if (!isAccept) {\r\n        return (<></>);\r\n    }\r\n\r\n    const type = props.noteElement.type;\r\n    const editMode = state.noteState.editMode;\r\n    const chordMode = state.noteData.chordMode;\r\n    // const isNormalMode = state.noteState.editMode == EditMode.NORMAL;\r\n    const cache = state.noteState.cacheList[props.index];\r\n\r\n    const getStyleFromType = (): string => {\r\n        switch (type) {\r\n            case TypeNoteElement.Fixed: return 'detail-fixed';\r\n            case TypeNoteElement.Init: return 'detail-init';\r\n            case TypeNoteElement.Chord: return 'detail-chord';\r\n            case TypeNoteElement.Section: return 'detail-section';\r\n            case TypeNoteElement.Change: return 'detail-change';\r\n        }\r\n    };\r\n\r\n    const focusIndex = state.noteState.focusIndex;\r\n    const isSelected = focusIndex == props.index;\r\n    const isCriteria = state.noteState.criteriaIndex == props.index;\r\n    /**\r\n     * 要素が選択中のセクション内かどうかを返す\r\n     * @returns 判定結果\r\n     */\r\n    const isCurrentSection = (): boolean => {\r\n        const dataList = state.noteData.dataList;\r\n        const posList: number[] = [dataList.length];\r\n        let secNo = -1;\r\n        let curSecNo = -1;\r\n        dataList.forEach((el, i) => {\r\n            if (el.type == TypeNoteElement.Section) secNo++;\r\n            posList[i] = secNo;\r\n            if (focusIndex == i) curSecNo = secNo;\r\n        });\r\n        // const isChordEl = dataList[props.index].type == TypeNoteElement.Chord;\r\n        const isCurrentSec = posList[props.index] == curSecNo && type != TypeNoteElement.Fixed;\r\n        return isCurrentSec;\r\n    }\r\n\r\n    /**\r\n * コピー対象スタイルを返す\r\n * @returns コピー対象スタイル\r\n */\r\n    const getCopyTargetStyle = (): string => {\r\n        if (editMode != EditMode.BACKING) return '';\r\n\r\n        if (type == TypeNoteElement.Chord) {\r\n            const detail = props.noteElement.detail as DetailChord;\r\n            const isSameStructType = detail.molecule != null;\r\n            if (isSameStructType) {\r\n                if (state.noteState.selectedList.includes(props.index)) {\r\n                    return 'copy-selected';\r\n                }\r\n                return 'copy-tgt';\r\n            } else {\r\n                return 'copy-no-tgt';\r\n            }\r\n        } else {\r\n            return 'copy-no-tgt';\r\n        }\r\n    }\r\n\r\n    const getHeaderElement = (): JSX.Element => {\r\n        let retJsxList: JSX.Element[] = [];\r\n\r\n        if ([TypeNoteElement.Chord, TypeNoteElement.Section, TypeNoteElement.Change].includes(type)) {\r\n\r\n            if (TypeNoteElement.Chord == type) {\r\n\r\n                retJsxList.push(\r\n                    <div key={retJsxList.length} className=\"chord-no\">\r\n                        <span>{cache.progress.no}</span>\r\n                    </div>\r\n                );\r\n                const isMajor = cache.init.scale == 'major';\r\n                const scaleList = isMajor ? KEY12_MAJOR_SCALE_LIST : KEY12_MINOR_SCALE_LIST;\r\n                const rootKey = scaleList[cache.init.keyIndex];\r\n                // スケールモード時のみ調性を表示\r\n                if (chordMode === CHORD_MODE.SCALE) {\r\n                    retJsxList.push(\r\n                        <div key={retJsxList.length}\r\n                            className={[\r\n                                'scale',\r\n                                isMajor ? 'maj' : 'min'\r\n                            ].join(' ')}>\r\n                            <span>[{rootKey}]</span>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n            retJsxList.push(\r\n                //  <div className=\"edit\">\r\n                //         <span>E</span>\r\n                //     </div> \r\n                <div\r\n                    key={retJsxList.length}\r\n                    className={\r\n                        'del' +\r\n                        (editMode == EditMode.NORMAL ? '' : ' hidden')\r\n                    }\r\n                    onClick={() => {\r\n                        dispatcher.score.deleteElement(props.index);\r\n                    }}\r\n                >\r\n                    <span>×</span>\r\n                </div >\r\n            );\r\n        }\r\n        return (<>\r\n            {retJsxList}\r\n        </>);\r\n    }\r\n\r\n    /**\r\n     * 通常モード時、要素をクリックした際のイベント\r\n     */\r\n    const normalElementClickAction = () => {\r\n        const element: NoteElement = state.noteData.dataList[props.index];\r\n        if (element.type != TypeNoteElement.Fixed) {\r\n            dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: props.index });\r\n        }\r\n    }\r\n    /**\r\n     * セレクタモード時、要素をクリックした際のイベント\r\n     */\r\n    const selectorElementClickAction = () => {\r\n        const selectedList = state.noteState.selectedList;\r\n        if (!selectedList.includes(props.index)) {\r\n            selectedList.push(props.index);\r\n        } else {\r\n            selectedList.some((index, i) => {\r\n                if (index == props.index) selectedList.splice(i, 1);\r\n            });\r\n        }\r\n        dispatcher.score.setSelectedList(selectedList);\r\n    }\r\n\r\n    // 追加「＋」ボタン\r\n    let additionBtn: JSX.Element = <></>;\r\n    if (props.index == state.noteData.dataList.length - 2) {\r\n        additionBtn = (\r\n            <div\r\n                className={\r\n                    'addition' +\r\n                    (editMode == EditMode.NORMAL ? '' : ' disable')\r\n                }\r\n                onClick={() => {\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: props.index });\r\n                    dispatcher.score.addChordElement();\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: props.index + 1 });\r\n                    dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                        params: {\r\n                            ...state.noteState.chordPaletteState,\r\n                            isAddition: true,\r\n                            rootIndex: 0,\r\n                            isFlat: false,\r\n                            symbolKey: SYMBOL_PARAMS_LIST[0].key,\r\n                            sustain: 4,\r\n                        }\r\n                    });\r\n                }}>\r\n                <span>+</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"box\">\r\n            <div className=\"info-base\">\r\n                <div className=\"header\">\r\n                    {getHeaderElement()}\r\n                </div>\r\n                <div\r\n                    className={[\r\n                        'note-element',\r\n                        getStyleFromType(),\r\n                        isSelected ? 'active' : '',\r\n                        isCriteria ? 'criteria' : '',\r\n                        [\r\n                            TypeNoteElement.Init,\r\n                            TypeNoteElement.Section,\r\n                            TypeNoteElement.Chord,\r\n                            TypeNoteElement.Change,\r\n                        ].includes(type) ? 'selectable' : '',\r\n                        isCurrentSection() ? 'current' : '',\r\n                        getCopyTargetStyle()\r\n                    ].join(' ')}\r\n                    onClick={() => {\r\n                        if (editMode == EditMode.NORMAL) {\r\n                            normalElementClickAction();\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                        } else {\r\n                            selectorElementClickAction();\r\n                        }\r\n                    }}\r\n                    onContextMenu={(e: MouseEvent) => {\r\n                        if (editMode == EditMode.NORMAL) {\r\n                            normalElementClickAction();\r\n                            const element: NoteElement = state.noteData.dataList[props.index];\r\n                            switch (element.type) {\r\n                                case TypeNoteElement.Init:\r\n                                    {\r\n                                        dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.INIT_PALETTE });\r\n                                    }\r\n                                    break;\r\n                                case TypeNoteElement.Section:\r\n                                case TypeNoteElement.Chord:\r\n                                case TypeNoteElement.Change:\r\n                                    {\r\n                                        state.reffers.contextMneu.style.left = e.clientX + 'px';\r\n                                        state.reffers.contextMneu.style.top = e.clientY + 'px';\r\n                                        dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CONTEXT_MENU });\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }}\r\n                    ref={ref}\r\n                >\r\n                    <ScoreElementDetail\r\n                        index={props.index}\r\n                        noteElement={props.noteElement}\r\n                    />\r\n                </div >\r\n            </div >\r\n            {/* プラス「＋」ボタン */}\r\n            {additionBtn}\r\n        </div >\r\n    );\r\n\r\n};\r\n\r\nexport default ScoreElement;\r\n","\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { DetailSection, TypeNoteElement } from 'contents/redux/store';\r\nimport { useContext, useEffect, useState } from 'react';\r\n\r\ntype OutlineSectionProps = {\r\n    label: String;\r\n    index: number;\r\n}\r\nconst OutlineSection = (props: OutlineSectionProps) => {\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n\r\n    const isCurrent = (): boolean => {\r\n        const dataList = state.noteData.dataList;\r\n        const focusIndex = state.noteState.focusIndex;\r\n        let secNo = -1;\r\n        let curSecNo = -1;\r\n        dataList.forEach((el, i) => {\r\n            if (el.type == TypeNoteElement.Section) secNo++;\r\n            if (focusIndex == i) curSecNo = secNo;\r\n        });\r\n        return curSecNo == props.index;\r\n    }\r\n    return (\r\n        <div className={isCurrent() ? 'active' : ''}>\r\n            <span>{props.label}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OutlineSection;\r\n","import { SYMBOL_PARAMS_LIST, SYMBOL_TYPE_LIST } from \"contents/common/define\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { ChordPaletteState, DetailChord, FloatWndState, TypeNoteElement } from \"contents/redux/store\";\r\nimport { useContext, useEffect, useRef } from \"react\";\r\n\r\nimport './NoteContextMenu.css';\r\n\r\nconst NoteContextMenu = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    /** コンテキストメニューを閉じる */\r\n    const close = () => dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n\r\n    /** コンテキストメニューの要素オブジェクト */\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, contextMneu: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_CONTEXT, { reffer: ref.current });\r\n    }, []);\r\n\r\n    const menuPropsList: MenuRecordProps[] = [];\r\n    if (state.noteState.floatwndState == FloatWndState.CONTEXT_MENU) {\r\n        const curElement = state.noteData.dataList[state.noteState.focusIndex];\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'INSERT BLANK', keyName: 'A', disable: false,\r\n            executer: () => {\r\n                dispatcher.score.addChordElement();\r\n                close();\r\n            }\r\n        });\r\n        menuPropsList.push({\r\n            menuType: 'call', label: 'INSERT CHORD', keyName: 'W', disable: false,\r\n            executer: () => {\r\n                dispatcher.score.addChordElement();\r\n                dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: state.noteState.focusIndex + 1 });\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n                const detail = curElement.detail as DetailChord;\r\n                dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                    params: {\r\n                        ...state.noteState.chordPaletteState,\r\n                        isAddition: true,\r\n                        molecule: {rootIndex: 0, isFlat: false},\r\n                        denominator: null,\r\n                        symbolKey: SYMBOL_PARAMS_LIST[0].key,\r\n                        sustain: state.noteState.defaultSustain,\r\n                    } as ChordPaletteState\r\n                });\r\n            }\r\n        });\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'INSERT SECTION', keyName: 'S', disable: false,\r\n            executer: () => {\r\n                dispatcher.score.addSectionElement();\r\n                close();\r\n            }\r\n        });\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'INSERT CHANGE', keyName: 'F', disable: false,\r\n            executer: () => { \r\n                dispatcher.score.addChangeElement();\r\n                close();\r\n            }\r\n        });\r\n        switch (curElement.type) {\r\n            case TypeNoteElement.Chord: {\r\n                const detail = curElement.detail as DetailChord;\r\n                menuPropsList.push({\r\n                    menuType: 'order', label: 'SET BLANK', keyName: 'D', disable: detail.molecule == null,\r\n                    executer: () => {\r\n                        const noteData = state.noteData;\r\n                        const detail = noteData.dataList[state.noteState.focusIndex].detail as DetailChord;\r\n                        detail.molecule = null;\r\n                        detail.denominator = null;\r\n                        dispatcher.score.setNoteData(noteData);\r\n                        // dispatch(ActionType.SET_DEGREE_INDEX, { pos: state.noteState.focusIndex, degreeIndex: -1 });\r\n                        close();\r\n                    }\r\n                });\r\n                menuPropsList.push({\r\n                    menuType: 'call', label: 'EDIT CHORD', keyName: 'C', disable: false,\r\n                    executer: () => {\r\n                        dispatcher.score.callChordSelector();\r\n                    }\r\n                });\r\n                menuPropsList.push({\r\n                    menuType: 'call', label: 'EDIT BACKING', keyName: 'B', disable: detail.molecule == null,\r\n                    executer: () => {\r\n                        dispatcher.score.callBackingEditor();\r\n                    }\r\n                });\r\n                menuPropsList.push({\r\n                    menuType: 'order', label: 'COPY BACKING', keyName: 'X', disable: detail.molecule == null,\r\n                    executer: () => {\r\n                        dispatcher.score.setCriteria();\r\n                        dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                    }\r\n                });\r\n            }\r\n                break;\r\n            case TypeNoteElement.Section: {\r\n                menuPropsList.push({\r\n                    menuType: 'call', label: 'EDIT SECTION', keyName: 'C', disable: false,\r\n                    executer: () => {\r\n                        dispatcher.score.callSectionEditor();\r\n                    }\r\n                });\r\n            }\r\n                break;\r\n            case TypeNoteElement.Change: {\r\n                menuPropsList.push({\r\n                    menuType: 'call', label: 'EDIT CHANGE', keyName: 'C', disable: false,\r\n                    executer: () => {\r\n                        dispatcher.score.callChangeEditor();\r\n                    }\r\n                });\r\n            }\r\n                break;\r\n        }\r\n        menuPropsList.push({\r\n            menuType: 'order', label: 'REMOVE', keyName: 'DEL', disable: false,\r\n            executer: () => {\r\n                dispatcher.score.deleteCurElement();\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }\r\n        });\r\n    }\r\n    const menuList: JSX.Element[] = [];\r\n    menuPropsList.forEach((data, i) => {\r\n        menuList.push(<MenuRecord\r\n            key={i}\r\n            menuType={data.menuType}\r\n            label={data.label}\r\n            keyName={data.keyName}\r\n            disable={data.disable}\r\n            executer={data.executer}\r\n        />);\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            id=\"note-contextmenu\"\r\n            className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.CONTEXT_MENU ? ' active' : '')}\r\n            onClick={() => {\r\n                // dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }}\r\n        >\r\n            {menuList}\r\n        </div>\r\n    );\r\n}\r\n\r\ntype MenuRecordProps = {\r\n    menuType: 'call' | 'order';\r\n    label: string;\r\n    keyName: string;\r\n    disable: boolean;\r\n    executer: Function;\r\n}\r\nconst MenuRecord = (props: MenuRecordProps) => {\r\n\r\n    return (\r\n        <div className={props.disable ? 'disable' : ''}\r\n            onClick={() => {\r\n                props.executer();\r\n            }}\r\n        >\r\n            <span className={props.menuType}>{props.label}</span>\r\n            <span className=\"key\">{`<${props.keyName} key>`}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoteContextMenu;","import { DEGREE12_FLAT_LIST, DEGREE12_SHARP_LIST, KEY12_FLAT_LIST, KEY12_SHARP_LIST, SymbolKey, SymbolParams, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport TabbedPane from \"contents/common/TabbedPane\";\r\nimport { getSymbolParams } from \"contents/common/utils\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { DetailChord, FloatWndState, ChordPaletteLine, TypeNoteElement, CHORD_MODE, ChordPaletteState } from \"contents/redux/store\";\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\n// import styled from 'styled-components';\r\n// npm i --save-dev @types/styled-components\r\nimport './ChordSelector.css';\r\n\r\nconst ChordSelector = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    // const [degreeIndex, setDegreeIndex] = useState(0);\r\n    // const [isFlat, setFlat] = useState(false);\r\n    // const [symbolKey, setSymbolKey] = useState(SYMBOL_PARAMS_LIST[0].key);\r\n    // const [sustain, setSustain] = useState(4);\r\n\r\n    /** コンテキストメニューの要素オブジェクト */\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    const editorState = state.noteState.chordPaletteState;\r\n    const focusIndex = state.noteState.focusIndex;\r\n    const chordDetail = state.noteData.dataList[focusIndex].detail as DetailChord;\r\n    const cache = state.noteState.cacheList[focusIndex];\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, chordPalette: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_CHORD_PALETTE, { reffer: ref.current });\r\n        const canvas: any = canvasRef.current;\r\n        canvas.width = 590;\r\n        canvas.height = 66;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (state.noteState.floatwndState == FloatWndState.CHORD_PALETTE) {\r\n            updatePianoView(\r\n                editorState.molecule.rootIndex,\r\n                editorState.denominator == null ? -1 : editorState.denominator.rootIndex,\r\n                editorState.symbolKey\r\n            );\r\n        }\r\n    }, [editorState, state.noteState.floatwndState]);\r\n\r\n    const updatePianoView = (molRootIndex: number, denRootIndex: number, symbolKey: SymbolKey) => {\r\n        const ctx = (canvasRef.current as HTMLCanvasElement).getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        const keyIndex = (cache.init.keyIndex + molRootIndex) % 12;\r\n        const intervalList = (getSymbolParams(symbolKey) as SymbolParams).intervals;\r\n        const list = intervalList.map((value) => keyIndex + value);\r\n        let denIndex = -1;\r\n        if (denRootIndex != -1) {\r\n            denIndex = cache.init.keyIndex + denRootIndex;\r\n        }\r\n        ctx.fillStyle = '#008';\r\n        ctx.fillRect(0, 0, 594, 70);\r\n        const WIDTH = 34;\r\n        const HEIGHT = 60;\r\n        const BLACK_RATE_W = 0.5;\r\n        const BLACK_RATE_H = 0.6;\r\n        const MARGIN_W = 1;\r\n        const START_ADJUST = 1;\r\n        let posX = 0;\r\n        const keyboadList: {\r\n            posX: number;\r\n            fillStyle: string;\r\n            width: number;\r\n            height: number;\r\n            isBlack: boolean;\r\n        }[] = [];\r\n        for (let i = 0; i < 27; i++) {\r\n            let color = '#eee';\r\n            let width = WIDTH;\r\n            let height = HEIGHT;\r\n            const isBlack = [1, 3, 6, 8, 10].includes(i % 12);\r\n            if (isBlack) {\r\n                color = '#111';\r\n                width = WIDTH * BLACK_RATE_W;\r\n                height = HEIGHT * BLACK_RATE_H;\r\n            }\r\n            if (list.includes(i)) {\r\n                color = '#fa0';\r\n            }\r\n            if (denIndex == i) {\r\n                color = '#ff0000';\r\n            }\r\n            keyboadList.push({ posX: 15 + posX, fillStyle: color, width, height, isBlack });\r\n\r\n            switch (i % 12) {\r\n                case 0: case 2: case 5: case 7: case 9:\r\n                    //次が黒鍵\r\n                    posX += WIDTH - WIDTH * BLACK_RATE_W / 2;\r\n                    break;\r\n                case 1: case 3: case 6: case 8: case 10:\r\n                    //黒鍵\r\n                    posX += WIDTH * BLACK_RATE_W / 2 + MARGIN_W;\r\n                    break;\r\n                default:\r\n                    //次が白鍵\r\n                    posX += WIDTH + MARGIN_W;\r\n            }\r\n        }\r\n        keyboadList.forEach((keyboad) => {\r\n            if (!keyboad.isBlack) {\r\n                ctx.fillStyle = keyboad.fillStyle;\r\n                ctx.fillRect(keyboad.posX, 3, keyboad.width, keyboad.height);\r\n            }\r\n        });\r\n        keyboadList.forEach((keyboad) => {\r\n            if (keyboad.isBlack) {\r\n                ctx.fillStyle = keyboad.fillStyle;\r\n                ctx.fillRect(keyboad.posX, 3, keyboad.width, keyboad.height);\r\n                ctx.fillStyle = '#f00';\r\n                ctx.strokeRect(keyboad.posX, 3, keyboad.width, keyboad.height);\r\n            }\r\n        });\r\n        ctx.save();\r\n    }\r\n\r\n    const chordList: JSX.Element[] = [];\r\n    const symbolList: JSX.Element[] = [];\r\n    const beatList: JSX.Element[] = [];\r\n    let operationJsx: JSX.Element = <></>;\r\n    const isDirect = state.noteData.chordMode == CHORD_MODE.DIRECT;\r\n    if (state.noteState.floatwndState == FloatWndState.CHORD_PALETTE) {\r\n\r\n        DEGREE12_SHARP_LIST.forEach((degS, i) => {\r\n            const baseKey = cache.init.keyIndex;\r\n            const keyIndex = (baseKey + i) % 12;\r\n            const degF = DEGREE12_FLAT_LIST[i];\r\n            const chdS = KEY12_SHARP_LIST[keyIndex];\r\n            const chdF = KEY12_FLAT_LIST[keyIndex];\r\n            const isHalf = [1, 3, 6, 8, 10].includes(i);\r\n            const isSelected = editorState.molecule.rootIndex == i;\r\n            const isDenominator = (editorState.denominator == null ? -1 : editorState.denominator.rootIndex) == i;\r\n            const buildLabelSrc = (isFlat: boolean): JSX.Element => {\r\n                return (\r\n                    state.noteData.chordMode == CHORD_MODE.SCALE ?\r\n                        <>\r\n                            <span className=\"degree\">{isFlat ? degF : degS}</span>\r\n                            <span>&nbsp;(</span>\r\n                            <span className=\"chord\">{isFlat ? chdF : chdS}</span>\r\n                            <span>)</span>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <span className=\"degree\">{isFlat ? chdF : chdS}</span>\r\n                        </>\r\n                );\r\n            };\r\n            chordList.push(\r\n                <div key={i}>{\r\n                    !isHalf ?\r\n                        <div\r\n                            className={[\r\n                                isSelected ? 'active' : '',\r\n                                isDenominator ? 'denominator' : ''\r\n                            ].join(' ')}\r\n                            onClick={() => {\r\n                                // 分母が同じ場所に設定されていたら分子で上書きする\r\n                                const denominator = !isDenominator ? editorState.denominator : null;\r\n                                dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                    params: {\r\n                                        ...editorState,\r\n                                        selectedLine: ChordPaletteLine.Root, molecule: { rootIndex: i, isFlat: false }, denominator\r\n                                    } as ChordPaletteState\r\n                                });\r\n                                // updatePianoView(\r\n                                //     i,\r\n                                //     editorState.denominator == null ? -1 : editorState.denominator.rootIndex,\r\n                                //     editorState.symbolKey\r\n                                // );\r\n                            }}\r\n                            onContextMenu={() => {\r\n                                if (isSelected) return;\r\n                                const denominator = (!isDenominator ? { rootIndex: i, isFlat: false } : null);\r\n                                dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                    params: {\r\n                                        ...editorState,\r\n                                        selectedLine: ChordPaletteLine.Root, denominator\r\n                                    } as ChordPaletteState\r\n                                });\r\n                                // updatePianoView(\r\n                                //     editorState.molecule.rootIndex,\r\n                                //     i,\r\n                                //     editorState.symbolKey\r\n                                // );\r\n                            }}\r\n                        >\r\n                            {buildLabelSrc(false)}\r\n                        </div>\r\n                        :\r\n                        <>\r\n                            <div\r\n                                className={[\r\n                                    \"half\",\r\n                                    (isSelected && !editorState.molecule.isFlat ? ' active' : ''),\r\n                                    (isDenominator && editorState.denominator != null && !editorState.denominator.isFlat ? ' denominator' : '')\r\n                                ].join(' ')}\r\n                                onClick={() => {\r\n                                    // 分母が同じ場所に設定されていたら分子で上書きする\r\n                                    const denominator = !(isDenominator && editorState.denominator != null && !editorState.denominator.isFlat)\r\n                                        ? editorState.denominator : null;\r\n                                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                        params: {\r\n                                            ...editorState,\r\n                                            selectedLine: ChordPaletteLine.Root, molecule: { rootIndex: i, isFlat: false }, denominator\r\n                                        } as ChordPaletteState\r\n                                    });\r\n                                    // updatePianoView(\r\n                                    //     i,\r\n                                    //     editorState.denominator == null ? -1 : editorState.denominator.rootIndex,\r\n                                    //     editorState.symbolKey\r\n                                    // );\r\n                                }}\r\n                                onContextMenu={() => {\r\n                                    if (isSelected && !editorState.molecule.isFlat) return;\r\n                                    const denominator = (\r\n                                        !(isDenominator && editorState.denominator != null && !editorState.denominator.isFlat)\r\n                                            ? { rootIndex: i, isFlat: false } : null);\r\n                                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                        params: {\r\n                                            ...editorState,\r\n                                            selectedLine: ChordPaletteLine.Root, denominator\r\n                                        } as ChordPaletteState\r\n                                    });\r\n                                    // updatePianoView(\r\n                                    //     editorState.molecule.rootIndex,\r\n                                    //     i,\r\n                                    //     editorState.symbolKey\r\n                                    // );\r\n                                }}\r\n                            >\r\n                                {buildLabelSrc(false)}\r\n                            </div>\r\n                            <div\r\n                                className={[\r\n                                    \"half\",\r\n                                    (isSelected && editorState.molecule.isFlat ? ' active' : ''),\r\n                                    (isDenominator && editorState.denominator != null && editorState.denominator.isFlat ? ' denominator' : '')\r\n                                ].join(' ')}\r\n                                onClick={() => {\r\n                                    // 分母が同じ場所に設定されていたら分子で上書きする\r\n                                    const denominator = !(isDenominator && editorState.denominator != null && editorState.denominator.isFlat)\r\n                                        ? editorState.denominator : null;\r\n                                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                        params: {\r\n                                            ...editorState,\r\n                                            selectedLine: ChordPaletteLine.Root, molecule: { rootIndex: i, isFlat: true }, denominator\r\n                                        } as ChordPaletteState\r\n                                    });\r\n                                    // updatePianoView(\r\n                                    //     i,\r\n                                    //     editorState.denominator == null ? -1 : editorState.denominator.rootIndex,\r\n                                    //     editorState.symbolKey\r\n                                    // );\r\n                                }}\r\n                                onContextMenu={() => {\r\n                                    if (isSelected && editorState.molecule.isFlat) return;\r\n                                    const denominator = (\r\n                                        !(isDenominator && editorState.denominator != null && editorState.denominator.isFlat)\r\n                                            ? { rootIndex: i, isFlat: true } : null);\r\n                                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                                        params: {\r\n                                            ...editorState,\r\n                                            selectedLine: ChordPaletteLine.Root, denominator\r\n                                        } as ChordPaletteState\r\n                                    });\r\n                                    // updatePianoView(\r\n                                    //     editorState.molecule.rootIndex,\r\n                                    //     i,\r\n                                    //     editorState.symbolKey\r\n                                    // );\r\n                                }}\r\n                            >\r\n                                {buildLabelSrc(true)}\r\n                            </div>\r\n                        </>\r\n                }</div>\r\n            );\r\n        });\r\n\r\n        SYMBOL_PARAMS_LIST.forEach((symbol, i) => {\r\n            // const isSelected = chordDetail.degreeIndex == i;\r\n            symbolList.push(\r\n                <div\r\n                    key={i}\r\n                    className={symbol.key == editorState.symbolKey ? 'active' : ''}\r\n                    onClick={() => {\r\n                        dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                            params: {\r\n                                ...editorState,\r\n                                selectedLine: ChordPaletteLine.Symbol, symbolKey: symbol.key\r\n                            }\r\n                        });\r\n                        // updatePianoView(\r\n                        //     editorState.molecule.rootIndex,\r\n                        //     editorState.denominator == null ? -1 : editorState.denominator.rootIndex,\r\n                        //     symbol.key\r\n                        // );\r\n                    }}\r\n                >\r\n                    <span>[{symbol.name}]</span>\r\n                </div>\r\n\r\n            );\r\n        });\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            beatList.push(\r\n                <div\r\n                    key={i}\r\n                    className={editorState.sustain >= i + 1 ? 'active' : ''}\r\n                    onClick={() => {\r\n                        dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                            params: {\r\n                                ...editorState, selectedLine: ChordPaletteLine.Sustain, sustain: i + 1\r\n                            }\r\n                        });\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        operationJsx = (<>\r\n            <div\r\n                onClick={() => {\r\n                    dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                }}>\r\n                <span>Cancel</span>\r\n            </div>\r\n            <div\r\n                onClick={() => {\r\n                    dispatcher.chord.setCurChordParam();\r\n                }}>\r\n                <span>Enter</span>\r\n            </div>\r\n        </>);\r\n    }\r\n    const getAdjustOprJsx = (type: 'h' | 't', offset: number): JSX.Element => {\r\n        let [label, cls, isActive, callback] = type == 'h' ?\r\n            ['h', 'head', editorState.headAdjust == offset,\r\n                () => dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                    params: {\r\n                        ...editorState, headAdjust: offset\r\n                    }\r\n                })] :\r\n            ['t', 'tail', editorState.tailAdjust == offset,\r\n                () => dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                    params: {\r\n                        ...editorState, tailAdjust: offset\r\n                    }\r\n                })];\r\n        if (offset >= 0) {\r\n            label += (offset > 0 ? '+' : '±');\r\n        }\r\n        return (\r\n            <div\r\n                className={[\r\n                    cls,\r\n                    isActive ? 'active' : ''\r\n                ].join(' ')}\r\n                onClick={callback}\r\n            >\r\n                <span>{label + offset}</span>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            id=\"total-palette\"\r\n            className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.CHORD_PALETTE ? ' active' : '')}\r\n            onClick={() => {\r\n            }}\r\n        >\r\n            <TabbedPane groupName=\"selector-tabs\"\r\n                tabElements={[\r\n                    {\r\n                        name: 'Scale', disable: isDirect, cont: (\r\n                            <>\r\n                            </>\r\n                        )\r\n                    },\r\n                    {\r\n                        name: 'Direct', disable: false, cont: (\r\n                            <>\r\n                                <div className={'chord-selector' + (editorState.selectedLine == ChordPaletteLine.Root ? ' active' : '')}>\r\n                                    {chordList}\r\n                                </div>\r\n                                <div className={'symbol-selector' + (editorState.selectedLine == ChordPaletteLine.Symbol ? ' active' : '')}>\r\n                                    {symbolList}\r\n                                </div>\r\n                            </>\r\n                        )\r\n                    }\r\n                ]}\r\n                activeNo={1}\r\n            />\r\n            <div className={'piano-view'}>\r\n                <canvas ref={canvasRef} />\r\n            </div>\r\n            <div className={'beat-selector' + (editorState.selectedLine == ChordPaletteLine.Sustain ? ' active' : '')}>\r\n                {beatList}\r\n            </div>\r\n            <div className={'adjuster' + (editorState.selectedLine == ChordPaletteLine.Adjuster ? ' active' : '')}>\r\n                {getAdjustOprJsx('h', -0.5)}\r\n                {getAdjustOprJsx('h', -0.25)}\r\n                {getAdjustOprJsx('h', 0)}\r\n                {getAdjustOprJsx('h', 0.25)}\r\n                {getAdjustOprJsx('h', 0.5)}\r\n                {getAdjustOprJsx('t', -0.5)}\r\n                {getAdjustOprJsx('t', -0.25)}\r\n                {getAdjustOprJsx('t', 0)}\r\n                {getAdjustOprJsx('t', 0.25)}\r\n                {getAdjustOprJsx('t', 0.5)}\r\n            </div>\r\n            <div className=\"operation\">\r\n                {operationJsx}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChordSelector;","\r\nimport { DEGREE12_SHARP_LIST, KEY12_SHARP_LIST, SCALE_LIST, SYMBOL_PARAMS_LIST } from 'contents/common/define';\r\nimport { getAdjustSusValue, getSymbolParams } from 'contents/common/utils';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { DetailChord, DetailSection, TypeNoteElement } from 'contents/redux/store';\r\nimport { useContext } from 'react';\r\nimport './CurrentElementInfo.css';\r\n\r\ntype DataRecord = {\r\n    title: string;\r\n    value: string;\r\n    disable: boolean;\r\n}\r\n\r\nconst CurrentElementInfo = () => {\r\n\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n    const focusIndex = state.noteState.focusIndex;\r\n    if (focusIndex == -1) return (<></>);\r\n\r\n    const data = state.noteData.dataList[focusIndex];\r\n    const cache = state.noteState.cacheList[focusIndex];\r\n\r\n    let inner: JSX.Element = <></>;\r\n    switch (data.type) {\r\n        case TypeNoteElement.Chord: {\r\n            const detail = data.detail as DetailChord;\r\n            let root = '-';\r\n            if (detail.molecule != null) {\r\n                const rootIndex = detail.molecule.rootIndex;\r\n                const degreeRoot = DEGREE12_SHARP_LIST[rootIndex];\r\n                const chordRoot = KEY12_SHARP_LIST[rootIndex];\r\n                root = `${degreeRoot} (${chordRoot})`;\r\n            }\r\n            let symbolName = '-';\r\n            if (detail.molecule != null) {\r\n                symbolName = `[${getSymbolParams(detail.symbolKey)?.name as string}]`;\r\n            }\r\n\r\n            const baseBlockJsx = buildInfoBlock('Base', [\r\n                { title: 'Tempo', value: '' + cache.init.tempo, disable: false },\r\n                { title: 'Beat', value: cache.init.rythm, disable: false },\r\n                { title: 'Key', value: KEY12_SHARP_LIST[cache.init.keyIndex], disable: false },\r\n                { title: 'Scale', value: cache.init.scale, disable: false },\r\n            ]);\r\n\r\n            const chordBlockJsx = buildInfoBlock('Chord', [\r\n                { title: 'Root', value: root, disable: root == '-' },\r\n                { title: 'Symbol', value: symbolName, disable: symbolName == '-' },\r\n                { title: 'On chord', value: '-', disable: true },\r\n                { title: 'Sustain', value: String(detail.sustain), disable: false },\r\n                { title: 'Adjsut-H', value: getAdjustSusValue(detail.headAdjust), disable: detail.headAdjust == 0 },\r\n                { title: 'Adjsut-T', value: getAdjustSusValue(detail.tailAdjust), disable: detail.tailAdjust == 0 },\r\n            ]);\r\n\r\n            inner = (\r\n                <div\r\n                    className={\r\n                        'chord'\r\n                    }\r\n                >\r\n                    <div>\r\n                        {baseBlockJsx}\r\n                        {chordBlockJsx}\r\n                        {(() => {\r\n\r\n                            if (detail.molecule != null) {\r\n                                const structList: JSX.Element[] = [];\r\n                                const symbol = getSymbolParams(detail.symbolKey);\r\n                                const list = symbol?.intervals;\r\n                                const len = list?.length as number;\r\n                                for (let i = 0; i < 7; i++) {\r\n                                    if (i < len) {\r\n                                        const interval = symbol?.intervals[i] as number;\r\n                                        const struct = symbol?.struct[i];\r\n                                        const sound = KEY12_SHARP_LIST[(detail.molecule.rootIndex + interval) % 12];\r\n                                        structList.push(\r\n                                            <div key={i} className=\"record\">\r\n                                                <div className=\"interval\"><span>{interval}</span></div>\r\n                                                <div className=\"struct\"><span>{struct}</span></div>\r\n                                                <div className=\"sound\"><span>{sound}</span></div>\r\n                                            </div>\r\n                                        );\r\n                                    } else {\r\n                                        structList.push(\r\n                                            <div key={i} className=\"record disable\">\r\n                                                <div className=\"interval\"></div>\r\n                                                <div className=\"struct\"></div>\r\n                                                <div className=\"sound\"></div>\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                };\r\n                                return (<>\r\n                                    <div className=\"title\">\r\n                                        <span>Struct</span>\r\n                                    </div>\r\n                                    <div className=\"symbol-struct\">\r\n                                        {structList}\r\n                                    </div>\r\n                                </>)\r\n                            }\r\n                            return (<></>);\r\n                        })()}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n            break;\r\n        case TypeNoteElement.Section: {\r\n            const detail = data.detail as DetailSection;\r\n\r\n            const sectionBlockJsx = buildInfoBlock('Section', [\r\n                { title: 'label', value: detail.labelName, disable: false },\r\n                { title: 'box count', value: '-', disable: true },\r\n                { title: 'total bar', value: '-', disable: true },\r\n                { title: 'total time', value: '-', disable: true }\r\n            ]);\r\n            inner = (\r\n                <div\r\n                    className={\r\n                        'chord'\r\n                    }\r\n                >\r\n                    <div>\r\n                        {sectionBlockJsx}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n            break;\r\n    }\r\n    return (\r\n        <div id=\"current-detail\">\r\n            {inner}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentElementInfo;\r\n\r\n\r\nconst buildInfoBlock = (titleLabel: string, dataRecordList: DataRecord[]): JSX.Element => {\r\n    const jsxList: JSX.Element[] = [];\r\n    dataRecordList.forEach((state, i) => {\r\n        jsxList.push(\r\n            <div\r\n                key={i}\r\n                className={\r\n                    'record' +\r\n                    (state.disable ? ' disable' : '')\r\n                }>\r\n                <div className=\"title\"><span>{state.title}:</span></div>\r\n                <div className=\"value\"><span>{state.value}</span></div>\r\n            </div>\r\n        );\r\n    });\r\n    return (<>\r\n        <div className=\"title\">\r\n            <span>{titleLabel}</span>\r\n        </div>\r\n        <div className=\"current-state\">\r\n            {jsxList}\r\n        </div>\r\n    </>);\r\n}","import { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { BackingLen, BackingEditorState, BACKING_LEN_TYPE, BACKING_SIDE } from \"contents/redux/store\";\r\n\r\n\r\ntype BackingOperationProps = {\r\n    dispatcher: Dispatcher;\r\n    paletteState: BackingEditorState;\r\n}\r\n\r\ntype ButtonBean = {\r\n    label: string;\r\n    isActive: boolean;\r\n    isDisable: boolean;\r\n    callback: Function;\r\n}\r\n\r\nconst BackingOperation = (props: BackingOperationProps) => {\r\n\r\n    const dispatcher = props.dispatcher;\r\n    const paletteState = props.paletteState;\r\n    const sideIndex = paletteState.sideIndex;\r\n    const curSideScript = paletteState.layers[sideIndex];\r\n    const selectedLenIndex = paletteState.selectedLenIndex;\r\n    const curLenBean = curSideScript.lens[selectedLenIndex];\r\n    const curVolume = curSideScript.vels[selectedLenIndex];\r\n\r\n    const setCurrentLenBean = (lenBean: BackingLen) => {\r\n        const script = paletteState.layers;\r\n        script[sideIndex].lens[selectedLenIndex] = lenBean;\r\n        dispatcher.initBackingPalette({\r\n            ...paletteState,\r\n            layers: script\r\n        });\r\n    };\r\n    const setCurrentLen = (lenType: BACKING_LEN_TYPE) => {\r\n        curLenBean.len = lenType;\r\n        curLenBean.isHalf = false;\r\n        curLenBean.isDiv3 = false;\r\n        setCurrentLenBean(curLenBean);\r\n    };\r\n    const updateCurrentVolume = (sub: number) => {\r\n        const script = paletteState.layers;\r\n        const nowVol = script[sideIndex].vels[selectedLenIndex];\r\n        script[sideIndex].vels[selectedLenIndex] = nowVol + sub;\r\n        dispatcher.initBackingPalette({\r\n            ...paletteState,\r\n            layers: script\r\n        });\r\n    };\r\n\r\n    const curLen = curLenBean.len;\r\n    const buttons: ButtonBean[] = [\r\n        {\r\n            label: '16',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN16,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN16); }\r\n        },\r\n        {\r\n            label: '8',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN8,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN8); }\r\n        },\r\n        {\r\n            label: '4',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN4,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN4); }\r\n        },\r\n        {\r\n            label: '2',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN2,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN2); }\r\n        },\r\n        {\r\n            label: '1',\r\n            isActive: curLen == BACKING_LEN_TYPE.LEN1,\r\n            isDisable: false,\r\n            callback: () => { setCurrentLen(BACKING_LEN_TYPE.LEN1); }\r\n        },\r\n        {\r\n            label: '.',\r\n            isActive: curLenBean.isHalf,\r\n            isDisable: !dispatcher.backing.isAcceptHalf(),\r\n            callback: () => {\r\n                curLenBean.isHalf = !curLenBean.isHalf;\r\n                curLenBean.isDiv3 = false;\r\n                setCurrentLenBean(curLenBean);\r\n            }\r\n        },\r\n        {\r\n            label: '/ 3',\r\n            isActive: curLenBean.isDiv3,\r\n            isDisable: !dispatcher.backing.isAcceptDiv3(),\r\n            callback: () => {\r\n                curLenBean.isDiv3 = !curLenBean.isDiv3;\r\n                curLenBean.isHalf = false;\r\n                setCurrentLenBean(curLenBean);\r\n            }\r\n        },\r\n        {\r\n            label: 'Add',\r\n            isActive: false,\r\n            isDisable: false,\r\n            callback: () => {\r\n                dispatcher.backing.addLen();\r\n            }\r\n        },\r\n        {\r\n            label: 'Del',\r\n            isActive: false,\r\n            isDisable: curSideScript.lens.length <= 1,\r\n            callback: () => {\r\n                dispatcher.backing.delLen();\r\n            }\r\n        },\r\n        {\r\n            label: 'vel-',\r\n            isActive: false,\r\n            isDisable: curVolume <= 1,\r\n            callback: () => {\r\n                updateCurrentVolume(-1);\r\n            }\r\n        },\r\n        {\r\n            label: 'vel+',\r\n            isActive: false,\r\n            isDisable: curVolume >= 10,\r\n            callback: () => {\r\n                updateCurrentVolume(1);\r\n            }\r\n        },\r\n        // {\r\n        //     label: 'all clear',\r\n        //     isActive: false,\r\n        //     isDisable: false,\r\n        //     callback: () => {\r\n        //         const backingState: BackingEditorState = {\r\n        //             useChannels: [],\r\n        //             isUsePedal: false,\r\n        //             sideIndex: 0,\r\n        //             selectedLenIndex: 0,\r\n        //             selectedChannelIndex: -1,\r\n        //             layers: [\r\n        //                 {\r\n        //                     lens: [{\r\n        //                         len: BACKING_LEN_TYPE.LEN4,\r\n        //                         isDiv3: false,\r\n        //                         isHalf: false\r\n        //                     }],\r\n        //                     side: BACKING_SIDE.LEFT,\r\n        //                     table: [],\r\n        //                     vels: [5]\r\n        //                 },\r\n        //                 {\r\n        //                     lens: [{\r\n        //                         len: BACKING_LEN_TYPE.LEN4,\r\n        //                         isDiv3: false,\r\n        //                         isHalf: false\r\n        //                     }],\r\n        //                     side: BACKING_SIDE.RIGHT,\r\n        //                     table: [],\r\n        //                     vels: [5]\r\n        //                 }\r\n        //             ],\r\n        //             isCorrect: true\r\n        //         };\r\n        //         dispatcher.initBackingPalette(backingState);\r\n        //     }\r\n        // }\r\n    ];\r\n    const buttonList: JSX.Element[] = [];\r\n    buttons.forEach((button, i) => {\r\n        buttonList.push(\r\n            <button\r\n                key={i}\r\n                className={\r\n                    (button.isActive ? 'active' : '') +\r\n                    (button.isDisable ? ' disable' : '')\r\n                }\r\n                onClick={() => button.callback()}\r\n            >\r\n                <span>{button.label}</span>\r\n            </button>\r\n        );\r\n    });\r\n\r\n    return (<>\r\n        <select\r\n            value={paletteState.channelRowSize}\r\n            onChange={(e) => {\r\n                const backing = props.paletteState;\r\n                const newValue = parseInt(e.target.value);\r\n                const diff = newValue - backing.channelRowSize;\r\n                const layers = backing.layers;\r\n                if (diff > 0) {\r\n                    layers.forEach((layer) => {\r\n                        for (let i = 0; i < diff; i++) {\r\n                            const record: boolean[][] = [];\r\n                            for (let j = 0; j < layer.lens.length; j++) {\r\n                                record.push([false]);\r\n                            }\r\n                            layer.table.splice(backing.channelRowSize, 0, record);\r\n                        }\r\n                    });\r\n                } else if (diff < 0) {\r\n                    layers.forEach((layer) => {\r\n                        layer.table.splice(newValue, Math.abs(diff));\r\n                    });\r\n                }\r\n                backing.channelRowSize = newValue;\r\n                dispatcher.backing.setPaletteState(props.paletteState);\r\n            }}>\r\n            {(() => {\r\n                const list: JSX.Element[] = [];\r\n                for (let i = 0; i < 12; i++) {\r\n                    const val = i + 1;\r\n                    const isDisabled = val < paletteState.channelRowSize;\r\n                    list.push(\r\n                        <option\r\n                            key={i}\r\n                            value={val}\r\n                            className={isDisabled ? 'del' : ''}\r\n                        >\r\n                            {val}\r\n                        </option>\r\n                    );\r\n                }\r\n                return list;\r\n            })()}\r\n        </select>\r\n        {buttonList}\r\n    </>);\r\n}\r\n\r\nexport default BackingOperation;","import { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { BackingLen, BackingLayer, BackingEditorState, BACKING_LEN_TYPE } from \"contents/redux/store\";\r\nimport { useContext } from \"react\";\r\nimport { BackingContext } from \"./BackingEditor\";\r\nimport { ChannelBean } from \"./BackingTable\";\r\n\r\ntype NotesMatrixProps = {\r\n    paletteState: BackingEditorState;\r\n    channelList: ChannelBean[];\r\n    dispatcher: Dispatcher;\r\n}\r\n\r\nconst NotesMatrix = (props: NotesMatrixProps) => {\r\n\r\n    // const { setCorrect } = useContext(BackingContext);\r\n\r\n    const paletteState = props.paletteState\r\n    const channelList = props.channelList;\r\n    const dispatcher = props.dispatcher;\r\n\r\n    const matrixLayersJsx: JSX.Element[] = [];\r\n\r\n    let hasError = false;\r\n    for (let l = 0; l < 2; l++) {\r\n        const linesJsx: JSX.Element[] = [];\r\n        const layer = paletteState.layers[l];\r\n        const isCurLayer = paletteState.sideIndex == l;\r\n        // 逆に表示する（音程が低い方が下になるようにする）\r\n        for (let i = paletteState.channelRowSize - 1; i >= 0; i--) {\r\n            const cellList: JSX.Element[] = [];\r\n            layer.lens.forEach((lenBean, j) => {\r\n                let classes = '';\r\n                let label = '';\r\n                switch (lenBean.len) {\r\n                    case BACKING_LEN_TYPE.LEN4: classes += 'len4'; label = '4'; break;\r\n                    case BACKING_LEN_TYPE.LEN8: classes += 'len8'; label = '8'; break;\r\n                    case BACKING_LEN_TYPE.LEN16: classes += 'len16'; label = '16'; break;\r\n                    case BACKING_LEN_TYPE.LEN2: classes += 'len2'; label = '2'; break;\r\n                    case BACKING_LEN_TYPE.LEN1: classes += 'len1'; label = '1'; break;\r\n                }\r\n                if (lenBean.isHalf) {\r\n                    classes += ' half';\r\n                }\r\n\r\n                const divList: JSX.Element[] = [];\r\n                const divCnt = lenBean.isDiv3 ? 3 : 1;\r\n                for (let k = 0; k < divCnt; k++) {\r\n                    const activeState = getActiveState(paletteState.layers, l, i, j, k);\r\n                    if(activeState == 'overlap') {\r\n                        hasError = true;\r\n                    }\r\n                    divList.push(\r\n                        <div\r\n                            key={k}\r\n                            className={[\r\n                                activeState,\r\n                                (lenBean.isDiv3 ? 'div3' : '')\r\n                            ].join(' ')}\r\n                            onClick={() => {\r\n                                dispatcher.backing.toggleMatrix(i, j, k);\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                cellList.push(\r\n                    <div\r\n                        key={j}\r\n                        className={classes}\r\n                    >\r\n                        {divList}\r\n                    </div>\r\n                );\r\n            });\r\n            linesJsx.push(\r\n                <div key={i} className=\"line\">\r\n                    {cellList}\r\n                </div>\r\n            );\r\n        };\r\n        matrixLayersJsx.push(\r\n            <div\r\n                key={l}\r\n                className={\r\n                    isCurLayer ? 'cur' : 'back'\r\n                }\r\n            >\r\n                {linesJsx}\r\n            </div>\r\n        );\r\n    }\r\n    // setCorrect(!hasError);\r\n\r\n    return (\r\n        <div className=\"matrix\">\r\n            {matrixLayersJsx}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n/**\r\n * セルの状態を元に適用するスタイルのclassを返す。\r\n * @param layers レイヤーの配列\r\n * @param curLayerIndex 選択中のレイヤーの連番\r\n * @param lineIndex 走査中のセルの連番\r\n * @param lenIndex 走査中の音価の連番\r\n * @returns スタイルのclass\r\n */\r\nconst getActiveState = (layers: BackingLayer[], curLayerIndex: number, lineIndex: number, lenIndex: number, divIndex: number): string => {\r\n    const cur = layers[curLayerIndex == 0 ? 0 : 1];\r\n    const back = layers[curLayerIndex == 1 ? 0 : 1];\r\n    let className = '';\r\n\r\n    if (cur.table[lineIndex][lenIndex][divIndex]) {\r\n        className = 'active';\r\n        const curCellRange = getCellRange(cur.lens, lenIndex, divIndex);\r\n        back.lens.forEach((backLenBean, j) => {\r\n            for (let k = 0; k < (backLenBean.isDiv3 ? 3 : 1); k++) {\r\n                const backRange = getCellRange(back.lens, j, k);\r\n                if (back.table[lineIndex][j][k] &&\r\n                    // 双方向で判定する\r\n                    (isOverlapJudge(curCellRange, backRange) || isOverlapJudge(backRange, curCellRange))\r\n                ) {\r\n                    className = 'overlap';\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return className;\r\n}\r\n\r\n/**\r\n * 比較する2つのセルが重なっているか判定する。\r\n * @param range1 比較対象セル1\r\n * @param range2 比較対象セル2\r\n * @returns 判定結果\r\n */\r\nconst isOverlapJudge = (range1: CellRange, range2: CellRange): boolean => {\r\n    return (range1.head + range1.width > range2.head && range1.head + range1.width <= range2.head + range2.width)\r\n        || (range1.head < range2.head + range2.width && range1.head >= range2.head);\r\n}\r\n\r\n/**\r\n * セルの幅を返す。\r\n * @param lens 音価\r\n * @param lenIndex 音価リストの連番\r\n * @param divIndex 連符リストの連番\r\n * @returns セルの幅\r\n */\r\nconst getCellRange = (lens: BackingLen[], lenIndex: number, divIndex: number): CellRange => {\r\n    let head = 0;\r\n    for (let i = 0; i < lenIndex; i++) {\r\n        const lenBean = lens[i];\r\n        head += getLenSize(lenBean);\r\n    }\r\n    const curLen = lens[lenIndex];\r\n    let width = getLenSize(curLen);\r\n\r\n    if (curLen.isDiv3) {\r\n        head += width / 3 * divIndex;\r\n        width = width / 3;\r\n    }\r\n    return { head, width };\r\n}\r\n\r\n/**\r\n * セルの幅を定義する要素。\r\n */\r\ntype CellRange = {\r\n    head: number;\r\n    width: number;\r\n}\r\n\r\n/**\r\n * 計算に使う音価の長さを返す。\r\n * @param lenBean 音価パラメータ\r\n * @returns 計算に使う音価の長さ\r\n */\r\nconst getLenSize = (lenBean: BackingLen): number => {\r\n    let size = 0;\r\n    switch (lenBean.len) {\r\n        case BACKING_LEN_TYPE.LEN1: size = 16; break;\r\n        case BACKING_LEN_TYPE.LEN2: size = 8; break;\r\n        case BACKING_LEN_TYPE.LEN4: size = 4; break;\r\n        case BACKING_LEN_TYPE.LEN8: size = 2; break;\r\n        case BACKING_LEN_TYPE.LEN16: size = 1; break;\r\n    }\r\n    if (lenBean.isHalf) {\r\n        size *= 1.5;\r\n    }\r\n    return size;\r\n}\r\n\r\nexport default NotesMatrix;","import { BackingEditorState, BackingLayer, BACKING_LEN_TYPE, DetailChord } from \"contents/redux/store\";\r\nimport { useRef } from \"react\";\r\n\r\n\r\ntype SplitMeasureProps = {\r\n    paletteState: BackingEditorState;\r\n    layer: BackingLayer;\r\n}\r\n\r\nconst SplitMeasure = (props: SplitMeasureProps) => {\r\n\r\n    const curLayer = props.layer;\r\n    const paletteState = props.paletteState;\r\n    const sustainLength = (paletteState.sustain + paletteState.headAdjust + paletteState.tailAdjust) * 4;\r\n\r\n    // 音価のメジャー\r\n    const measureInner: JSX.Element[] = [];\r\n    let measureLength = 0;\r\n    curLayer.lens.forEach((lenBean, i) => {\r\n        let cnt = 0;\r\n        switch (lenBean.len) {\r\n            case BACKING_LEN_TYPE.LEN1: cnt = 16; break;\r\n            case BACKING_LEN_TYPE.LEN2: cnt = 8; break;\r\n            case BACKING_LEN_TYPE.LEN4: cnt = 4; break;\r\n            case BACKING_LEN_TYPE.LEN8: cnt = 2; break;\r\n            case BACKING_LEN_TYPE.LEN16: cnt = 1; break;\r\n        }\r\n        if (lenBean.isHalf) {\r\n            cnt *= 1.5;\r\n        }\r\n        measureLength += cnt;\r\n    });\r\n    // コードブロックの拍の方が長い場合は上書き\r\n    const isLimit = measureLength > sustainLength;\r\n    measureLength = (!isLimit ? sustainLength : measureLength);\r\n    for (let i = 0; i < measureLength; i++) {\r\n        const pos = i + (paletteState.headAdjust * 4);\r\n        const getLen = () => {\r\n            if (pos % 2 == 0) {\r\n                if (pos % 4 == 0) {\r\n                    return 'mem4';\r\n                } else {\r\n                    return 'mem8';\r\n                }\r\n            } else {\r\n                return 'mem16';\r\n            }\r\n        }\r\n        const isLimit = false;//i == sustainLength;\r\n        measureInner.push(<div key={i} className={getLen() + (isLimit ? ' limit' : '')} />);\r\n    }\r\n\r\n    const limitLeft = sustainLength * 31;\r\n    const limitJsx = !isLimit ?\r\n        (<div style={{\r\n            left: `${limitLeft}px`,\r\n            width: '5px'\r\n        }} className=\"safe\"></div>)\r\n        :\r\n        (<div style={{\r\n            left: `${limitLeft}px`,\r\n            width: `${(measureLength - sustainLength) * 31}px`\r\n        }} className=\"over\"></div>);\r\n    return (\r\n        <div className=\"measure\">\r\n            {measureInner}\r\n            {limitJsx}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SplitMeasure;","import { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { BackingEditorState, BACKING_LEN_TYPE, ChannelParam, DetailChord } from \"contents/redux/store\";\r\nimport { createContext } from \"react\";\r\nimport BackingOperation from \"./BackingOperation\";\r\nimport NotesMatrix from \"./NotesMatrix\";\r\nimport SplitMeasure from \"./SplitMeasure\";\r\n\r\n\r\nexport type ChannelBean = {\r\n    soundIndex: number;\r\n    soundFullName: string;\r\n}\r\n\r\ntype BackingTableProps = {\r\n    paletteState: BackingEditorState;\r\n    dispatcher: Dispatcher;\r\n    channelList: ChannelBean[];\r\n    testPlaySound: Function;\r\n}\r\n\r\nconst BackingTable = (props: BackingTableProps) => {\r\n\r\n    const paletteState = props.paletteState;\r\n    const sideIndex = paletteState.sideIndex;\r\n    const curLayer = paletteState.layers[sideIndex];\r\n    const dispatcher = props.dispatcher;\r\n    const channelList = props.channelList;\r\n    const testPlaySound = props.testPlaySound;\r\n\r\n\r\n    const channelJsxList: JSX.Element[] = [];\r\n    // チャンネル数に対してボイシングが足りなければ、その数（高音）だけ空白を設定する\r\n    const blankAdjust = paletteState.channelRowSize - channelList.length;\r\n    for (let i = 0; i < paletteState.channelRowSize; i++) {\r\n        // ブランクの数だけボイシングから取得するインデックスを調整する\r\n        const curIndex = i - blankAdjust;\r\n        // チャンネルに音が設定済みかどうか\r\n        const isExist = curIndex >= 0;\r\n        let soundFullName = '-';\r\n        if (isExist) {\r\n            soundFullName = channelList[curIndex].soundFullName;\r\n        }\r\n        channelJsxList.push(\r\n            <div key={i}>\r\n                <div\r\n                    className={[\r\n                        'channel',\r\n                        !isExist ? 'blank' : ''\r\n                    ].join(' ')}\r\n                    onClick={() => {\r\n                        if (isExist) {\r\n                            testPlaySound(soundFullName)\r\n                        }\r\n                    }}\r\n                >\r\n                    <span>{soundFullName}</span>\r\n                </div>\r\n                <div\r\n                    className={[\r\n                        'opr',\r\n                        props.paletteState.channelRowSize == 1 ? 'disable' : ''\r\n                    ].join(' ')}\r\n                    onClick={() => {\r\n                        const backing = props.paletteState;\r\n                        const layers = backing.layers;\r\n                        const index = backing.channelRowSize - (i + 1);\r\n                        layers.forEach((layer) => {\r\n                            layer.table.splice(index, 1);\r\n                        });\r\n                        backing.channelRowSize = backing.channelRowSize - 1;\r\n                        dispatcher.backing.setPaletteState(props.paletteState);\r\n                    }}\r\n                >\r\n                    <span>-</span>\r\n                </div>\r\n                <div\r\n                    className={[\r\n                        'opr',\r\n                        props.paletteState.channelRowSize == 12 ? 'disable' : ''\r\n                    ].join(' ')}\r\n                    onClick={() => {\r\n                        const backing = props.paletteState;\r\n                        const layers = backing.layers;\r\n                        const index = backing.channelRowSize - (i + 1);\r\n                        layers.forEach((layer) => {\r\n                            const record: boolean[][] = [];\r\n                            for (let j = 0; j < layer.lens.length; j++) {\r\n                                record.push([false]);\r\n                            }\r\n                            layer.table.splice(index, 0, record);\r\n                        });\r\n                        backing.channelRowSize = backing.channelRowSize + 1;\r\n                        dispatcher.backing.setPaletteState(props.paletteState);\r\n                    }}\r\n                >\r\n                    <span>+</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // 音価の分割リスト\r\n    const lens: JSX.Element[] = [];\r\n    const volumeList: JSX.Element[] = [];\r\n    curLayer.lens.forEach((lenBean, i) => {\r\n        const isSelected = paletteState.selectedLenIndex == i;\r\n        let classes = isSelected ? 'active ' : '';\r\n        let label = '';\r\n        switch (lenBean.len) {\r\n            case BACKING_LEN_TYPE.LEN4: classes += 'len4'; label = '4'; break;\r\n            case BACKING_LEN_TYPE.LEN8: classes += 'len8'; label = '8'; break;\r\n            case BACKING_LEN_TYPE.LEN16: classes += 'len16'; label = '16'; break;\r\n            case BACKING_LEN_TYPE.LEN2: classes += 'len2'; label = '2'; break;\r\n            case BACKING_LEN_TYPE.LEN1: classes += 'len1'; label = '1'; break;\r\n        }\r\n        if (lenBean.isHalf) {\r\n            label += ' .';\r\n            classes += ' half';\r\n        }\r\n        if (lenBean.isDiv3) {\r\n            label += ' /';\r\n        }\r\n        lens.push(\r\n            <div\r\n                key={i}\r\n                className={classes}\r\n                onClick={() => {\r\n                    dispatcher.initBackingPalette({\r\n                        ...paletteState,\r\n                        selectedLenIndex: i\r\n                    });\r\n                }}>\r\n                <span>{label}</span>\r\n            </div>\r\n        );\r\n        const volume = curLayer.vels[i];\r\n        volumeList.push(\r\n            <div\r\n                key={i}\r\n                className={classes}\r\n            >\r\n                <div style={{ height: (volume * 10) + '%' }}></div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"backing-table\">\r\n            <div className=\"switch\">\r\n                <BackingOperation\r\n                    dispatcher={dispatcher}\r\n                    paletteState={paletteState}\r\n                />\r\n            </div>\r\n            <div className=\"fixed\">\r\n                <div className=\"layer\">\r\n                    <button\r\n                        className={\r\n                            paletteState.sideIndex == 1 ? 'active' : ''\r\n                        }\r\n                        onClick={() => {\r\n                            dispatcher.backing.setLayerIndex(1);\r\n                        }}\r\n                    >\r\n                        <span>R-Layer</span>\r\n                    </button>\r\n                    <button\r\n                        className={\r\n                            paletteState.sideIndex == 0 ? 'active' : ''\r\n                        }\r\n                        onClick={() => {\r\n                            dispatcher.backing.setLayerIndex(0);\r\n                        }}\r\n                    >\r\n                        <span>L-Layer</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"matrix\">\r\n                    {channelJsxList}\r\n                </div>\r\n                <div className=\"pedal\">\r\n                    <button\r\n                        className={\r\n                            paletteState.isUsePedal ? 'active' : ''\r\n                        }\r\n                        onClick={() => {\r\n                            dispatcher.backing.setUsePedal(!paletteState.isUsePedal);\r\n                        }}\r\n                    >\r\n                        <span>Pedal</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"main\">\r\n                <div className=\"split\">\r\n                    {lens}\r\n                </div>\r\n                <SplitMeasure\r\n                    paletteState={paletteState}\r\n                    layer={curLayer}\r\n                />\r\n                <NotesMatrix\r\n                    paletteState={paletteState}\r\n                    channelList={channelList}\r\n                    dispatcher={dispatcher}\r\n                />\r\n                <div className=\"volume\">\r\n                    {volumeList}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BackingTable;","import styled from \"styled-components\";\r\n\r\n\r\nexport const _Record = styled.div<{\r\n    backgroundColor?: string,\r\n    textAlign?: string,\r\n    padding?: string,\r\n    margin?: string,\r\n}>`\r\n    display: inline-block;\r\n    background-color: ${(props) => props.backgroundColor};\r\n    width: 100%;\r\n    padding: ${(props) => props.padding};\r\n    margin: ${(props) => props.margin};\r\n    text-align: ${(props) => props.textAlign};\r\n    box-sizing: border-box;\r\n`;\r\n_Record.defaultProps = {\r\n    backgroundColor: 'inherit',\r\n    textAlign: 'inherit',\r\n    padding: '0',\r\n    margin: '0'\r\n}\r\n\r\nexport const _Hide = styled.div`\r\n    opacity: ${(props: { opacity: number }) => props.opacity}\r\n`;\r\n\r\nexport const _Text = styled.span<{\r\n    fontSize?: string,\r\n    color?: string,\r\n    fontWeight?: string\r\n}>`\r\n    font-size: ${(props)=> props.fontSize};\r\n    color: ${(props)=> props.color};\r\n    font-weight: ${(props)=> props.fontWeight};\r\n`;\r\n_Text.defaultProps = {\r\n    fontSize: 'inherit',\r\n    color: 'inherit',\r\n    fontWeight: 'inherit'\r\n}","import { SymbolParams } from \"contents/common/define\";\r\nimport { _Text } from \"contents/common/Styles\";\r\nimport { BackingEditorState } from \"contents/redux/store\";\r\n\r\nexport const StructMatrix = (props: {\r\n    paletteState: BackingEditorState;\r\n    structs: string[];\r\n    symbol: SymbolParams;\r\n    degreeIndex: number;\r\n    testPlaySound: Function;\r\n    setUseChannels: Function\r\n}) => {\r\n    const useChannels = props.paletteState.useChannels;\r\n\r\n    const structTable: JSX.Element[] = [];\r\n    const ChordStructMax = 7;\r\n    const OctaveMax = 8;\r\n    \r\n    // 音程の降順にソート\r\n    useChannels.sort((a, b) => {\r\n        return (a.octave * 12 + a.structIndex) - (b.octave * 12 + b.structIndex);\r\n    });\r\n    const overVoicingList = useChannels.slice(props.paletteState.channelRowSize);\r\n    for (let i = 0; i < ChordStructMax; i++) {\r\n        // for (let i = ChordStructMax - 1; i >= 0; i--) {\r\n        const isUse = i < props.structs.length;\r\n        const cols: JSX.Element[] = [];\r\n        if (isUse) {\r\n            const soundName = props.structs[i];\r\n            const hasDom = props.structs.length - props.symbol.intervals.length == 1;\r\n            const index = hasDom ? i - 1 : i;\r\n            const interval = index == -1 ? -1 : props.symbol.intervals[index];\r\n            const relation = index == -1 ? 'dom' : props.symbol.struct[index];\r\n            // 左の固定列\r\n            cols.push(\r\n                <div key={0} className=\"label\">\r\n                    <span>{relation}[{interval}]: <_Text color=\"#000\">{soundName}</_Text></span>\r\n                </div>\r\n            );\r\n            // 中のマトリクス\r\n            for (let j = 0; j < OctaveMax; j++) {\r\n                // for (let j = OctaveMax - 1; j >= 0; j--) {\r\n                const soundIndex = props.degreeIndex + interval + j * 12;\r\n                const octave = Math.floor(soundIndex / 12);\r\n                const soundFullName = soundName + octave;\r\n                const isNone = soundIndex < 9 || soundIndex >= 97;\r\n                let isSelected = false;\r\n                useChannels.forEach((channel) => {\r\n                    if (channel.octave == j && channel.structIndex == i) {\r\n                        isSelected = true;\r\n                    }\r\n                });\r\n                // チャンネルが最大数に達している場合、それ以上増やせない\r\n                // const isLimit = props.paletteState.useChannels.length >= props.paletteState.channelRowSize && !isSelected;\r\n                const isLimit = useChannels.length >= 12 && !isSelected;\r\n\r\n                // if(isSelected) {\r\n                //     useChannels.forEach((channel, k) =>{\r\n                //         if (channel.octave == j && channel.structIndex == i) {\r\n\r\n                //         }\r\n                //     });\r\n                // }\r\n                let isOverVoicing = false;\r\n                overVoicingList.forEach((channel) => {\r\n                    if (channel.octave == j && channel.structIndex == i) {\r\n                        isOverVoicing = true;\r\n                    }\r\n                });\r\n\r\n                cols.push(\r\n                    <div\r\n                        key={j + 1}\r\n                        className={[\r\n                            'col',\r\n                            (isNone || isLimit ? 'disable' : ''),\r\n                            (isSelected ? 'active' : ''),\r\n                            (isOverVoicing ? 'over' : '')\r\n                        ].join(' ')}\r\n                        onClick={() => {\r\n                            const list = props.paletteState.useChannels;\r\n                            if (!isSelected) {\r\n                                list.push({ octave: j, structIndex: i });\r\n                            } else {\r\n                                let pos = -1;\r\n                                list.forEach((channel, index) => {\r\n                                    if (channel.octave == j && channel.structIndex == i) {\r\n                                        pos = index;\r\n                                    }\r\n                                });\r\n                                list.splice(pos, 1);\r\n                            }\r\n                            list.sort((a, b) => {\r\n                                const aVal = a.octave * 8 + a.structIndex;\r\n                                const bVal = b.octave * 8 + b.structIndex;\r\n                                return aVal - bVal;;\r\n                            });\r\n                            props.paletteState.useChannels = list;\r\n                            props.setUseChannels(props.paletteState.useChannels);\r\n                        }}\r\n                        onContextMenu={() => {\r\n                            props.testPlaySound(soundFullName);\r\n                        }}\r\n                    >\r\n                        <span>{!isNone ? soundFullName : '-'}</span>\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            // 空の要素を入れる\r\n            cols.push(\r\n                <div key={0} className=\"label\"></div>\r\n            );\r\n            for (let j = 0; j < OctaveMax; j++) {\r\n                cols.push(\r\n                    <div key={j + 1} className=\"col\"></div>\r\n                );\r\n            }\r\n        }\r\n        structTable.push(\r\n            <div\r\n                key={i}\r\n                className={\r\n                    'record' +\r\n                    (!isUse ? ' disable' : '')\r\n                }\r\n            >\r\n                {cols}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"struct-table\">\r\n            {structTable}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StructMatrix;","\r\nimport { KEY12_SHARP_LIST, SymbolParams, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport { applyOnChord, getChordRoot, getSymbolParams } from \"contents/common/utils\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { DetailChord, FloatWndState, CHORD_MODE, BACKING_LEN_TYPE, BackingLen, BACKING_SIDE, BackingEditorState, BackingLayer, ChannelParam, Key12Info } from \"contents/redux/store\";\r\nimport { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\n\r\nimport './BackingEditor.css';\r\nimport BackingTable, { ChannelBean } from \"./BackingTable\";\r\nimport StructMatrix from \"./StructMatrix\";\r\n\r\ntype BackingContextType = {\r\n    // isCorrect: boolean;\r\n    // setCorrect: (isCorrect: boolean) => void;\r\n    editorState: BackingEditorState;\r\n}\r\n\r\nexport const BackingContext = createContext({} as BackingContextType);\r\n\r\nconst BackingEditor = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    // const [isCorrect, setCorrect] = useState(true);\r\n\r\n    /** コンテキストメニューの要素オブジェクト */\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, chordPalette: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_BACKING_PALETTE, { reffer: ref.current });\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     dispatcher.backing.setCorrect(isCorrect);\r\n    // }, [isCorrect]);\r\n    // if (state.noteState.focusIndex == -1 ||\r\n    //     state.noteData.dataList[state.noteState.focusIndex].type != TypeNoteElement.Chord) {\r\n    //     return (<></>);\r\n    // }\r\n    if (state.noteState.floatwndState != FloatWndState.BACKING_PALETTE) {\r\n        return (<></>);\r\n    }\r\n\r\n    const paletteState = state.noteState.backingPaletteState as BackingEditorState;\r\n    \r\n    // const foocusIndex = state.noteState.focusIndex;\r\n    // const detail = state.noteData.dataList[foocusIndex].detail as DetailChord;\r\n    // const cache = state.noteState.cacheList[foocusIndex];\r\n    // if(detail.symbolKey == null) return (<></>);\r\n    // let rootIndex = (detail.molecule as Key12Info).rootIndex;\r\n    // const symbol: SymbolParams = { ...(getSymbolParams(detail.symbolKey) as SymbolParams) };\r\n\r\n    const molecule = paletteState.molecule as Key12Info;\r\n    const denominator = paletteState.denominator;\r\n    const symbol: SymbolParams = { ...(getSymbolParams(paletteState.symbolKey) as SymbolParams) };\r\n    const sustain = paletteState.sustain;\r\n    const headAdjust = paletteState.headAdjust;\r\n    const tailAdjust = paletteState.tailAdjust;\r\n\r\n    const root = KEY12_SHARP_LIST[molecule.rootIndex];\r\n    let chordName = root + symbol.name;\r\n    const structs: string[] = [];\r\n    //オンコードの追加\r\n    if (denominator != null) {\r\n\r\n        // コードネームの修正\r\n        chordName += `/${getChordRoot(denominator, 0)}`;\r\n        \r\n        // オンコードをシンボル情報に反映する\r\n        applyOnChord(symbol, molecule.rootIndex, denominator.rootIndex);\r\n    }\r\n    symbol.intervals.forEach((value) => {\r\n        // structs.push(KEY12_SHARP_LIST[(cache.init.keyIndex + rootIndex + value) % 12]);\r\n        structs.push(KEY12_SHARP_LIST[(molecule.rootIndex + value) % 12]);\r\n    });\r\n    \r\n    const channelList = getChannelList(paletteState.useChannels, molecule.rootIndex, symbol, structs);\r\n\r\n    const testPlaySound = (soundFullName: string) => {\r\n        state.sampler.triggerAttack(soundFullName, '+0', 0.15);\r\n        setTimeout(() => {\r\n            state.sampler.triggerRelease(soundFullName);\r\n        }, 1000);\r\n    };\r\n\r\n    let operation: JSX.Element = <></>;\r\n    operation = (<>\r\n        <div\r\n            onClick={() => {\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }}>\r\n            <span>Cancel</span>\r\n        </div>\r\n        <div\r\n            className={[\r\n                paletteState.isCorrect ? '' : 'disable'\r\n            ].join(' ')}\r\n            onClick={() => {\r\n                dispatcher.backing.play(false);\r\n            }}>\r\n            <span>Play</span>\r\n        </div>\r\n        <div\r\n            className={[\r\n                paletteState.isCorrect ? '' : 'disable'\r\n            ].join(' ')}\r\n            onClick={() => {\r\n                dispatcher.backing.setCurBackingScript();\r\n            }}>\r\n            <span>Update</span>\r\n        </div>\r\n    </>);\r\n    return (\r\n        <BackingContext.Provider value={{\r\n            editorState: paletteState\r\n            // isCorrect: isCorrect,\r\n            // setCorrect: (isCorrect) => setCorrect(isCorrect)\r\n        }}>\r\n            <div\r\n                ref={ref}\r\n                id=\"backing-palette\"\r\n                className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.BACKING_PALETTE ? ' active' : '')}\r\n                onClick={() => {\r\n                }}\r\n            >\r\n                <div className=\"base-info\">\r\n                    <div className=\"record\">\r\n                        <div className=\"title\"><span>Chord:</span></div>\r\n                        <div className=\"value\"><span>{chordName}</span></div>\r\n                    </div>\r\n                    <div className=\"record\">\r\n                        <div className=\"title\"><span>Category:</span></div>\r\n                        <div className=\"value\"><span>{symbol.category}</span></div>\r\n                    </div>\r\n                    <div className=\"record\">\r\n                        <div className=\"title\"><span>Struct:</span></div>\r\n                        <div className=\"value\"><span>{structs.join(', ')}</span></div>\r\n                    </div>\r\n                    <div className=\"record\">\r\n                        <div className=\"title\"><span>Sustain:</span></div>\r\n                        <div className=\"value\"><span>{sustain + headAdjust + tailAdjust}</span></div>\r\n                    </div>\r\n                </div>\r\n                <StructMatrix\r\n                    paletteState={paletteState}\r\n                    structs={structs}\r\n                    symbol={symbol}\r\n                    degreeIndex={molecule.rootIndex}\r\n                    testPlaySound={testPlaySound}\r\n                    setUseChannels={(useChannels: ChannelParam[]) => dispatcher.setUseChannels(useChannels)}\r\n                />\r\n                <BackingTable\r\n                    channelList={channelList}\r\n                    paletteState={paletteState}\r\n                    dispatcher={dispatcher}\r\n                    testPlaySound={testPlaySound}\r\n                />\r\n\r\n                <div className=\"operation\">\r\n                    {operation}\r\n                </div>\r\n            </div>\r\n        </BackingContext.Provider>\r\n    );\r\n}\r\n\r\nconst getChannelList = (useChannels: ChannelParam[], degreeIndex: number, symbol: SymbolParams, structs: string[]): ChannelBean[] => {\r\n\r\n    const channelList: ChannelBean[] = [];\r\n\r\n    const OctaveMax = 8;\r\n    for (let i = 0; i < symbol.intervals.length; i++) {\r\n        // for (let i = ChordStructMax - 1; i >= 0; i--) {\r\n        for (let j = 0; j < OctaveMax; j++) {\r\n            // for (let j = OctaveMax - 1; j >= 0; j--) {\r\n            const soundIndex = degreeIndex + symbol.intervals[i] + j * 12;\r\n            let isSelected = false;\r\n            useChannels.forEach((channel) => {\r\n                if (channel.octave == j && channel.structIndex == i) {\r\n                    isSelected = true;\r\n                }\r\n            });\r\n            const octave = Math.floor(soundIndex / 12);\r\n            const soundFullName = structs[i] + octave;\r\n            if (isSelected) {\r\n                channelList.push({ soundIndex, soundFullName });\r\n            }\r\n        }\r\n    }\r\n    // 音程の昇順にソート\r\n    channelList.sort((a, b) => {\r\n        return b.soundIndex - a.soundIndex;\r\n    });\r\n    return channelList;\r\n}\r\n\r\nexport default BackingEditor;","\r\nimport { getAdjustSusValue } from 'contents/common/utils';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { DetailChord, TypeNoteElement } from 'contents/redux/store';\r\nimport { useContext, useEffect, useRef, useState, VFC } from 'react';\r\nimport './FooterTiming.css';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from 'styled-components';\r\n\r\nconst MEM_WIDTH = 16;\r\nconst FIXED_BLANK = 100;\r\n\r\nconst StyleTest = styled.div`\r\n    font-size: 0;\r\n    display: inline-inline-block;\r\n`;\r\n\r\n\r\n\r\nconst FooterTiming: VFC = () => {\r\n\r\n    const { state, dispatcher } = useContext(GlobalContext);\r\n    const dataList = state.noteData.dataList;\r\n    const focusIndex = state.noteState.focusIndex;\r\n    const dataCount = state.noteData.dataList.length;\r\n\r\n    /** スクロールエリアのRef */\r\n    const scrollRef = useRef({} as HTMLDivElement);\r\n\r\n    const [blockJsxList, setBlockJsxList] = useState([] as JSX.Element[]);\r\n    const [measureJsxList, setMeasureJsxList] = useState([] as JSX.Element[]);\r\n    const [total, setTotal] = useState(0);\r\n\r\n    const chordDetail = dataList[focusIndex].type == TypeNoteElement.Chord ?\r\n        (dataList[focusIndex].detail as DetailChord) : null;\r\n    const sustain = chordDetail == null ? 0 : chordDetail.sustain;\r\n    const headAdjust = chordDetail == null ? 0 : chordDetail.headAdjust;\r\n    const tailAdjust = chordDetail == null ? 0 : chordDetail.tailAdjust;\r\n    useEffect(() => {\r\n        let total = 0;\r\n        const blockJsxList: JSX.Element[] = [];\r\n        const measureJsxList: JSX.Element[] = [];\r\n        const dataList = state.noteData.dataList;\r\n\r\n        dataList.forEach((data, i) => {\r\n\r\n            if (data.type == TypeNoteElement.Init) {\r\n                blockJsxList.push(\r\n                    <div\r\n                        key={blockJsxList.length}\r\n                        className={[\r\n                        ].join(' ')}\r\n                        style={{ width: `${FIXED_BLANK}px` }}\r\n                    />\r\n                )\r\n            }\r\n            if (data.type == TypeNoteElement.Chord) {\r\n                const detail = data.detail as DetailChord;\r\n                const len = detail.sustain + detail.headAdjust + detail.tailAdjust;\r\n                const width = len * MEM_WIDTH * 4;\r\n                const isCur = focusIndex == i;\r\n                const isNear = focusIndex == i - 1 || focusIndex == i + 1;\r\n                blockJsxList.push(\r\n                    <div\r\n                        key={blockJsxList.length}\r\n                        className={[\r\n                            isCur ? 'active' : '',\r\n                            isNear ? 'near' : '',\r\n                        ].join(' ')}\r\n                        style={{ width: `${width - 1}px` }}\r\n                    >\r\n                        <div className=\"sus\">\r\n                            <span>{detail.sustain}</span>\r\n                        </div>\r\n                        <div className=\"adjust\">\r\n                            <span className={getAdjustCls(detail.headAdjust)}>\r\n                                {getAdjustSusValue(detail.headAdjust)}\r\n                            </span>\r\n                            <span className={getAdjustCls(detail.tailAdjust)}>\r\n                                {getAdjustSusValue(detail.tailAdjust)}\r\n                            </span>\r\n                        </div>\r\n                    </div >\r\n                );\r\n                if (isCur) {\r\n                    scrollRef.current.scrollTo({ left: total * MEM_WIDTH - FIXED_BLANK, behavior: 'smooth' });\r\n                }\r\n                total += len * 4;\r\n            }\r\n        });\r\n\r\n        // measureJsxList.push(\r\n        //     <div key={measureJsxList.length} className=\"blank\" style={{ left: `${0}px` }} />\r\n        // )\r\n        for (let i = 0; i < total; i++) {\r\n            let name = '';\r\n            const isBar = i % 16 == 0;\r\n            /** 小節数 */\r\n            const barCount = 1 + (i / 16);\r\n            if (isBar) {\r\n                name = 'mem-bar';\r\n            } else {\r\n                switch (i % 4) {\r\n                    case 0: name = 'mem4'; break;\r\n                    case 2: name = 'mem8'; break;\r\n                    default: name = 'mem16'; break;\r\n                }\r\n            }\r\n            measureJsxList.push(\r\n                <div key={measureJsxList.length} className={name} style={{ left: `${FIXED_BLANK + i * MEM_WIDTH}px` }}>{\r\n                    i % 16 == 0 ?\r\n                        <div className=\"bar\" style={{ left: `${-14}px`, top: '24px' }}>{barCount}</div>\r\n                        :\r\n                        <></>\r\n                }</div>\r\n            );\r\n        }\r\n        // alert(measureJsxList.length);\r\n        setBlockJsxList(blockJsxList);\r\n        setMeasureJsxList(measureJsxList);\r\n        setTotal(total);\r\n    }, [dataCount, focusIndex, sustain, headAdjust, tailAdjust]);\r\n\r\n    if (chordDetail == null) {\r\n        return (<></>);\r\n    }\r\n\r\n    const totalWidth = FIXED_BLANK * 2 + total * MEM_WIDTH;\r\n    return (\r\n        <div id=\"footer-timing\" className=\"footer-child\">\r\n            <div className=\"scroll\" ref={scrollRef}>\r\n                <div className=\"blocks\" style={{ width: `${totalWidth}px` }}>\r\n                    {blockJsxList}\r\n                </div>\r\n                <div className=\"measure\" style={{ width: `${totalWidth}px` }}>\r\n                    {measureJsxList}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst getAdjustCls = (value: number): string => {\r\n    let ret = '';\r\n    if (value != 0) {\r\n        if (value > 0) ret = 'aug';\r\n        else ret = 'dim';\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport default FooterTiming;","\r\nimport { getAdjustSusValue } from 'contents/common/utils';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { DetailChord, TypeNoteElement } from 'contents/redux/store';\r\nimport { useContext, useEffect, useRef, useState, VFC } from 'react';\r\n// import './FooterEnsemble.css';\r\n\r\nconst FooterEnsemble: VFC = () => {\r\n\r\n    const { state, dispatcher } = useContext(GlobalContext);\r\n    const dataList = state.noteData.dataList;\r\n    const focusIndex = state.noteState.focusIndex;\r\n    const dataCount = state.noteData.dataList.length;\r\n\r\n    // const [blockJsxList, setBlockJsxList] = useState([] as JSX.Element[]);\r\n\r\n \r\n    return (\r\n        <div id=\"footer-ensemble\" className=\"footer-child\">\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FooterEnsemble;","\r\nimport TabbedPane from 'contents/common/TabbedPane';\r\nimport FooterTiming from './timing/FooterTiming';\r\nimport './NoteFooter.css';\r\nimport FooterEnsemble from './ensemble/FooterEnsemble';\r\n\r\nconst NoteFooter = () => {\r\n\r\n    return (\r\n        <div id=\"score-footer\">\r\n            <TabbedPane groupName=\"score-tabs\"\r\n                tabElements={[\r\n                    { name: 'Progress', disable: false, cont: <FooterTiming /> },\r\n                    { name: 'Target', disable: true, cont: <div></div> },\r\n                    { name: 'Ensemble', disable: false, cont: <FooterEnsemble /> }\r\n                ]}\r\n                activeNo={0}\r\n            // selectTabIndex={(index: number) => dispatch(ActionType.SELECT_SCORETAB, { index: index })}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoteFooter;","import { KEY12_MAJOR_SCALE_LIST, KEY12_MINOR_SCALE_LIST, RYTHM_LIST, SCALE_LIST } from \"contents/common/define\";\r\nimport { GlobalContext } from \"contents/MainFrame\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { CHORD_MODE, FloatWndState } from \"contents/redux/store\";\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport './InitEditor.css';\r\n\r\nconst InitEditor = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    const [tempo, setTempo] = useState(55);\r\n    const [rythm, setRythm] = useState('4/4');\r\n    const [keyIndex, setKey] = useState(0);\r\n    const [scale, setScale] = useState('major');\r\n\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, chordPalette: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_CHORD_PALETTE, { reffer: ref.current });\r\n    }, []);\r\n\r\n    let operation: JSX.Element = <></>;\r\n    operation = (<>\r\n        <div\r\n            onClick={() => {\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }}>\r\n            <span>Cancel</span>\r\n        </div>\r\n        <div\r\n            onClick={() => {\r\n                dispatcher.init.setInitParam(tempo, rythm, keyIndex, scale);\r\n            }}>\r\n            <span>Enter</span>\r\n        </div>\r\n    </>);\r\n\r\n\r\n\r\n    const getItemSlider = (label: string, list: string[]): JSX.Element => {\r\n        return (\r\n            <div className=\"item\">\r\n                <div className=\"label\">\r\n                    <span>{label}</span>\r\n                </div>\r\n                <div className=\"value\">\r\n                    {/* <span>{tempo}</span> */}\r\n                    <input\r\n                        type=\"number\" value={tempo} min=\"30\" max=\"180\"\r\n                        onChange={(e) => {\r\n                            setTempo(Number(e.target.value));\r\n                        }}\r\n                    />\r\n                    <input\r\n                        type=\"range\" name=\"speed\" min=\"30\" max=\"180\" value={tempo}\r\n                        onChange={(e) => {\r\n                            setTempo(Number(e.target.value));\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    const getItemSelector = (label: string, value: string, callback: (value: string) => void,\r\n        list: { value: string, display: string }[]): JSX.Element => {\r\n        const optionsJsx: JSX.Element[] = [];\r\n        list.forEach((data) => {\r\n            optionsJsx.push(\r\n                <option key={optionsJsx.length} value={data.value}>{data.display}</option>\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"item\">\r\n                <div className=\"label\">\r\n                    <span>{label}</span>\r\n                </div>\r\n                <div className=\"value\">\r\n                    <select\r\n                        value={value}\r\n                        onChange={(e) => {\r\n                            callback(e.target.value);\r\n                        }}\r\n                    >\r\n                        {optionsJsx}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    const isDirect = state.noteData.chordMode == CHORD_MODE.DIRECT;\r\n    return (\r\n        <div\r\n            id=\"init-editor\"\r\n            className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.INIT_PALETTE ? ' active' : '')}\r\n            onClick={() => {\r\n            }}\r\n        >\r\n            <div className=\"items\">\r\n                {getItemSlider('Tempo', [])}\r\n                {getItemSelector('Beat', rythm, (value: string) => { setRythm(value) },\r\n                    RYTHM_LIST.map(item => { return { value: item, display: item } })\r\n                )}\r\n                {isDirect ? <></> :\r\n                    getItemSelector('Scale', scale, (value: string) => { setScale(value) },\r\n                        SCALE_LIST.map(item => { return { value: item, display: item } })\r\n                    )\r\n                }\r\n                {isDirect ? <></> :\r\n                    getItemSelector('Key', String(keyIndex), (value: string) => { setKey(Number(value)) },\r\n                        (scale == SCALE_LIST[0] ?\r\n                            // メジャースケールの時のリスト\r\n                            KEY12_MAJOR_SCALE_LIST.map((item, i) => { return { value: i.toString(), display: item } })\r\n                            :\r\n                            // マイナースケールの時のリスト\r\n                            KEY12_MINOR_SCALE_LIST.map((item, i) => { return { value: i.toString(), display: item } })\r\n                        )\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"operation\">\r\n                {operation}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InitEditor;\r\n\r\nconst StyledButton = styled.span`\r\n  user-select: none;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  margin: 1em;\r\n  padding: 0.3em 0.5em;\r\n  border-radius: 0.2em;\r\n  border: solid 1px #3498db;\r\n  color: #fff;\r\n  background-color: #3498db;\r\n`","\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport { FloatWndState } from 'contents/redux/store';\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport './SectionEditor.css';\r\n\r\nconst SectionEditor = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, chordPalette: ref.current }});\r\n        dispatch(ActionType.GET_REFFER_SECTION_PALETTE, { reffer: ref.current });\r\n    }, []);\r\n\r\n    const [labelName, setLabelName] = useState('Section');\r\n\r\n    let operation: JSX.Element = <></>;\r\n    operation = (<>\r\n        <div\r\n            onClick={() => {\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }}>\r\n            <span>Cancel</span>\r\n        </div>\r\n        <div\r\n            onClick={() => {\r\n                dispatcher.section.setSectionParam(labelName);\r\n            }}>\r\n            <span>Enter</span>\r\n        </div>\r\n    </>);\r\n\r\n    const getTextForm = (label: string, value: string, callback: (value: string) => void): JSX.Element => {\r\n        return (\r\n            <div className=\"item\">\r\n                <div className=\"label\">\r\n                    <span>{label}</span>\r\n                </div>\r\n                <div className=\"value\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={value}\r\n                        onChange={(e) => {\r\n                            callback(e.target.value);\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n\r\n        <div\r\n            id=\"section-editor\"\r\n            className={'floatwnd' + (state.noteState.floatwndState == FloatWndState.SECTION_PALETTE ? ' active' : '')}\r\n            onClick={() => {\r\n            }}\r\n        >\r\n            <div className=\"items\">\r\n                {getTextForm('Name', labelName, (value: string) => { setLabelName(value) })}\r\n            </div>\r\n            <div className=\"operation\">\r\n                {operation}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SectionEditor;","import { GlobalContext } from 'contents/MainFrame';\r\nimport { FloatWndState } from 'contents/redux/store';\r\nimport { useContext } from 'react';\r\nimport './SettingEditor.css';\r\n\r\nconst SettingEditor = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n\r\n    if (state.noteState.floatwndState != FloatWndState.SETTING_EDITOR) {\r\n        return (<></>);\r\n    }\r\n    const defsus = state.noteState.defaultSustain;\r\n    const sustainJsxList: JSX.Element[] = [];\r\n    for (let i = 0; i < 8; i++) {\r\n        sustainJsxList.push(\r\n            <div\r\n                key={sustainJsxList.length}\r\n                className={[\r\n                    i + 1 <= defsus ? 'active' : ''\r\n                ].join(' ')}\r\n                onClick={()=>{\r\n                    dispatcher.score.setNoteState({...state.noteState, defaultSustain: i + 1});\r\n                }}\r\n            />\r\n        );\r\n    }\r\n    return (\r\n        <div id=\"setting-editor\"\r\n            className=\"floatwnd active\">\r\n            <div className=\"sustain\">{sustainJsxList}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingEditor;\r\n","\r\nimport { RYTHM_LIST, TimeSignatures } from 'contents/common/define';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport { ChangeType, CHORD_MODE, FloatWndState, ModulateRelation, TempoRelation } from 'contents/redux/store';\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport './ChangeEditor.css';\r\n\r\nconst ChangeEditor = () => {\r\n\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n\r\n    const ref = useRef({} as HTMLDivElement);\r\n    useEffect(() => {\r\n        // dispatch(ActionType.GET_REFFER, { reffers: {...state.reffers, chordPalette: ref.current }});\r\n        // dispatch(ActionType.GET_REFFER_SECTION_PALETTE, { reffer: ref.current });\r\n    }, []);\r\n\r\n    const [changeType, setChangeType] = useState<string>('');\r\n    const [modulateRelation, setModulateRelation] = useState<string>('');\r\n    const [domminantValue, setDomminantValue] = useState<'' | number>('');\r\n    const [keyAdjust, setKeyAdjust] = useState<'' | number>('');\r\n    const [tempoRelation, setTempoRelation] = useState<string>('');\r\n    const [tempoRate, setTempoRate] = useState<'' | number>('');\r\n    const [tempoDiff, setTempoDiff] = useState<'' | number>('');\r\n    const [tempoAbsolute, setTempoAbsolute] = useState<'' | number>('');\r\n    const [beat, setBeat] = useState<string>('');\r\n\r\n    const [isInputOK, setInputOK] = useState<boolean>(false);\r\n\r\n    const chordMode = state.noteData.chordMode;\r\n\r\n    const checkInput = () => {\r\n        setInputOK(false);\r\n        switch (changeType) {\r\n            case ChangeType.MODULATE: {\r\n                switch (modulateRelation) {\r\n                    case ModulateRelation.DOMINANT: {\r\n                        if (domminantValue !== '') setInputOK(true);\r\n                    }\r\n                        break;\r\n                    case ModulateRelation.KEY: {\r\n                        if (keyAdjust !== '') setInputOK(true);\r\n                    }\r\n                        break;\r\n                    case ModulateRelation.RELATIVE: {\r\n                        setInputOK(true);\r\n                    }\r\n                        break;\r\n                    case ModulateRelation.PARALLEL: {\r\n                        setInputOK(true);\r\n                    }\r\n                        break;\r\n                }\r\n            }\r\n                break;\r\n            case ChangeType.TEMPO: {\r\n                switch (tempoRelation) {\r\n                    case TempoRelation.DIFF: {\r\n                        if (tempoDiff !== '') setInputOK(true);\r\n                    }\r\n                        break;\r\n                    case TempoRelation.RATE: {\r\n                        if (tempoRate !== '') setInputOK(true);\r\n                    }\r\n                        break;\r\n                    case TempoRelation.ABSOLUTE: {\r\n                        if (tempoAbsolute !== '') setInputOK(true);\r\n                    }\r\n                        break;\r\n                }\r\n            }\r\n                break;\r\n            case ChangeType.BEAT: {\r\n                if (beat !== '') setInputOK(true);\r\n            }\r\n                break;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkInput();\r\n    }, [changeType, modulateRelation, domminantValue, keyAdjust,\r\n        tempoRelation, tempoDiff, tempoRate, tempoAbsolute, beat\r\n    ]);\r\n\r\n    const directModeFilter = (type: ChangeType) => !(chordMode === CHORD_MODE.DIRECT && type === ChangeType.MODULATE);\r\n    let itemsJsxList: JSX.Element[] = [];\r\n    itemsJsxList.push(\r\n        getItemSelectorJsx(itemsJsxList.length, 'Change Type', changeType,\r\n            (value: string) => {\r\n                setChangeType(value);\r\n                if (value !== ChangeType.MODULATE) {\r\n                    setModulateRelation('');\r\n                    setDomminantValue('');\r\n                    setKeyAdjust('');\r\n                }\r\n                if (value !== ChangeType.TEMPO) {\r\n                    setTempoRelation('');\r\n                    setTempoRate('');\r\n                    setTempoDiff('');\r\n                    setTempoAbsolute('');\r\n                }\r\n                if (value !== ChangeType.BEAT) {\r\n                    setBeat('');\r\n                }\r\n            },\r\n            // 先頭に空白を挿入\r\n            [{ value: '', display: '' }].concat(\r\n                Object.values(ChangeType).filter(directModeFilter).map((item) => {\r\n                    return { value: item.toString(), display: item.toString() };\r\n                })\r\n            ),\r\n            false\r\n        )\r\n    );\r\n\r\n    // スケールモード時のみ追加\r\n    if (chordMode === CHORD_MODE.SCALE) {\r\n        itemsJsxList.push(\r\n            getItemSelectorJsx(itemsJsxList.length, 'Modulate Relation', modulateRelation,\r\n                (value: string) => {\r\n                    setModulateRelation(value);\r\n\r\n                    if (value !== ModulateRelation.KEY) {\r\n                        setKeyAdjust('');\r\n                    }\r\n                    if (value !== ModulateRelation.DOMINANT) {\r\n                        setDomminantValue('');\r\n                    }\r\n                },\r\n                // 先頭に空白を挿入\r\n                [{ value: '', display: '' }].concat(\r\n                    Object.values(ModulateRelation).map((item) => {\r\n                        const str = item.toString();\r\n                        return { value: str, display: str };\r\n                    })\r\n                ),\r\n                changeType !== ChangeType.MODULATE.toString()\r\n            )\r\n        );\r\n        itemsJsxList.push(\r\n            getItemNumberRangeJsx(itemsJsxList.length, 'Domminant Value', domminantValue, -3, 3,\r\n                (value: string) => {\r\n                    setDomminantValue(value as '' | number);\r\n                },\r\n                modulateRelation !== ModulateRelation.DOMINANT.toString()\r\n            )\r\n        );\r\n        itemsJsxList.push(\r\n            getItemNumberRangeJsx(itemsJsxList.length, 'Key Adjust', keyAdjust, -3, 3,\r\n                (value: string) => {\r\n                    setKeyAdjust(value as '' | number);\r\n                },\r\n                modulateRelation !== ModulateRelation.KEY.toString()\r\n            )\r\n        );\r\n    }\r\n    itemsJsxList.push(\r\n        getItemSelectorJsx(itemsJsxList.length, 'Tempo Relation', tempoRelation,\r\n            (value: string) => {\r\n                setTempoRelation(value);\r\n\r\n                if (value !== TempoRelation.RATE) {\r\n                    setTempoRate('');\r\n                }\r\n                if (value !== TempoRelation.DIFF) {\r\n                    setTempoDiff('');\r\n                }\r\n                if (value !== TempoRelation.ABSOLUTE) {\r\n                    setTempoAbsolute('');\r\n                }\r\n            },\r\n            // 先頭に空白を挿入\r\n            [{ value: '', display: '' }].concat(\r\n                Object.values(TempoRelation).map((item) => {\r\n                    const str = item.toString();\r\n                    return { value: str, display: str };\r\n                })\r\n            ),\r\n            changeType !== ChangeType.TEMPO.toString()\r\n        )\r\n    );\r\n    itemsJsxList.push(\r\n        getItemNumberRangeJsx(itemsJsxList.length, 'Tempo Diff', tempoDiff, -150, 150,\r\n            (value: string) => {\r\n                setTempoDiff(value as '' | number);\r\n            },\r\n            tempoRelation !== TempoRelation.DIFF.toString()\r\n        )\r\n    );\r\n    itemsJsxList.push(\r\n        getItemNumberRangeJsx(itemsJsxList.length, 'Tempo Rate', tempoRate, 20, 200,\r\n            (value: string) => {\r\n                setTempoRate(value as '' | number);\r\n            },\r\n            tempoRelation !== TempoRelation.RATE.toString()\r\n        )\r\n    );\r\n    itemsJsxList.push(\r\n        getItemNumberRangeJsx(itemsJsxList.length, 'Tempo Absolute', tempoAbsolute, 30, 180,\r\n            (value: string) => {\r\n                setTempoAbsolute(value as '' | number);\r\n            },\r\n            tempoRelation !== TempoRelation.ABSOLUTE.toString()\r\n        )\r\n    );\r\n    itemsJsxList.push(\r\n        getItemSelectorJsx(itemsJsxList.length, 'Beat', beat,\r\n            (value: string) => {\r\n                setBeat(value);\r\n            },\r\n            // 先頭に空白を挿入\r\n            [{ value: '', display: '' }].concat(\r\n                Object.values(TimeSignatures).map((item) => {\r\n                    const key = item.toString();\r\n                    return { value: key, display: key };\r\n                })\r\n            ),\r\n            changeType !== ChangeType.BEAT.toString()\r\n        )\r\n    );\r\n\r\n    let operation: JSX.Element = <></>;\r\n    operation = (<>\r\n        <div\r\n            onClick={() => {\r\n                dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            }}>\r\n            <span>Cancel</span>\r\n        </div>\r\n        <div\r\n            className={[\r\n                isInputOK ? '' : 'disable'\r\n            ].join('')}\r\n            onClick={() => {\r\n                dispatcher.change.applyChangeParams(\r\n                    changeType as ChangeType,\r\n                    modulateRelation === '' ? null : modulateRelation as ModulateRelation,\r\n                    domminantValue === '' ? 0 : domminantValue as number,\r\n                    keyAdjust === '' ? 0 : keyAdjust as number,\r\n                    tempoRelation === '' ? null : tempoRelation as TempoRelation,\r\n                    tempoDiff === '' ? 0 : tempoDiff as number,\r\n                    tempoRate === '' ? 0 : tempoRate as number,\r\n                    tempoAbsolute === '' ? 0 : tempoAbsolute as number,\r\n                    beat === '' ? null : beat as TimeSignatures\r\n                );\r\n            }}>\r\n            <span>Enter</span>\r\n        </div>\r\n    </>);\r\n\r\n\r\n    return (\r\n\r\n        <div\r\n            id=\"change-editor\"\r\n            className={[\r\n                'floatwnd',\r\n                state.noteState.floatwndState == FloatWndState.CHANGE_PALETTE ? ' active' : ''\r\n            ].join(' ')}\r\n            onClick={() => {\r\n            }}\r\n        >\r\n            <div className=\"items\">\r\n                {itemsJsxList}\r\n            </div>\r\n            <div className=\"operation\">\r\n                {operation}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst getItemSelectorJsx = (key: number, label: string, value: string,\r\n    callback: (value: string) => void,\r\n    list: { value: string, display: string }[], isDisable: boolean\r\n): JSX.Element => {\r\n    const optionsJsx: JSX.Element[] = [];\r\n    list.forEach((data) => {\r\n        optionsJsx.push(\r\n            <option key={optionsJsx.length} value={data.value}>{data.display}</option>\r\n        );\r\n    });\r\n    return (\r\n        <div\r\n            key={key}\r\n            className={[\r\n                'record',\r\n                isDisable ? 'disable' : ''\r\n            ].join(' ')}\r\n        >\r\n            <div className=\"label\">{label}</div>\r\n            <div className=\"value\">\r\n                <select\r\n                    className={\r\n                        !isDisable && value === '' ? 'error' : ''\r\n                    }\r\n                    value={value}\r\n                    onChange={(e) => {\r\n                        callback(e.target.value);\r\n                    }}\r\n                >\r\n                    {optionsJsx}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst getItemNumberRangeJsx = (key: number, label: string, value: '' | number,\r\n    min: number, max: number, callback: (value: string) => void, isDisable: boolean\r\n): JSX.Element => {\r\n    return (\r\n        <div\r\n            key={key}\r\n            className={[\r\n                'record',\r\n                isDisable ? 'disable' : ''\r\n            ].join(' ')}\r\n        >\r\n            <div className=\"label\">{label}</div>\r\n            <div className=\"value\">\r\n                <input type=\"number\"\r\n                    className={\r\n                        !isDisable && (value === '' || !(value >= min && value <= max)) ? 'error' : ''\r\n                    }\r\n                    value={value} min={min} max={max}\r\n                    onChange={(e) => {\r\n                        callback(e.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChangeEditor;","import './ScoreContNoteTab.css';\r\n\r\n// import TabbedPane from './common/TabbedPane.jsx';\r\nimport { ScoreCache, DetailChord, DetailInit, DetailSection, EditMode, FloatWndState, Store, TypeNoteElement, ScoreProgress, DetailChange, ChangeType, ModulateRelation, TempoRelation } from 'contents/redux/store';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport React, { useContext, KeyboardEvent, useEffect, useState, useRef } from 'react';\r\n\r\nimport ScoreElement, { } from './element/ScoreElement';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport OutlineSection from './OutlineSection';\r\nimport { KeyboardShortCutAction } from '../../../../operation/InputNoteTab';\r\nimport NoteContextMenu from './floatwnd/context/NoteContextMenu';\r\nimport ChordSelector from './floatwnd/chord/ChordSelector';\r\nimport CurrentElementInfo from './sideDetail/CurrentElementInfo';\r\nimport BackingEditor from './floatwnd/backing/BackingEditor';\r\nimport NoteFooter from './footer/NoteFooter';\r\nimport styled from 'styled-components';\r\nimport InitEditor from './floatwnd/init/InitEditor';\r\nimport SectionEditor from './floatwnd/section/SectionEditor';\r\nimport SettingEditor from './floatwnd/setting/SettingEditor';\r\nimport ChangeEditor from './floatwnd/change/ChangeEditor';\r\n\r\nconst ScoreContNoteTab = () => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    /** 譜面の要素リスト */\r\n    const [elementList, setElementList] = useState([] as JSX.Element[]);\r\n    /** 画面上部のセクションリスト */\r\n    const [sectionList, setSectionList] = useState([] as JSX.Element[]);\r\n\r\n    useEffect(() => {\r\n        console.log('create ScoreContNoteTab');\r\n    }, []);\r\n    useEffect(() => {\r\n        // alert(state.noteData.dataList.length);\r\n        const dataList = state.noteData.dataList;\r\n        // const isNormalMode = editMode == EditMode.NORMAL;\r\n        let index = 0;\r\n        const elementList: JSX.Element[] = [];\r\n        const sectionList: JSX.Element[] = [];\r\n\r\n        // const cacheList: ScoreCache[] = [];\r\n\r\n        const cacheList = state.noteState.cacheList;\r\n        // const cache = {} as ScoreCache;\r\n        const cache = {} as ScoreCache;\r\n\r\n        let no = 1;\r\n        let totalBeat = 0;\r\n        let totalMsec = 0;\r\n        let lastBar = -1;\r\n        dataList.forEach((data, i) => {\r\n\r\n            if (data.type == TypeNoteElement.Init) {\r\n                const init = data.detail as DetailInit;\r\n                cache.init = { ...init };\r\n            }\r\n\r\n            const bar = Math.floor(totalBeat / 4) + 1;\r\n            const progress = {} as ScoreProgress;\r\n            progress.no = no;\r\n            progress.barCount = lastBar != bar ? bar : -1;\r\n            progress.remaindBeat = totalBeat % 4 > 0 ? totalBeat % 4 : -1;\r\n            progress.headMSec = totalMsec;\r\n            elementList.push(\r\n                <ScoreElement\r\n                    key={i}\r\n                    index={i}\r\n                    noteElement={data}\r\n                />\r\n            );\r\n            if (data.type == TypeNoteElement.Chord) {\r\n                lastBar = bar;\r\n                const detail = data.detail as DetailChord;\r\n\r\n                const tempo = cache.init.tempo;\r\n                const sustain = detail.sustain + detail.headAdjust + detail.tailAdjust;\r\n                totalBeat += sustain;\r\n                const sectionMSec = 60000 / tempo * 4;\r\n                totalMsec += sectionMSec / 4 * sustain;\r\n                no++;\r\n            } else if (data.type == TypeNoteElement.Change) {\r\n                const detail = data.detail as DetailChange;\r\n                switch (detail.changeType) {\r\n                    case ChangeType.MODULATE: {\r\n                        let newKeyIndex = cache.init.keyIndex;\r\n                        let newIsMinor = cache.init.scale == 'minor';\r\n                        switch (detail.modulateRelation) {\r\n                            case ModulateRelation.DOMINANT: {\r\n                                newKeyIndex = (24 + newKeyIndex + detail.domminantValue * 7) % 12;\r\n                            }\r\n                                break;\r\n                            case ModulateRelation.KEY: {\r\n                                const keyAdjust = Number(detail.keyAdjust);\r\n                                newKeyIndex = (12 + newKeyIndex + keyAdjust) % 12;\r\n                            }\r\n                                break;\r\n                            case ModulateRelation.RELATIVE: {\r\n                                if (!newIsMinor) {\r\n                                    newKeyIndex = (12 + newKeyIndex - 3) % 12;\r\n                                } else {\r\n                                    newKeyIndex = (12 + newKeyIndex + 3) % 12;\r\n                                }\r\n                                newIsMinor = !newIsMinor;\r\n                            }\r\n                                break;\r\n                            case ModulateRelation.PARALLEL: {\r\n                                newIsMinor = !newIsMinor;\r\n                            }\r\n                                break;\r\n                        }\r\n\r\n                        cache.init.keyIndex = newKeyIndex;\r\n                        cache.init.scale = newIsMinor ? 'minor' : 'major';\r\n                    }\r\n                        break;\r\n                    case ChangeType.TEMPO: {\r\n                        let newTempo:number = cache.init.tempo;\r\n                        switch (detail.tempoRelation) {\r\n                            case TempoRelation.DIFF: {\r\n                                newTempo += Number(detail.tempoDiff);\r\n                            }\r\n                                break;\r\n                            case TempoRelation.RATE: {\r\n                                newTempo = Math.floor(newTempo * detail.tempoRate / 100);\r\n                            }\r\n                                break;\r\n                            case TempoRelation.ABSOLUTE: {\r\n                                newTempo = detail.tempoAbsolute;\r\n                            }\r\n                                break;\r\n                        }\r\n                        cache.init.tempo = newTempo;\r\n                    }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            cacheList[i] = { ...cacheList[i], init: { ...cache.init }, progress };\r\n\r\n            // セクションアウトラインの生成\r\n            if (data.type == TypeNoteElement.Section) {\r\n                sectionList.push(\r\n                    <OutlineSection key={i} index={index} label={(data.detail as DetailSection).labelName} />\r\n                );\r\n                index++;\r\n            }\r\n        });\r\n        setElementList(elementList);\r\n        setSectionList(sectionList);\r\n        dispatcher.score.setNoteState({ ...state.noteState, cacheList });\r\n\r\n    }, [state.noteData.dataList]);\r\n\r\n    const editMode = state.noteState.editMode;\r\n    const isModalBlind = !(state.noteState.floatwndState == FloatWndState.NONE || state.noteState.floatwndState == FloatWndState.CONTEXT_MENU);\r\n    return (\r\n        <div id=\"scorecont-notetab-root\">\r\n            <div className=\"left-cont\">\r\n                <div id=\"score-note\">\r\n                    <div\r\n                        id=\"operation-header\"\r\n                        className={editMode == EditMode.BACKING ? 'mode-selector' : ''}\r\n                    >\r\n                        <button className=\"\" onClick={() => {\r\n                            dispatch(ActionType.SELECT_SCORETAB, { index: 0 });\r\n                        }}><span>BACK</span></button>\r\n                        <button className=\"disable\"><span>SAVE</span></button>\r\n                        <button className=\"disable\"><span>RELOAD</span></button>\r\n                        <button className=\"\" onClick={() => {\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.SETTING_EDITOR })\r\n                        }}> <span>SETTING</span></button>\r\n                        <EditModeBorder />\r\n                    </div>\r\n                    <div\r\n                        id=\"section-list\"\r\n                        className={editMode == EditMode.BACKING ? 'mode-selector' : ''}\r\n                    >\r\n                        {sectionList}\r\n                    </div>\r\n                    <div\r\n                        id=\"score-list-root\"\r\n                        className={editMode == EditMode.BACKING ? 'mode-selector' : ''}\r\n                    >\r\n                        {elementList}\r\n                    </div>\r\n                    {/* モーダルブラインド */}\r\n                    <div id=\"modal-blind\"\r\n                        className={isModalBlind ? 'active' : ''}\r\n                        onClick={() => {\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                        }}\r\n                    />\r\n                    {/* コンテキストメニュー */}\r\n                    <InitEditor />\r\n                    <NoteContextMenu />\r\n                    <SectionEditor />\r\n                    <ChangeEditor />\r\n                    <ChordSelector />\r\n                    <BackingEditor />\r\n                    <SettingEditor />\r\n                </div>\r\n                <NoteFooter />\r\n\r\n            </div>\r\n            <div className=\"right-cont\">\r\n                <CurrentElementInfo />\r\n                {/* <div id=\"sidebar-param-selector\" className=\"hidden\" tabIndex=\"999\">\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst EditModeBorder = () => {\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n\r\n    const editMode = state.noteState.editMode;\r\n    // const isNormal = editMode == EditMode.NORMAL;\r\n    // const setEditMode = (editMode: EditMode) => {\r\n    //     dispatch(ActionType.SET_NOTE_STATE, { noteState: { ...state.noteState, editMode } });\r\n    // };\r\n    return (\r\n        <div className=\"mode\">\r\n            <div className=\"label\"><span>MODE:</span></div>\r\n            <div className=\"border\">\r\n                <button\r\n                    className={editMode == EditMode.NORMAL ? 'active' : ''}\r\n                // onClick={() => setEditMode(EditMode.NORMAL)}\r\n                >\r\n                    <span>NORMAL</span>\r\n                </button>\r\n                <button\r\n                    className={editMode == EditMode.BACKING ? 'active' : ''}\r\n                // onClick={() => setEditMode(EditMode.BACKING)}\r\n                >\r\n                    <span>CLONE</span>\r\n                </button>\r\n                <button\r\n                    className={editMode == EditMode.PREVIEW ? 'active' : ''}\r\n                // onClick={() => setEditMode(EditMode.BACKING)}\r\n                >\r\n                    <span>PREVIEW</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreContNoteTab;\r\n\r\n","import './ScoreContLibraryTab.css';\r\n\r\n// import TabbedPane from './common/TabbedPane.jsx';\r\nimport { DetailSection, CHORD_MODE, Store, TypeNoteElement, EditMode, NoteData, NoteElement } from 'contents/redux/store';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport React, { useContext, KeyboardEvent, useEffect, useState } from 'react';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport { API_DOMAIN } from 'contents/common/define';\r\nimport { createQueryRequestInit, sendQueryRequestToAPI } from 'contents/common/utils';\r\n\r\ntype Record = { id: number, title: string, chord_mode: CHORD_MODE, data_cnt: number };\r\n\r\nconst ScoreContLiblaryTab = () => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    const [focus, setFocus] = useState<number>(-1);\r\n    const [message, setMessage] = useState<string>('');\r\n    const [recordList, setRecordList] = useState<Record[]>([]);\r\n    const [titleList, setTitleList] = useState<JSX.Element[]>([]);\r\n    const [isEdit, setEdit] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>('');\r\n    const [chordMode, setChordMode] = useState<CHORD_MODE | ''>('');\r\n    const [isLoad, setLoad] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        console.log('create ScoreContLiblaryTab');\r\n    }, []);\r\n\r\n    // 非同期で表示データを更新。\r\n    const reload = (initFocus: number) => {\r\n        // setFocus(initFocus);\r\n        setLoad(true);\r\n        setMessage('Now roading scores...');\r\n        sendQueryRequestToAPI('select', `SELECT s.*, (select count(*) from data_tbl where score = s.id) as data_cnt FROM sclibtbl s where user = ${state.login.id}`)\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(results => {\r\n                console.log(`[${state.login.id}]score count: ` + results.length);\r\n                const isExist = results.length > 0;\r\n                if (isExist) {\r\n                    setRecordList(results);\r\n                    setMessage('');\r\n                } else {\r\n                    setMessage('There is no musical score you manage yet.');\r\n                }\r\n                setLoad(false);\r\n            })\r\n            .catch(error => {\r\n                console.log(error + \"失敗しました\");\r\n                setLoad(false);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const list: JSX.Element[] = [];\r\n        recordList.forEach((record, i) => {\r\n            list.push(\r\n                <div\r\n                    key={i}\r\n                    className={[\r\n                        'record',\r\n                        focus == i ? 'focus' : ''\r\n                    ].join(' ')}\r\n                    onClick={() => {\r\n                        setFocus(i);\r\n                    }}\r\n                >\r\n                    <span>{record.id}:</span>\r\n                    <span className=\"title\">{record.title}</span>\r\n                    <span>[</span>\r\n                    <span className=\"mode\">{record.chord_mode}</span>\r\n                    <span>]</span>\r\n                </div>\r\n            );\r\n        });\r\n        setTitleList(list);\r\n    }, [recordList, focus]);\r\n\r\n    useEffect(() => {\r\n        if (!isEdit) {\r\n            reload(-1);\r\n        }\r\n\r\n    }, [isEdit]);\r\n\r\n    const createButton = (label: string, isDisable: boolean, callback: () => void, isActive: boolean = false): JSX.Element => {\r\n        return (\r\n            <button className={[\r\n                isDisable ? 'disable' : '',\r\n                isActive ? 'active' : ''\r\n            ].join(' ')}\r\n                onClick={callback}\r\n            >\r\n                <span>{label}</span>\r\n            </button>\r\n        );\r\n    }\r\n\r\n    const createInfoRecored = (label: string, innerJsx: JSX.Element): JSX.Element => {\r\n        return (\r\n            <div\r\n                className=\"info-record\"\r\n            >\r\n                <span>{label}</span>\r\n                <span>{': '}</span>\r\n                {innerJsx}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const isDisplayMsg = message != '';\r\n    const selectedRecord = recordList[focus];\r\n    return (\r\n        <div id=\"scorecont-listtab-root\">\r\n            <div className=\"left-cont\">\r\n                {/* <button onClick={() => {\r\n                    // dispatch(ActionType.SET_NOTE_DATA,\r\n                    //     { data: { ...state.noteData, editMode: CHORD_MODE.SCALE } }\r\n                    // );\r\n                    dispatcher.setNoteData({ ...state.noteData, chordMode: CHORD_MODE.SCALE });\r\n                    dispatch(ActionType.INIT_DEFAULT_ELEMENTS, null);\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, {index: 2});\r\n                    dispatch(ActionType.SELECT_SCORETAB, { index: 1 });\r\n                }}\r\n                >\r\n                    <span>SCALE</span>\r\n                </button>\r\n                <button onClick={() => {\r\n                    // dispatch(ActionType.SET_NOTE_DATA,\r\n                    //     { data: { ...state.noteData, editMode: CHORD_MODE.DIRECT } }\r\n                    // );\r\n                    dispatcher.setNoteData({ ...state.noteData, chordMode: CHORD_MODE.DIRECT });\r\n                    dispatch(ActionType.INIT_DEFAULT_ELEMENTS, null);\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, {index: 2});\r\n                    dispatch(ActionType.SELECT_SCORETAB, { index: 1 });\r\n                }}\r\n                >\r\n                    <span>DIRECT</span>\r\n                </button> */}\r\n                <div className=\"opr\">\r\n                    {createButton('Create', isEdit || isLoad, () => {\r\n                        setMessage('Create...');\r\n                        sendQueryRequestToAPI('update', `INSERT INTO sclibtbl(user, title, chord_mode) VALUES(${state.login.id}, 'new_title', '')`)\r\n                            .then((result) => {\r\n                                reload(recordList.length);\r\n                                return result;\r\n                            })\r\n                    })}\r\n                    {createButton('Update', focus == -1 || isLoad, () => {\r\n                        if (!isEdit) {\r\n                            setEdit(true);\r\n                            setTitle(selectedRecord.title);\r\n                            setChordMode(selectedRecord.chord_mode);\r\n                        }\r\n                    }, isEdit)}\r\n                    {createButton('Delete', focus == -1 || isEdit || isLoad, () => {\r\n                        (async () => {\r\n                            setMessage('Delete...');\r\n                            console.log('----start----');\r\n                            await sendQueryRequestToAPI('update', `delete from data_tbl where score = ${recordList[focus].id}`);\r\n                            await sendQueryRequestToAPI('update', `delete from sclibtbl where id = ${recordList[focus].id}`);\r\n                            reload(-1);\r\n                            setFocus(-1);\r\n                            console.log('----end----');\r\n                        })();\r\n                    })}\r\n                </div>\r\n                <div className={[\r\n                    'lib',\r\n                    isEdit ? 'disable' : ''\r\n                ].join(' ')}>\r\n                    <div className={[\r\n                        'message',\r\n                        !isDisplayMsg ? 'hidden' : ''\r\n                    ].join(' ')}>\r\n                        <span>{message}</span>\r\n                    </div>\r\n                    <div className={[\r\n                        'list',\r\n                        isDisplayMsg ? 'hidden' : ''\r\n                    ].join(' ')}>\r\n                        {titleList}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"right-cont\">\r\n                <div className=\"opr\">\r\n                    {createButton('Cancel', !isEdit || isLoad, () => {\r\n                        setEdit(false);\r\n                    })}\r\n                    {createButton('Save', !isEdit || chordMode === '' || isLoad, () => {\r\n                        setLoad(true);\r\n                        (async () => {\r\n                            console.log('----start----');\r\n                            const values: string[] = [];\r\n                            await sendQueryRequestToAPI('update', `update sclibtbl set title = '${title}', chord_mode = '${chordMode}' where id = ${selectedRecord.id}`);\r\n                            if (state.noteData.dataList.length > 0) {\r\n                                state.noteData.dataList.forEach((data, i) => {\r\n                                    values.push(`(${selectedRecord.id}, ${i}, '${JSON.stringify(data)}')`);\r\n                                });\r\n                                await sendQueryRequestToAPI('update', `delete from data_tbl where score = ${selectedRecord.id}`);\r\n                                await sendQueryRequestToAPI('update', `insert into data_tbl values${values.join(',')}`);\r\n                            }\r\n                            console.log('----end----');\r\n                            alert('The data was saved successfully!');\r\n                            // setEdit(false);\r\n                            setLoad(false);\r\n                        })();\r\n                    })}\r\n                    {createButton('Edit', !isEdit || chordMode === '' || isLoad, () => {\r\n                        setLoad(true);\r\n                        (async () => {\r\n                            if (selectedRecord.data_cnt == 0) {\r\n                                dispatch(ActionType.INIT_DEFAULT_ELEMENTS, null);\r\n                            } else {\r\n                                const response = await sendQueryRequestToAPI('select', `SELECT json from data_tbl where score = ${selectedRecord.id} order by seq`);\r\n                                const results = await response.json();\r\n                                // alert(JSON.stringify(results));\r\n                                const dataList: NoteElement[] = [];\r\n                                results.forEach((result: { json: string }) => {\r\n                                    dataList.push(JSON.parse(result.json));\r\n                                });\r\n                                dispatcher.score.setNoteData({ ...state.noteData, dataList, chordMode: chordMode as CHORD_MODE  });\r\n                            }\r\n                            dispatch(ActionType.SELECT_NOTE_ELEMENT, { index: 2 });\r\n                            dispatch(ActionType.SELECT_SCORETAB, { index: 1 });\r\n                            setLoad(false);\r\n                        })();\r\n                    })}\r\n                </div>\r\n                {\r\n                    !isEdit ? <></> : (\r\n                        <div className=\"data\">\r\n                            {createInfoRecored('Id', (\r\n                                <span className=\"value\">{selectedRecord.id}</span>\r\n                            ))}\r\n                            {createInfoRecored('Title', (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    onChange={(e) => {\r\n                                        // recordList[focus].title = e.target.value;\r\n                                        // setRecordList(recordList);\r\n                                        setTitle(e.target.value);\r\n                                    }}\r\n                                    value={title}\r\n                                />\r\n                            ))}\r\n                            {createInfoRecored('Mode', (\r\n                                // <span className=\"value\">{selectedRecord.chord_mode}</span>\r\n                                <select className={[\r\n                                    'value',\r\n                                    selectedRecord.data_cnt > 0 ? 'disable' : ''\r\n                                ].join(' ')}\r\n                                    value={chordMode}\r\n                                    onChange={(e) => {\r\n                                        setChordMode(e.target.value as CHORD_MODE | '');\r\n                                    }}>\r\n                                    <option value=''></option>\r\n                                    <option value={CHORD_MODE.SCALE}>{CHORD_MODE.SCALE}</option>\r\n                                    <option value={CHORD_MODE.DIRECT}>{CHORD_MODE.DIRECT}</option>\r\n                                </select>\r\n                            ))}\r\n                            {createInfoRecored('Show', (\r\n                                <span className=\"value\">{'PRIVATE'}</span>\r\n                            ))}\r\n                            {createInfoRecored('Data', (\r\n                                <span className=\"value\">{selectedRecord.data_cnt}</span>\r\n                            ))}\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreContLiblaryTab;\r\n","import './ScoreContBackingTab.css';\r\n\r\nimport { DetailSection, CHORD_MODE, Store, TypeNoteElement } from 'contents/redux/store';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport  { useContext } from 'react';\r\n\r\n\r\nconst ScoreContBackingTab = () => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n\r\n    \r\n    return (<></>);\r\n\r\n\r\n}\r\n\r\nexport default ScoreContBackingTab;\r\n","import './ScoreContSourceTab.css';\r\n\r\n// import TabbedPane from './common/TabbedPane.jsx';\r\nimport { DetailSection, CHORD_MODE, Store, TypeNoteElement, EditMode } from 'contents/redux/store';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport React, { useContext, KeyboardEvent, useEffect, useState, useRef } from 'react';\r\nimport { ActionType } from 'contents/redux/reducer';\r\n\r\n\r\nconst ScoreContSourceTab = () => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n    const ref = useRef({} as HTMLTextAreaElement);\r\n\r\n    useEffect(() => {\r\n        if (state.scoreTabIndex == 2 && state.noteData.dataList.length != 0) {\r\n            ref.current.value = JSON.stringify(state.noteData);\r\n        }\r\n    }, [state.scoreTabIndex]);\r\n\r\n    return (\r\n        <div id=\"scorecont-sourcetab-root\">\r\n            <textarea ref={ref}></textarea>\r\n            <button\r\n                onClick={() => {\r\n                    dispatcher.score.setNoteData(JSON.parse(ref.current.value));\r\n                    dispatch(ActionType.SELECT_NOTE_ELEMENT, {index: 2});\r\n                    dispatch(ActionType.SELECT_SCORETAB, { index: 1 });\r\n                }}\r\n            >Load score data...</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreContSourceTab;\r\n","import './ScoreTab.css';\r\nimport React, { useState, useContext, useRef, useEffect } from 'react';\r\nimport TabbedPane from 'contents/common/TabbedPane';\r\n\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport ScoreContNoteTab from './contTabs/note/ScoreContNoteTab';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport ScoreContLiblaryTab from './contTabs/library/ScoreContLibraryTab';\r\nimport ScoreContBackingTab from './contTabs/backing/ScoreContBackingTab';\r\nimport ScoreContSourceTab from './contTabs/source/ScoreContSourceTab';\r\n\r\nconst ScoreTab = () => {\r\n\r\n    const { state, dispatch } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div id=\"scoretab-root\">\r\n            <TabbedPane groupName=\"score-tabs\"\r\n                tabElements={[\r\n                    { name: 'Library', disable: true, cont: <ScoreContLiblaryTab /> },\r\n                    {\r\n                        name: 'Note', disable: state.noteData.dataList.length === 0,\r\n                        cont: state.scoreTabIndex != 1 ? <></> : < ScoreContNoteTab />\r\n                    },\r\n                    { name: 'Source', disable: false, cont: <ScoreContSourceTab /> },\r\n                    { name: 'Thema', disable: false, cont: <ScoreContBackingTab /> },\r\n                    { name: 'Sheet Music', disable: true, cont: <div></div> },\r\n                    { name: 'Preview', disable: true, cont: <div></div> }\r\n                ]}\r\n                activeNo={state.scoreTabIndex}\r\n                selectTabIndex={(index: number) => dispatch(ActionType.SELECT_SCORETAB, { index: index })}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreTab;","import { KEY12_SHARP_LIST, SymbolKey, SymbolParams, SYMBOL_PARAMS_LIST, TimeSignatures } from \"contents/common/define\";\r\nimport { applyOnChord, getSymbolParams } from \"contents/common/utils\";\r\nimport { ActionType } from \"./reducer\";\r\nimport { Action, BackingLen, BackingEditorState, BackingLayer, BACKING_LEN_TYPE, BACKING_SIDE, ChannelParam, DetailInit, NoteData, Store, TypeNoteElement, NoteState, NoteElement, FloatWndState, DetailChord, BackingScript, DetailSection, EditMode, ScoreCache, DetailChange, DetailFixed, LoginParams, ChordPaletteState, ChangeType, ModulateRelation, Key12Info, TempoRelation } from \"./store\";\r\n\r\n/**\r\n * ビジネスロジックからステートを更新するためのクラス。\r\n *\r\n * @export\r\n * @class Dispatcher\r\n */\r\nexport class Dispatcher {\r\n\r\n    private dispatchBase: React.Dispatch<Action>;\r\n    private dispatch: Function;\r\n    private state: Store;\r\n\r\n    /**\r\n     *Creates an instance of Dispatcher.\r\n     * @param {Store} state\r\n     * @param {React.Dispatch<Action>} dispatchBase\r\n     * @memberof Dispatcher\r\n     */\r\n    constructor(state: Store, dispatchBase: React.Dispatch<Action>) {\r\n        this.dispatchBase = dispatchBase;\r\n        this.state = state;\r\n        this.dispatch = (type: ActionType, payload: any) => dispatchBase({ type, payload });\r\n    }\r\n\r\n    public setLoginParams = (login: LoginParams) => {\r\n        this.dispatch(ActionType.SET_LOGIN, { login });\r\n    }\r\n    /**\r\n     * \r\n     * @param noteData \r\n     */\r\n    public setNoteData = (data: null | NoteData) => {\r\n        this.dispatchBase({ type: ActionType.SET_NOTE_DATA, payload: { data } });\r\n    }\r\n    public initBackingPalette = (backingPaletteState: BackingEditorState) => {\r\n        this.dispatchBase({ type: ActionType.INIT_BACKING_PALETTE, payload: { backingPaletteState } });\r\n    }\r\n\r\n    public setUseChannels = (useChannels: ChannelParam[]) => {\r\n        this.dispatchBase({ type: ActionType.SET_USE_CHANNELS, payload: { useChannels } });\r\n    }\r\n\r\n    public score = {\r\n\r\n        apllyFlasah: (index: number) => {\r\n            const reffer = this.state.noteState.cacheList[index].reffer as HTMLDivElement;\r\n            reffer.style.backgroundColor = '#ff0';\r\n            setTimeout(() => {\r\n                reffer.style.backgroundColor = '';\r\n                // reffer.style.width = 'inherit';\r\n            }, 350);\r\n        },\r\n        apllyFlashCur: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            this.score.apllyFlasah(focusIndex);\r\n        },\r\n        apllyFlashList: () => {\r\n            this.state.noteState.selectedList.forEach((index) => {\r\n                this.score.apllyFlasah(index);\r\n            });\r\n        },\r\n\r\n        setNoteState: (noteState: NoteState) => {\r\n            this.dispatch(ActionType.SET_NOTE_STATE, { noteState });\r\n        },\r\n        setCriteria: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            this.score.setNoteState({\r\n                ...this.state.noteState,\r\n                criteriaIndex: focusIndex, editMode: EditMode.BACKING\r\n            });\r\n        },\r\n        releaseCriteria: () => {\r\n            this.score.setNoteState({\r\n                ...this.state.noteState,\r\n                criteriaIndex: -1, editMode: EditMode.NORMAL, selectedList: []\r\n            });\r\n        },\r\n        setNoteData: (data: NoteData) => {\r\n            this.dispatch(ActionType.SET_NOTE_DATA, { data });\r\n        },\r\n        // setSelectedElement: (element: TypeNoteElement) => {\r\n        //     const curElement = this.state.noteData.dataList[this.state.noteState.focusIndex];\r\n        //     this.dispatch(ActionType.SET_NOTE_DATA, { data: this.state.noteData });\r\n        // },\r\n        /**\r\n         * 初期値の要素を返す。\r\n         */\r\n        getInitElement: (): DetailInit => {\r\n            return this.state.noteData.dataList[0].detail as DetailInit;\r\n        },\r\n        setEditMode: (editMode: EditMode) => {\r\n            this.score.setNoteState({ ...this.state.noteState, editMode });\r\n        },\r\n\r\n        addNoteElement: (type: TypeNoteElement, detail: DetailSection | DetailChord | DetailChange) => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const dataList = this.state.noteData.dataList.slice();\r\n            dataList.splice(curIndex + 1, 0, { type, detail });\r\n            this.dispatch(ActionType.SET_DATA_LIST, { dataList });\r\n            const cacheList = this.state.noteState.cacheList.slice();\r\n            cacheList.splice(curIndex + 1, 0, {} as ScoreCache);\r\n            this.score.apllyFlasah(curIndex + 1);\r\n        },\r\n\r\n        addSectionElement: () => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const dataList = this.state.noteData.dataList.slice();\r\n            const detail = {} as DetailSection;\r\n            detail.labelName = 'Section';\r\n            dataList.splice(curIndex + 1, 0, {\r\n                type: TypeNoteElement.Section,\r\n                detail: detail\r\n            });\r\n            this.dispatch(ActionType.SET_DATA_LIST, { dataList });\r\n            const cacheList = this.state.noteState.cacheList.slice();\r\n            cacheList.splice(curIndex + 1, 0, {} as ScoreCache);\r\n            this.score.apllyFlasah(curIndex + 1);\r\n        },\r\n        addChangeElement: () => {\r\n            // const detail = { type: ChangeType.NONE } as DetailChange;\r\n            // const mod:ChangeModulation = {\r\n            //     relation: ModulateRelation.DOMINANT,\r\n            //     value: 0,\r\n            // }\r\n            const detail = {\r\n                changeType: null,\r\n                modulateRelation: null,\r\n                domminantValue: 0,\r\n                keyAdjust: 0,\r\n                tempoRelation: null,\r\n                tempoDiff: 0,\r\n                tempoRate: 0,\r\n                tempoAbsolute: 0,\r\n                beat: null\r\n            } as DetailChange;\r\n            this.score.addNoteElement(TypeNoteElement.Change, detail);\r\n        },\r\n        addChordElement: () => {\r\n            const noteState = this.state.noteState;\r\n            const curIndex = noteState.focusIndex;\r\n            const dataList = this.state.noteData.dataList.slice();\r\n            dataList.splice(curIndex + 1, 0, {\r\n                type: TypeNoteElement.Chord,\r\n                detail: {\r\n                    // degreeIndex: -1,\r\n                    // isFlat: false,\r\n                    molecule: null,\r\n                    denominator: null,\r\n                    symbolKey: SymbolKey.MAJOR,\r\n                    sustain: noteState.defaultSustain,\r\n                    headAdjust: 0,\r\n                    tailAdjust: 0,\r\n                    backing: {\r\n                        useChannels: [],\r\n                        layers: [\r\n                            {\r\n                                lens: [{\r\n                                    len: BACKING_LEN_TYPE.LEN4,\r\n                                    isDiv3: false,\r\n                                    isHalf: false\r\n                                }],\r\n                                side: BACKING_SIDE.LEFT,\r\n                                table: [[[false]]],\r\n                                vels: [5]\r\n                            },\r\n                            {\r\n                                lens: [{\r\n                                    len: BACKING_LEN_TYPE.LEN4,\r\n                                    isDiv3: false,\r\n                                    isHalf: false\r\n                                }],\r\n                                side: BACKING_SIDE.RIGHT,\r\n                                table: [[[false]]],\r\n                                vels: [5]\r\n                            }\r\n                        ],\r\n                        isUsePedal: false\r\n                    }\r\n                }\r\n            });\r\n            this.dispatch(ActionType.SET_DATA_LIST, { dataList });\r\n\r\n            const cacheList = this.state.noteState.cacheList.slice();\r\n            cacheList.splice(curIndex + 1, 0, {} as ScoreCache);\r\n            this.score.apllyFlasah(curIndex + 1);\r\n        },\r\n        deleteElement: (index: number) => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const curElement = this.state.noteData.dataList[index];\r\n            if (\r\n                // 対象の要素がコードorセクションである\r\n                [TypeNoteElement.Chord, TypeNoteElement.Section, TypeNoteElement.Change].includes(curElement.type) &&\r\n                // 先頭のセクションは削除できない\r\n                index != 2\r\n            ) {\r\n                const dataList: NoteElement[] = this.state.noteData.dataList.slice();\r\n                dataList.splice(index, 1);\r\n                this.dispatch(ActionType.SET_DATA_LIST, { dataList });\r\n                if (index <= curIndex) {\r\n                    this.state.noteState.focusIndex--;\r\n                    this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                }\r\n            }\r\n        },\r\n        deleteCurElement: () => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            this.score.deleteElement(curIndex);\r\n            // const box = this.state.noteData.dataList[curIndex];\r\n            // const ref = box.reffer as HTMLDivElement;\r\n            // // ref.style.width = '0';\r\n            // ref.style.opacity = '0';\r\n            // setTimeout(() => {\r\n            //     this.score.deleteElement(curIndex);\r\n            // }, 1);\r\n        },\r\n        focusPreviousElement: (): boolean => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const prev = this.state.noteData.dataList[curIndex - 1];\r\n            if (prev.type != TypeNoteElement.Fixed) {\r\n                this.state.noteState.focusIndex--;\r\n                this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        focusNextElement: (): boolean => {\r\n            const curIndex = this.state.noteState.focusIndex;\r\n            const next = this.state.noteData.dataList[curIndex + 1];\r\n            if (next.type != TypeNoteElement.Fixed) {\r\n                // this.state.noteState.focusIndex++;\r\n                const focusIndex = curIndex + 1;\r\n                // this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                this.score.setNoteState({ ...this.state.noteState, focusIndex });\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        focusPreviousSection: () => {\r\n            const dataList = this.state.noteData.dataList;\r\n            let curIndex = this.state.noteState.focusIndex;\r\n            do {\r\n                curIndex--;\r\n                if (dataList[curIndex].type == TypeNoteElement.Section) {\r\n                    this.state.noteState.focusIndex = curIndex;\r\n                    this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                    break;\r\n                }\r\n            } while (curIndex > 0);\r\n        },\r\n\r\n        focusNextSection: () => {\r\n            const dataList = this.state.noteData.dataList;\r\n            let curIndex = this.state.noteState.focusIndex;\r\n            do {\r\n                curIndex++;\r\n                if (dataList[curIndex].type == TypeNoteElement.Section || curIndex == dataList.length - 2) {\r\n                    this.state.noteState.focusIndex = curIndex;\r\n                    this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n                    break;\r\n                }\r\n            } while (curIndex < dataList.length - 1);\r\n        },\r\n\r\n        focusInitElement: () => {\r\n            this.state.noteState.focusIndex = 0;\r\n            this.dispatch(ActionType.SET_NOTE_STATE, { noteState: this.state.noteState });\r\n        },\r\n\r\n        setSelectedList: (selectedList: number[]) => {\r\n            this.dispatch(ActionType.SET_NOTE_STATE, {\r\n                noteState: { ...this.state.noteState, selectedList }\r\n            });\r\n        },\r\n\r\n        callChordSelector: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const detail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            // let degreeIndex = detail.degreeIndex;\r\n            // if (degreeIndex == -1) {\r\n            //     degreeIndex = 0;\r\n            // }\r\n            let molecule = detail.molecule;\r\n            if (molecule == null) {\r\n                molecule = { rootIndex: 0, isFlat: false };\r\n            }\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n            this.dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                params: {\r\n                    ...this.state.noteState.chordPaletteState,\r\n                    // rootIndex: degreeIndex,\r\n                    // isFlat: detail.isFlat,\r\n                    molecule,\r\n                    denominator: detail.denominator,\r\n                    symbolKey: detail.symbolKey,\r\n                    sustain: detail.sustain,\r\n                    headAdjust: detail.headAdjust,\r\n                    tailAdjust: detail.tailAdjust,\r\n                } as ChordPaletteState\r\n            });\r\n        },\r\n\r\n        callSectionEditor: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const detail = this.state.noteData.dataList[focusIndex].detail as DetailSection;\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.SECTION_PALETTE });\r\n        },\r\n\r\n        callChangeEditor: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const detail = this.state.noteData.dataList[focusIndex].detail as DetailChange;\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHANGE_PALETTE });\r\n        },\r\n\r\n        callBackingEditor: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const detail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            const backing = detail.backing;\r\n            const backingState: BackingEditorState = {\r\n                molecule: detail.molecule as Key12Info,\r\n                denominator: detail.denominator,\r\n                symbolKey: detail.symbolKey,\r\n                sustain: detail.sustain,\r\n                headAdjust: detail.headAdjust,\r\n                tailAdjust: detail.tailAdjust,\r\n                channelRowSize: backing.layers[0].table.length,\r\n                useChannels: JSON.parse(JSON.stringify(backing.useChannels)),\r\n                isUsePedal: backing.isUsePedal,\r\n                sideIndex: 0,\r\n                selectedLenIndex: 0,\r\n                selectedChannelIndex: -1,\r\n                layers: JSON.parse(JSON.stringify(backing.layers)),\r\n                isCorrect: true\r\n            };\r\n            this.initBackingPalette(backingState);\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.BACKING_PALETTE });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初期値エディタ画面の操作に関連するメソッドを定義するオブジェクト。\r\n     *\r\n     * @memberof Dispatcher\r\n     */\r\n    public init = {\r\n        setInitParam: (tempo: number, rythm: string, keyIndex: number, scale: string) => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            // const detail = this.state.noteData.dataList[focusIndex].detail as DetailInit;\r\n            // const editorState = this.state.noteState.chordPaletteState;\r\n            this.dispatch(ActionType.DETAIL_PARAMS_SETTER, {\r\n                pos: focusIndex,\r\n                params: {\r\n                    tempo, rythm, keyIndex, scale\r\n                }\r\n            });\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            this.score.apllyFlashCur();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * セクションエディタ画面の操作に関連するメソッドを定義するオブジェクト。\r\n     *\r\n     * @memberof Dispatcher\r\n     */\r\n    public section = {\r\n        setSectionParam: (labelName: string) => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            this.dispatch(ActionType.DETAIL_PARAMS_SETTER, {\r\n                pos: focusIndex,\r\n                params: {\r\n                    labelName\r\n                }\r\n            });\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            this.score.apllyFlashCur();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * チェンジエディタ画面の操作に関連するメソッドを定義するオブジェクト。\r\n     *\r\n     * @memberof Dispatcher\r\n     */\r\n    public change = {\r\n        applyChangeParams: (changeType: ChangeType, modulateRelation: null | ModulateRelation, domminantValue: number, keyAdjust: number,\r\n            tempoRelation: null | TempoRelation, tempoDiff: number, tempoRate: number, tempoAbsolute: number, beat: null | TimeSignatures) => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            this.dispatch(ActionType.DETAIL_PARAMS_SETTER, {\r\n                pos: focusIndex,\r\n                params: {\r\n                    changeType,\r\n                    modulateRelation,\r\n                    domminantValue,\r\n                    keyAdjust,\r\n                    tempoRelation,\r\n                    tempoDiff,\r\n                    tempoRate,\r\n                    tempoAbsolute,\r\n                    beat\r\n                }\r\n            });\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            this.score.apllyFlashCur();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * コードエディタ画面の操作に関連するメソッドを定義するオブジェクト。\r\n     *\r\n     * @memberof Dispatcher\r\n     */\r\n    public chord = {\r\n        setCurChordParam: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const chordDetail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            const editorState = this.state.noteState.chordPaletteState;\r\n            this.dispatch(ActionType.DETAIL_PARAMS_SETTER, {\r\n                pos: focusIndex,\r\n                params: {\r\n                    ...chordDetail,\r\n                    // degreeIndex: editorState.rootIndex,\r\n                    // isFlat: editorState.isFlat,\r\n                    molecule: editorState.molecule,\r\n                    denominator: editorState.denominator,\r\n                    symbolKey: editorState.symbolKey,\r\n                    sustain: editorState.sustain,\r\n                    headAdjust: editorState.headAdjust,\r\n                    tailAdjust: editorState.tailAdjust,\r\n                } as DetailChord\r\n            });\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            this.score.apllyFlashCur();\r\n            // const reffer = this.state.noteData.dataList[focusIndex].reffer as HTMLDivElement;\r\n            // reffer.style.backgroundColor = '#ff0';\r\n            // setTimeout(() => {\r\n            //     reffer.style.backgroundColor = '';\r\n            // }, 350);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * バッキングエディタ画面の操作に関連するメソッドを定義するオブジェクト。\r\n     *\r\n     * @memberof Dispatcher\r\n     */\r\n    public backing = {\r\n        setPaletteState: (paletteState: BackingEditorState) => {\r\n            const backing = this.state.noteState.backingPaletteState;\r\n            this.score.setNoteState({ ...this.state.noteState, backingPaletteState: backing });\r\n        },\r\n        toggleMatrix: (channelIndex: number, lenIndex: number, divIndex: number) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const sideIndex = backing.sideIndex;\r\n            const isUse = !backing.layers[sideIndex].table[channelIndex][lenIndex][divIndex];\r\n            this.dispatch(ActionType.BACKING_TOGGLE_MATRIX, { sideIndex, channelIndex, lenIndex, divIndex, isUse });\r\n        },\r\n        addLen: () => {\r\n            // this.dispatch({ type: ActionType.ADD_LEN, payload: null });\r\n\r\n            const backingPaletteState = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const script = backingPaletteState.layers;\r\n            const sideIndex = backingPaletteState.sideIndex;\r\n            const curSideScript = script[sideIndex];\r\n            const selectedLenIndex = backingPaletteState.selectedLenIndex;\r\n            const table = curSideScript.table;\r\n            curSideScript.lens = [...curSideScript.lens];\r\n            // 選択中の要素の次に挿入する\r\n            curSideScript.lens.splice(\r\n                selectedLenIndex + 1, 0,\r\n                { len: BACKING_LEN_TYPE.LEN4, isHalf: false, isDiv3: false }\r\n            );\r\n            table.forEach((line) => {\r\n                line.splice(\r\n                    selectedLenIndex + 1, 0, [false]\r\n                );\r\n            });\r\n            curSideScript.vels.splice(\r\n                backingPaletteState.selectedLenIndex + 1, 0, 5\r\n            );\r\n            script[sideIndex] = curSideScript;\r\n\r\n            this.dispatch(ActionType.INIT_BACKING_PALETTE, { backingPaletteState });\r\n        },\r\n        delLen: () => {\r\n            // this.dispatch({ type: ActionType.ADD_LEN, payload: null });\r\n\r\n            const backingPaletteState = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const script = backingPaletteState.layers;\r\n            const sideIndex = backingPaletteState.sideIndex;\r\n            const curSideScript = script[sideIndex];\r\n            const selectedLenIndex = backingPaletteState.selectedLenIndex;\r\n            const table = curSideScript.table;\r\n            curSideScript.lens = [...curSideScript.lens];\r\n            // 選択中の要素を削除する\r\n            curSideScript.lens.splice(selectedLenIndex, 1);\r\n            table.forEach((line) => {\r\n                line.splice(selectedLenIndex, 1);\r\n            });\r\n            curSideScript.vels.splice(selectedLenIndex, 1);\r\n            script[sideIndex] = curSideScript;\r\n\r\n            if (selectedLenIndex > 0) {\r\n                backingPaletteState.selectedLenIndex--;\r\n            }\r\n            this.dispatch(ActionType.INIT_BACKING_PALETTE, { backingPaletteState });\r\n        },\r\n        updateLenIndex: (index: number) => {\r\n            const backingPaletteState = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            backingPaletteState.selectedLenIndex = index;\r\n            this.initBackingPalette(backingPaletteState);\r\n        },\r\n        getCurLenIndex: (): number => {\r\n            const backingPaletteState = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            return backingPaletteState.selectedLenIndex;\r\n        },\r\n        setChannelRowSize: (size: number) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            backing.channelRowSize = size;\r\n            backing.layers.forEach((layer) => {\r\n                const table: boolean[][][] = new Array<boolean[][]>(size);\r\n                console.log('★★★' + table.length);\r\n                for (let i = 0; i < table.length; i++) {\r\n                    table[i] = new Array<boolean[]>(layer.lens.length);\r\n                    console.log('☆☆☆☆☆☆');\r\n                    for (let j = 0; j < table[i].length; j++) {\r\n                        table[i][j] = new Array<boolean>(1);\r\n                        table[i][j][0] = false;\r\n                    }\r\n                }\r\n                layer.table = table;\r\n            });\r\n            this.score.setNoteState({ ...this.state.noteState, backingPaletteState: backing });\r\n        },\r\n        isFirstCurLen: (): boolean => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            return backing.selectedLenIndex == 0;\r\n        },\r\n        isLastCurLen: (): boolean => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const sideScript = backing.layers[backing.sideIndex];\r\n            return backing.selectedLenIndex == sideScript.lens.length - 1;\r\n        },\r\n        getSideScript: (): BackingLayer => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            return backing.layers[backing.sideIndex];\r\n        },\r\n        getCurLenBean: (): BackingLen => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const sideScript = backing.layers[backing.sideIndex];\r\n            return sideScript.lens[backing.selectedLenIndex];\r\n        },\r\n\r\n        /**\r\n         * \r\n         * @param lenBean \r\n         */\r\n        setCurrentLenBean: (lenBean: BackingLen) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const script = backing.layers;\r\n            const sideScript = script[backing.sideIndex];\r\n            sideScript.lens[backing.selectedLenIndex] = lenBean;\r\n            this.initBackingPalette({ ...backing, layers: script });\r\n        },\r\n\r\n        /**\r\n         * 選択中の列の長さを設定します。\r\n         * @param lenType 長さ\r\n         */\r\n        setCurLen: (lenType: BACKING_LEN_TYPE) => {\r\n            const curLenBean = this.backing.getCurLenBean();\r\n            curLenBean.len = lenType;\r\n            curLenBean.isHalf = false;\r\n            curLenBean.isDiv3 = false;\r\n            this.backing.setCurrentLenBean(curLenBean);\r\n        },\r\n\r\n        /**\r\n         * 選択中の列のベロシティ値を更新する。\r\n         * @param velocity 更新するベロシティ値（1～10）\r\n         */\r\n        updateCurVolume: (velocity: number) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const script = backing.layers;\r\n            script[backing.sideIndex].vels[backing.selectedLenIndex] = velocity;\r\n            this.initBackingPalette({ ...backing, layers: script });\r\n        },\r\n\r\n        /**\r\n         * 選択中の列のベロシティ値を返す。\r\n         * @returns 選択中の列のベロシティ値\r\n         */\r\n        getCurVelocity: (): number => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const sideScript = backing.layers[backing.sideIndex];\r\n            return sideScript.vels[backing.selectedLenIndex];\r\n        },\r\n\r\n        /**\r\n         * 付点を設定できるか否かを判定する。\r\n         * @returns 付点を設定できるか否か\r\n         */\r\n        isAcceptHalf: (): boolean => {\r\n            return [\r\n                BACKING_LEN_TYPE.LEN2,\r\n                BACKING_LEN_TYPE.LEN4,\r\n                BACKING_LEN_TYPE.LEN8\r\n            ].includes(this.backing.getCurLenBean().len);\r\n        },\r\n\r\n        /**\r\n         * 3連符を設定できるか否かを判定する。\r\n         * @returns 3連符を設定できるか否か\r\n         */\r\n        isAcceptDiv3: (): boolean => {\r\n            return [\r\n                BACKING_LEN_TYPE.LEN4,\r\n                BACKING_LEN_TYPE.LEN8\r\n            ].includes(this.backing.getCurLenBean().len);\r\n        },\r\n\r\n        setLayerIndex: (index: number) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            backing.sideIndex = index;\r\n            backing.selectedLenIndex = 0;\r\n            this.initBackingPalette(backing);\r\n        },\r\n        setUsePedal: (use: boolean) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            backing.isUsePedal = use;\r\n            this.initBackingPalette(backing);\r\n        },\r\n        setCorrect: (isCorrect: boolean) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            backing.isCorrect = isCorrect;\r\n            this.initBackingPalette(backing);\r\n        },\r\n\r\n        changeLayerIndex: () => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            backing.sideIndex = backing.sideIndex == 0 ? 1 : 0;\r\n            backing.selectedLenIndex = 0;\r\n            this.initBackingPalette(backing);\r\n        },\r\n\r\n        setUseChannels: (useChannels: ChannelParam) => {\r\n            const backing = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const baseLayers = backing.layers;\r\n            const layers: BackingLayer[] = new Array(2);\r\n            for (let i = 0; i < 2; i++) {\r\n                const channelCount = backing.useChannels.length;\r\n                const lensSplitCount = baseLayers[i].lens.length;\r\n                const baseTable = baseLayers[i].table;\r\n                const table: boolean[][][] = new Array(channelCount);\r\n\r\n                for (let y = 0; y < channelCount; y++) {\r\n                    if (y < baseTable.length) {\r\n                        table[y] = baseTable[y];\r\n                    } else {\r\n                        table[y] = new Array(lensSplitCount);\r\n                        for (let x = 0; x < lensSplitCount; x++) {\r\n                            table[y][x] = new Array(1);\r\n                            table[y][x][0] = false;\r\n                        }\r\n                    }\r\n                }\r\n                layers[i] = {\r\n                    ...baseLayers[i],\r\n                    table,\r\n                };\r\n            }\r\n        },\r\n\r\n        setCurBackingScript: () => {\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const chordDetail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n            const editorState = this.state.noteState.backingPaletteState as BackingEditorState;\r\n            const backing = {} as BackingScript;\r\n            backing.useChannels = editorState.useChannels;\r\n            backing.layers = editorState.layers;\r\n            backing.isUsePedal = editorState.isUsePedal;\r\n            this.dispatch(ActionType.DETAIL_PARAMS_SETTER, {\r\n                pos: focusIndex,\r\n                params: {\r\n                    ...chordDetail,\r\n                    backing\r\n                }\r\n            });\r\n            this.dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n            this.score.apllyFlashCur();\r\n        },\r\n\r\n        getNotesCount: (backing: BackingScript): number => {\r\n\r\n            let count = 0;\r\n            backing.layers.forEach((layer) => {\r\n                layer.table.forEach((line) => {\r\n                    line.forEach((cell) => {\r\n                        if (cell[0]) {\r\n                            count++;\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n            return count;\r\n        },\r\n\r\n        // play: (isProceed: boolean) => {\r\n\r\n        //     const threads = this.state.noteState.backingThreads;\r\n        //     const soundUseList: number[] = Array(88);\r\n        //     for (let i = 0; i < 88; i++) {\r\n        //         soundUseList[i] = 0;\r\n        //     }\r\n        //     const rec = (isProceed: boolean) => {\r\n\r\n        //         const curTime = new Date().getTime();\r\n        //         const focusIndex = this.state.noteState.focusIndex;\r\n        //         const detail = this.state.noteData.dataList[focusIndex].detail as DetailChord;\r\n        //         const cache = this.state.noteState.cacheList[focusIndex];\r\n        //         const symbol = getSymbolParams(detail.symbolKey);\r\n        //         const intervals = symbol?.intervals as number[];\r\n        //         const editor = this.state.noteState.backingPaletteState;\r\n        //         const backing: BackingScript = !isProceed ? { layers: editor.layers, useChannels: editor.useChannels, isUsePedal: editor.isUsePedal }\r\n        //             : detail.backing;\r\n        //         const sampler = this.state.sampler;\r\n        //         const tempo = cache.init.tempo;\r\n        //         // 1小節の長さミリ秒\r\n        //         const barMs = 60000 / tempo * 4;\r\n        //         const boxMs = 60000 / tempo * (detail.sustain + detail.headAdjust + detail.tailAdjust);\r\n        //         const adjustOverlap = barMs / 32;\r\n\r\n        //         // 末端に達した時の処理\r\n        //         threads.push(\r\n        //             setTimeout(() => {\r\n        //                 let isEnd = true;\r\n        //                 if (isProceed) {\r\n        //                     const hasNext = this.score.focusNextElement();\r\n        //                     if (hasNext) {\r\n        //                         isEnd = false;\r\n        //                         rec(true);\r\n        //                     }\r\n        //                 }\r\n        //                 if (isEnd) {\r\n        //                     this.score.setNoteState({ ...this.state.noteState, editMode: EditMode.NORMAL });\r\n        //                 }\r\n        //             }, boxMs)\r\n        //         );\r\n        //         console.log(new Date().getTime() - curTime);\r\n        //         for (let i = 0; i < 2; i++) {\r\n        //             let headMs = 0;\r\n        //             const layer = backing.layers[i];\r\n        //             // 音価のループ\r\n        //             layer.lens.forEach((lenBean, j) => {\r\n\r\n        //                 const lenValue = Number(lenBean.len.toString().replace('LEN', ''));\r\n        //                 let curLenMs = barMs / lenValue;\r\n        //                 if (lenBean.isHalf) {\r\n        //                     curLenMs *= 1.5;\r\n        //                 }\r\n        //                 backing.useChannels.forEach((channel, k) => {\r\n        //                     layer.table[k][j].forEach((notes, l) => {\r\n\r\n        //                         if (notes && detail.molecule != null) {\r\n        //                             const degreeIndex = detail.molecule.rootIndex;\r\n        //                             const rootKeyIndex = (cache.init.keyIndex + degreeIndex) % 12;\r\n        //                             const soundIndex = rootKeyIndex + intervals[channel.structIndex] + channel.octave * 12;\r\n        //                             const octave = Math.floor(soundIndex / 12);\r\n        //                             const root = KEY12_SHARP_LIST[soundIndex % 12];\r\n        //                             const soundFullName = root + octave;\r\n        //                             const velocity = 0.7 * layer.vels[j] / 10;\r\n        //                             const head = headMs + curLenMs / 3 * l;\r\n        //                             const tail = !backing.isUsePedal ?\r\n        //                                 //ペダル未使用時\r\n        //                                 head + curLenMs :\r\n        //                                 //ペダル使用時\r\n        //                                 boxMs + adjustOverlap\r\n        //                                 ;\r\n        //                             threads.push(\r\n        //                                 setTimeout(() => {\r\n        //                                     sampler.triggerAttack(soundFullName, '+0', velocity);\r\n        //                                     soundUseList[soundIndex]++;\r\n        //                                 }, head)\r\n        //                             );\r\n        //                             // console.log(new Date().getTime() - curTime);\r\n        //                             threads.push(\r\n        //                                 setTimeout(() => {\r\n        //                                     soundUseList[soundIndex]--;\r\n        //                                     if (soundUseList[soundIndex] == 0) {\r\n        //                                         sampler.triggerRelease(soundFullName);\r\n        //                                     }\r\n        //                                 }, tail)\r\n        //                             );\r\n        //                             // console.log(new Date().getTime() - curTime);\r\n        //                         }\r\n        //                     });\r\n        //                 });\r\n        //                 headMs += curLenMs;\r\n        //             });\r\n        //         }\r\n        //         this.score.setNoteState({\r\n        //             ...this.state.noteState,\r\n        //             editMode: EditMode.PREVIEW, backingThreads: threads\r\n        //         });\r\n        //     }\r\n        //     rec(isProceed);\r\n        // }\r\n        play: (isScore: boolean) => {\r\n\r\n            const threads = this.state.noteState.backingThreads;\r\n            const soundUseList: number[] = Array(88);\r\n            for (let i = 0; i < 88; i++) {\r\n                soundUseList[i] = 0;\r\n            }\r\n\r\n            this.score.setNoteState({\r\n                ...this.state.noteState,\r\n                editMode: EditMode.PREVIEW, backingThreads: threads\r\n            });\r\n            let totalTime = 0;\r\n            const focusIndex = this.state.noteState.focusIndex;\r\n            const dataList = this.state.noteData.dataList;\r\n            const curTime = new Date().getTime();\r\n            for (let i = focusIndex; i < (isScore ? dataList.length : focusIndex + 1); i++) {\r\n                const data = dataList[i];\r\n\r\n\r\n                // フォーカスを更新\r\n                threads.push(\r\n                    setTimeout(() => {\r\n                        if (isScore && [TypeNoteElement.Chord, TypeNoteElement.Fixed].includes(data.type)) {\r\n                            // const hasNext = this.score.focusNextElement();\r\n                            // if (!hasNext) {\r\n                            //     this.score.setNoteState({ ...this.state.noteState, editMode: EditMode.NORMAL });\r\n                            // }\r\n                            const [editMode, next] =\r\n                                data.type == TypeNoteElement.Fixed ?\r\n                                    [EditMode.NORMAL, focusIndex] : [EditMode.PREVIEW, i];\r\n                            this.score.setNoteState({ ...this.state.noteState, focusIndex: next, editMode });\r\n                        }\r\n                    }, totalTime)\r\n                );\r\n                if (data.type == TypeNoteElement.Chord) {\r\n                    const detail = data.detail as DetailChord;\r\n\r\n                    const cache = this.state.noteState.cacheList[i];\r\n                    const symbol: SymbolParams = { ...(getSymbolParams(detail.symbolKey) as SymbolParams) };\r\n                    if (detail.molecule != null && detail.denominator != null) {\r\n                        applyOnChord(symbol, detail.molecule.rootIndex, detail.denominator.rootIndex);\r\n                    }\r\n                    const intervals = symbol?.intervals as number[];\r\n                    const editor = this.state.noteState.backingPaletteState as BackingEditorState;\r\n                    const backing: BackingScript = !isScore ? { layers: editor.layers, useChannels: editor.useChannels, isUsePedal: editor.isUsePedal }\r\n                        : detail.backing;\r\n                    const sampler = this.state.sampler;\r\n                    const tempo = cache.init.tempo;\r\n                    // 1小節の長さミリ秒\r\n                    const barMs = 60000 / tempo * 4;\r\n                    const boxMs = 60000 / tempo * (detail.sustain + detail.headAdjust + detail.tailAdjust);\r\n                    const adjustOverlap = barMs / 32;\r\n\r\n                    // バッキングエディタの場合は、1つの要素で止める\r\n                    if (!isScore) {\r\n                        threads.push(\r\n                            setTimeout(() => {\r\n                                this.score.setNoteState({ ...this.state.noteState, editMode: EditMode.NORMAL });\r\n\r\n                            }, totalTime + boxMs)\r\n                        )\r\n                    }\r\n                    for (let i = 0; i < 2; i++) {\r\n                        let headMs = 0;\r\n                        const layer = backing.layers[i];\r\n                        // 音価のループ\r\n                        layer.lens.forEach((lenBean, j) => {\r\n\r\n                            const lenValue = Number(lenBean.len.toString().replace('LEN', ''));\r\n                            let curLenMs = barMs / lenValue;\r\n                            if (lenBean.isHalf) {\r\n                                curLenMs *= 1.5;\r\n                            }\r\n                            backing.useChannels.forEach((channel, k) => {\r\n                                layer.table[k][j].forEach((notes, l) => {\r\n\r\n                                    if (notes && detail.molecule != null) {\r\n                                        const degreeIndex = detail.molecule.rootIndex;\r\n                                        const rootKeyIndex = (cache.init.keyIndex + degreeIndex) % 12;\r\n                                        const soundIndex = rootKeyIndex + intervals[channel.structIndex] + channel.octave * 12;\r\n                                        const octave = Math.floor(soundIndex / 12);\r\n                                        const root = KEY12_SHARP_LIST[soundIndex % 12];\r\n                                        const soundFullName = root + octave;\r\n                                        const velocity = 0.7 * layer.vels[j] / 10;\r\n                                        const head = headMs + curLenMs / 3 * l;\r\n                                        const tail = !backing.isUsePedal ?\r\n                                            //ペダル未使用時\r\n                                            head + curLenMs :\r\n                                            //ペダル使用時\r\n                                            boxMs + adjustOverlap\r\n                                            ;\r\n                                        const lag = new Date().getTime() - curTime;\r\n                                        threads.push(\r\n                                            setTimeout(() => {\r\n                                                sampler.triggerAttack(soundFullName, '+0', velocity);\r\n                                                soundUseList[soundIndex]++;\r\n                                            }, totalTime + head - lag)\r\n                                        );\r\n                                        threads.push(\r\n                                            setTimeout(() => {\r\n                                                soundUseList[soundIndex]--;\r\n                                                if (soundUseList[soundIndex] == 0) {\r\n                                                    sampler.triggerRelease(soundFullName);\r\n                                                }\r\n                                            }, totalTime + tail - lag)\r\n                                        );\r\n                                    }\r\n                                });\r\n                            });\r\n                            headMs += curLenMs;\r\n                        });\r\n                    }\r\n                    totalTime += boxMs;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { API_DOMAIN } from 'contents/common/define';\r\nimport { sendQueryRequestToAPI } from 'contents/common/utils';\r\nimport { GlobalContext } from 'contents/MainFrame';\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport './LoginFrame.css';\r\n\r\nconst LoginFrame = () => {\r\n\r\n    const ref = useRef({} as HTMLDivElement);\r\n\r\n    const [loginType, setLoginType] = useState<'guest' | 'login' | 'create'>('guest');\r\n    const { state, dispatcher } = useContext(GlobalContext);\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passConfirm, setPassConfirm] = useState('');\r\n    const [message, setMessage] = useState(' ');\r\n    const [isError, setError] = useState(false);\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const enterDisable = (): boolean => {\r\n        switch (loginType) {\r\n            case 'guest': return false;\r\n            case 'login': {\r\n                return userName == '' || userName.length < 5 || userName.length > 15 || !isHanEisu(userName) ||\r\n                    password == '' || password.length < 5 || password.length > 15 || !isHanEisu(password);\r\n            }\r\n            case 'create': {\r\n                return userName.length < 5 || userName.length > 15 || !isHanEisu(userName) ||\r\n                    password.length < 5 || password.length > 15 || !isHanEisu(password) ||\r\n                    passConfirm.length < 5 || passConfirm.length > 15 || !isHanEisu(passConfirm);\r\n            }\r\n        }\r\n    }\r\n    return (<>\r\n        <div id=\"logo\"><span>Virtual Harmonizer</span></div>\r\n        <div id=\"login-frame\" ref={ref}>\r\n            <div className=\"guide\">\r\n                <span>Start to Virtual Harmonizer</span>\r\n            </div>\r\n            <div className=\"type\">\r\n                <LoginTypeSwitch\r\n                    curLoginType=\"guest\"\r\n                    name=\"guest\" loginType={loginType}\r\n                    setLoginType={setLoginType}\r\n                    resetError={() => setMessage('')}\r\n                />\r\n                <LoginTypeSwitch\r\n                    curLoginType=\"login\"\r\n                    name=\"login\" loginType={loginType}\r\n                    setLoginType={setLoginType}\r\n                    resetError={() => setMessage('')}\r\n                />\r\n                <LoginTypeSwitch\r\n                    curLoginType=\"create\"\r\n                    name=\"create account\" loginType={loginType}\r\n                    setLoginType={setLoginType}\r\n                    resetError={() => setMessage('')}\r\n                />\r\n            </div>\r\n            <div className=\"body\">\r\n                <TextForm\r\n                    label=\"user name\"\r\n                    stateValue={userName}\r\n                    stateSetter={setUserName}\r\n                    isMask={false}\r\n                    isDisable={!['login', 'create'].includes(loginType)}\r\n                />\r\n                <TextForm\r\n                    label=\"password\"\r\n                    stateValue={password}\r\n                    stateSetter={setPassword}\r\n                    isMask={true}\r\n                    isDisable={!['login', 'create'].includes(loginType)}\r\n                />\r\n                <TextForm\r\n                    label=\"password confirm\"\r\n                    stateValue={passConfirm}\r\n                    stateSetter={setPassConfirm}\r\n                    isMask={true}\r\n                    isDisable={!['create'].includes(loginType)}\r\n                />\r\n            </div>\r\n            <div className=\"message\">\r\n                <span className={isError ? 'error' : ''}>{message}</span>\r\n            </div>\r\n            <div\r\n                className={['opr', (enterDisable() || isLoading) ? 'disable' : ''].join(' ')}\r\n            >\r\n                <button\r\n                    onClick={() => {\r\n\r\n                        const login = (id: number, name: string) => {\r\n                            ref.current.style.opacity = '0';\r\n                            setTimeout(() => {\r\n                                dispatcher.setLoginParams({\r\n                                    ...state.login,\r\n                                    isLogin: true,\r\n                                    id,\r\n                                    name\r\n                                });\r\n                            }, 300);\r\n                        }\r\n                        setLoading(true);\r\n                        setError(false);\r\n                        setMessage('Connect to server...');\r\n                        switch (loginType) {\r\n                            case 'guest': {\r\n                                login(-1, 'Guest');\r\n                                setLoading(false);\r\n                            }\r\n                                break;\r\n                            case 'login': {\r\n\r\n                                sendQueryRequestToAPI('select', `SELECT * FROM user_tbl where name = '${userName}' and password = '${password}'`)\r\n                                    .then(response => {\r\n                                        return response.json();\r\n                                    })\r\n                                    .then(results => {\r\n                                        console.log(results.length);\r\n                                        const isExist = results.length > 0;\r\n                                        if (isExist) {\r\n                                            login(results[0].id, results[0].name);\r\n                                        } else {\r\n                                            setError(true);\r\n                                            setMessage('The login attempt failed. Either the user ID or password is invalid.');\r\n                                        }\r\n                                        setLoading(false);\r\n                                    })\r\n                                    .catch(error => {\r\n                                        console.log(error + \"失敗しました\");\r\n                                        setLoading(false);\r\n                                    });\r\n                            }\r\n                                break;\r\n                            case 'create': {\r\n\r\n                                if (password != passConfirm) {\r\n                                    setError(true);\r\n                                    setMessage(`Confirmation passwords don't match.`);\r\n                                    setLoading(false);\r\n                                    break;\r\n                                }\r\n\r\n                                (async () => {\r\n                                    let response = await sendQueryRequestToAPI('select', `SELECT count(*) as cnt FROM user_tbl where name = '${userName}'`);\r\n                                    let results = await response.json();\r\n                                    console.log(JSON.stringify(results[0].cnt));\r\n                                    const isExist = results[0].cnt > 0;\r\n                                    if (isExist) {\r\n                                        setError(true);\r\n                                        setMessage('That user id has already been recorded.');\r\n                                    } else {\r\n                                        response = await sendQueryRequestToAPI('update', `INSERT INTO user_tbl(name, password) VALUES('${userName}', '${password}')`);\r\n                                        results = await response.json();\r\n                                        setMessage('');\r\n                                        alert('You have successfully created an account!');\r\n                                        setLoginType('login');\r\n                                    }\r\n                                    setLoading(false);\r\n                                })();\r\n                            }\r\n                                break;\r\n                        }\r\n                    }}\r\n                >\r\n                    enter\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </>);\r\n}\r\n\r\nconst LoginTypeSwitch = (\r\n    props: {\r\n        name: string,\r\n        curLoginType: string,\r\n        loginType: string,\r\n        setLoginType: Function,\r\n        resetError: Function\r\n    }\r\n) => {\r\n    const isSelected = props.loginType == props.curLoginType;\r\n    return (\r\n        <button\r\n            className={isSelected ? 'active' : ''}\r\n            onClick={() => {\r\n                if (!isSelected) {\r\n                    props.setLoginType(props.curLoginType);\r\n                    props.resetError();\r\n                }\r\n            }}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nconst TextForm = (\r\n    props: {\r\n        label: string,\r\n        stateValue: string,\r\n        stateSetter: Function,\r\n        isMask: boolean,\r\n        isDisable: boolean\r\n    }\r\n) => {\r\n    useEffect(() => {\r\n        if (props.isDisable) {\r\n            props.stateSetter('');\r\n        }\r\n    }, [props.isDisable]);\r\n    const strLen = props.stateValue.length;\r\n    return (\r\n        <div className={['form', props.isDisable ? 'disable' : ''].join(' ')}>\r\n            <span>{props.label}:</span>\r\n            <input\r\n                className={[\r\n                    !props.isDisable && strLen == 0 ? 'required' : '',\r\n                    !props.isDisable && (strLen < 5 || strLen > 15) ? 'range' : '',\r\n                    !props.isDisable && !isHanEisu(props.stateValue) ? 'ban' : ''\r\n                ].join(' ')}\r\n                type={props.isMask ? 'password' : 'text'}\r\n                value={props.stateValue}\r\n                onChange={(e) => props.stateSetter(e.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst isHanEisu = (str: string) => {\r\n    str = (str == null) ? \"\" : str;\r\n    if (str.match(/^[A-Za-z0-9_!@]*$/)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default LoginFrame;","import { GlobalContext } from 'contents/MainFrame';\r\nimport { ActionType } from 'contents/redux/reducer';\r\nimport { useContext } from 'react';\r\nimport './UserPlate.css';\r\n\r\nconst UserPlate = (\r\n    props: {\r\n    }\r\n) => {\r\n    const { state, dispatch, dispatcher } = useContext(GlobalContext);\r\n    return (\r\n        <div id=\"user-plate\" className={[''].join(' ')}>\r\n            <div className=\"user-name\">\r\n                <span>{state.login.name}</span>\r\n            </div>\r\n            <div\r\n                className=\"logout\"\r\n\r\n                onClick={() => {\r\n                    dispatcher.score.setNoteData({\r\n                        ...state.noteData,\r\n                        dataList: []\r\n                    });\r\n                    dispatcher.setLoginParams({\r\n                        ...state.login,\r\n                        isLogin: false,\r\n                        name: ''\r\n                    });\r\n                    dispatch(ActionType.SELECT_SCORETAB, { index: 0 });\r\n                }}>\r\n                <span>LOGOUT</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserPlate;","import './MainFrame.css';\r\n\r\nimport TabbedPane from 'contents/common/TabbedPane';\r\nimport ScoreTab from 'contents/systab/score/ScoreTab';\r\n// import AccountTab from 'contents/tabs/account/AccountTab.jsx';\r\n// import ScoreTab from 'contents/tabs/score/ScoreTab.jsx';\r\nimport { initialState, Store, Action } from 'contents/redux/store';\r\nimport { ActionType, reducer } from 'contents/redux/reducer';\r\nimport { createContext, useReducer, KeyboardEvent } from 'react';\r\nimport { KeyboardShortCutAction } from './operation/InputNoteTab';\r\nimport { Dispatcher } from './redux/dispatcher';\r\nimport LoginFrame from './login/LoginFrame';\r\nimport UserPlate from './user/UserPlate';\r\n\r\ntype GlobalContextType = {\r\n    state: Store;\r\n    dispatch: Function;\r\n    dispatcher: Dispatcher;\r\n}\r\n\r\nexport const GlobalContext = createContext({} as GlobalContextType);\r\n\r\nconst MainFrame = () => {\r\n\r\n    const [state, dispatchBase] = useReducer(reducer, initialState);\r\n    const dispatch = (actionType: ActionType, payload: any) => dispatchBase({ type: actionType, payload: payload });\r\n    const dispatcher = new Dispatcher(state, dispatchBase);\r\n    return (\r\n        <div\r\n            id=\"main-frame\"\r\n            tabIndex={999}\r\n            onKeyDown={(e: KeyboardEvent) => KeyboardShortCutAction(e, state, dispatch, dispatcher)}\r\n        >\r\n            <GlobalContext.Provider value={{ state, dispatch, dispatcher }}>\r\n                {\r\n                    !state.login.isLogin ?\r\n                        <LoginFrame />\r\n                        :\r\n                        <>\r\n                            <UserPlate />\r\n                            <TabbedPane groupName=\"system-tabs\"\r\n                                tabElements={[\r\n                                    { name: 'Account', disable: true, cont: <div></div> },\r\n                                    { name: 'Palette', disable: true, cont: <div></div> },\r\n                                    { name: 'Score', disable: false, cont: <ScoreTab /> },\r\n                                    { name: 'Backing', disable: true, cont: <div></div> },\r\n                                    { name: 'Symbol', disable: true, cont: <div></div> },\r\n                                    { name: 'Sampler', disable: true, cont: <div></div> },\r\n                                    { name: 'Setting', disable: true, cont: <div></div> }\r\n                                ]}\r\n                                activeNo={2}\r\n                            />\r\n                        </>\r\n                }\r\n                {/* <>\r\n                    <LoginFrame />\r\n                    <UserPlate />\r\n                    <TabbedPane groupName=\"system-tabs\"\r\n                        tabElements={[\r\n                            { name: 'Account', disable: true, cont: <div></div> },\r\n                            { name: 'Palette', disable: true, cont: <div></div> },\r\n                            { name: 'Score', disable: false, cont: <ScoreTab /> },\r\n                            { name: 'Backing', disable: true, cont: <div></div> },\r\n                            { name: 'Symbol', disable: true, cont: <div></div> },\r\n                            { name: 'Sampler', disable: true, cont: <div></div> },\r\n                            { name: 'Setting', disable: true, cont: <div></div> }\r\n                        ]}\r\n                        activeNo={2}\r\n                    />\r\n                </> */}\r\n            </GlobalContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainFrame;\r\n","import { DIATONIC_MAJOR_SCALE_LIST, DIATONIC_MINOR_SCALE_LIST, KEY12_SHARP_LIST, SYMBOL_PARAMS_LIST } from \"contents/common/define\";\r\nimport { getSymbolParams } from \"contents/common/utils\";\r\nimport { Dispatcher } from \"contents/redux/dispatcher\";\r\nimport { ActionType } from \"contents/redux/reducer\";\r\nimport { BackingEditorState as BackingEditorState, BackingScript, BACKING_LEN_TYPE, BACKING_SIDE, ChordPaletteState, CHORD_MODE, DetailChange, DetailChord, DetailSection, EditMode, FloatWndState, NoteElement, Store, TypeNoteElement } from \"contents/redux/store\";\r\nimport { KeyboardEvent } from 'react';\r\n\r\n\r\n/**\r\n * 譜面編集時のキーボードショートカット\r\n * @param e キーボードイベント\r\n */\r\nexport const KeyboardShortCutAction = (e: KeyboardEvent, state: Store, dispatch: Function, dispatcher: Dispatcher) => {\r\n    // alert(e.key);\r\n\r\n    if (state.scoreTabIndex != 1) {\r\n        return;\r\n    }\r\n\r\n    const focusIndex = state.noteState.focusIndex;\r\n    const editMode = state.noteState.editMode;\r\n    const chordMode = state.noteData.chordMode;\r\n    const selectedData = state.noteData.dataList[focusIndex];\r\n    const selectedCache = state.noteState.cacheList[focusIndex];\r\n\r\n    switch (selectedData.type) {\r\n        case TypeNoteElement.Section: {\r\n            const detail = selectedData.detail as DetailSection;\r\n\r\n            switch (state.noteState.floatwndState) {\r\n                case FloatWndState.NONE: {\r\n\r\n                    if (editMode == EditMode.NORMAL) {\r\n                        switch (e.key) {\r\n                            case 'c': {\r\n                                dispatcher.score.callSectionEditor();\r\n                            }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                    break;\r\n                case FloatWndState.SECTION_PALETTE: {\r\n                    switch (e.key) {\r\n                        case 'Escape':\r\n                        case 'c':\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                            break;\r\n                    }\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n            break;\r\n        case TypeNoteElement.Change: {\r\n            const detail = selectedData.detail as DetailChange;\r\n\r\n            switch (state.noteState.floatwndState) {\r\n                case FloatWndState.NONE: {\r\n\r\n                    if (editMode == EditMode.NORMAL) {\r\n                        switch (e.key) {\r\n                            case 'c': {\r\n                                dispatcher.score.callChangeEditor();\r\n                            }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                    break;\r\n                case FloatWndState.CHANGE_PALETTE: {\r\n                    switch (e.key) {\r\n                        case 'Escape':\r\n                        case 'c':\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                            break;\r\n                    }\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n            break;\r\n        case TypeNoteElement.Chord: {\r\n            const detail = selectedData.detail as DetailChord;\r\n\r\n            switch (state.noteState.floatwndState) {\r\n                case FloatWndState.NONE: {\r\n\r\n                    if (editMode == EditMode.NORMAL) {\r\n                        switch (e.key) {\r\n                            case 'c': {\r\n                                dispatcher.score.callChordSelector();\r\n                            }\r\n                                break;\r\n                            case 'b': {\r\n                                if (detail.molecule != null) {\r\n                                    dispatcher.score.callBackingEditor();\r\n                                }\r\n                            }\r\n                                break;\r\n                            case '1':\r\n                            case '2':\r\n                            case '3':\r\n                            case '4':\r\n                            case '5':\r\n                            case '6':\r\n                            case '7': {\r\n                                if (chordMode == CHORD_MODE.DIRECT) break;\r\n                                const scaleList = selectedCache.init.scale == 'major' ? DIATONIC_MAJOR_SCALE_LIST : DIATONIC_MINOR_SCALE_LIST;\r\n                                const diatonicChord = scaleList[Number(e.key) - 1];\r\n                                // dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: diatonicChord.degreeIndex });\r\n                                // dispatch(ActionType.SET_SYMBOL_KEY, { pos: focusIndex, symbolKey: diatonicChord.symbolKey });\r\n\r\n                                detail.molecule = {rootIndex: diatonicChord.degreeIndex, isFlat: diatonicChord.isFlat};\r\n                                detail.symbolKey = diatonicChord.symbolKey;\r\n                                dispatcher.score.setNoteData(state.noteData);\r\n                                dispatcher.score.apllyFlashCur();\r\n                            }\r\n                                break;\r\n                            case 'x': {\r\n                                dispatcher.score.setCriteria();\r\n                            }\r\n                                break;\r\n                            case 'z': {\r\n                                fetch(\"https://vh-sqlite.glitch.me/select\", {\r\n                                    // fetch(\"http://localhost:5000/select\", {\r\n                                    mode: 'cors',\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                        Accept: 'application/json',\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({\r\n                                        sql: 'SELECT * FROM data_tbl where pos = 8'\r\n                                    })\r\n                                })\r\n                                    .then(response => {\r\n                                        return response.json();\r\n                                    })\r\n                                    .then(data => {\r\n                                        console.log(JSON.stringify(data));\r\n                                    })\r\n                                    .catch(error => {\r\n                                        console.log(error + \"失敗しました\");\r\n                                    });\r\n                            }\r\n                                break;\r\n                            case 'q': {\r\n                                fetch(\"https://vh-sqlite.glitch.me/update\", {\r\n                                    // fetch(\"http://localhost:5000/update\", {\r\n                                    mode: 'cors',\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                        Accept: 'application/json',\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify({\r\n\r\n                                        sql: `insert into data_tbl(pos, value) values(${focusIndex}, '${JSON.stringify(detail)}')`\r\n                                    })\r\n                                })\r\n                            }\r\n                                break;\r\n                            case ' ': {\r\n                                dispatcher.backing.play(true);\r\n                            }\r\n                                break;\r\n                        }\r\n                    } else if (editMode == EditMode.BACKING) {\r\n\r\n                        switch (e.key) {\r\n                            case 'Escape':\r\n                            case 'x': {\r\n                                dispatcher.score.releaseCriteria();\r\n                            }\r\n                                break;\r\n                            case 'Enter': {\r\n                                const dataList = state.noteData.dataList;\r\n                                const baseBacking = (dataList[state.noteState.criteriaIndex].detail as DetailChord).backing;\r\n                                state.noteState.selectedList.forEach((index) => {\r\n                                    (dataList[index].detail as DetailChord).backing = JSON.parse(JSON.stringify(baseBacking));\r\n                                });\r\n                                dispatcher.score.setNoteData({ ...state.noteData, dataList });\r\n                                dispatcher.score.releaseCriteria();\r\n                                dispatcher.score.apllyFlashList();\r\n                            }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                    break;\r\n                case FloatWndState.CHORD_PALETTE: {\r\n                    switch (e.key) {\r\n                        case 'Escape':\r\n                        case 'c':\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                            break;\r\n                        // case 'ArrowRight':\r\n                        //     dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: detail.molecule?.rootIndex + 1 });\r\n                        //     break;\r\n                        // case 'ArrowLeft':\r\n                        //     dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: detail.degreeIndex - 1 });\r\n                        //     break;\r\n                        // case '1':\r\n                        //     dispatch(ActionType.SET_DEGREE_INDEX, { pos: focusIndex, degreeIndex: detail.degreeIndex - 1 });\r\n                        //     break;\r\n                        case 'Enter': {\r\n                            dispatcher.chord.setCurChordParam();\r\n                        }\r\n                            break;\r\n                    }\r\n                }\r\n                    break;\r\n                case FloatWndState.BACKING_PALETTE: {\r\n                    const backing = state.noteState.backingPaletteState as BackingEditorState;\r\n                    const isCorrect = backing.isCorrect;\r\n                    switch (e.key) {\r\n                        case 'Escape':\r\n                        case 'b':\r\n                            dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.NONE });\r\n                            break;\r\n                        case 'ArrowLeft': {\r\n                            if (!dispatcher.backing.isFirstCurLen()) {\r\n                                const cur = dispatcher.backing.getCurLenIndex();\r\n                                dispatcher.backing.updateLenIndex(cur - 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'ArrowRight': {\r\n                            if (!dispatcher.backing.isLastCurLen()) {\r\n                                const cur = dispatcher.backing.getCurLenIndex();\r\n                                dispatcher.backing.updateLenIndex(cur + 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'ArrowUp': {\r\n                            const curVolume = dispatcher.backing.getCurVelocity();\r\n                            if (curVolume < 10) {\r\n                                dispatcher.backing.updateCurVolume(curVolume + 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'ArrowDown': {\r\n                            const curVolume = dispatcher.backing.getCurVelocity();\r\n                            if (curVolume > 1) {\r\n                                dispatcher.backing.updateCurVolume(curVolume - 1);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'r': {\r\n                            dispatcher.backing.changeLayerIndex();\r\n                        }\r\n                            break;\r\n                        case '1': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN16); break;\r\n                        case '2': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN8); break;\r\n                        case '3': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN4); break;\r\n                        case '4': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN2); break;\r\n                        case '5': dispatcher.backing.setCurLen(BACKING_LEN_TYPE.LEN1); break;\r\n                        case '.': {\r\n                            if (dispatcher.backing.isAcceptHalf()) {\r\n                                const curLenBean = dispatcher.backing.getCurLenBean();\r\n                                curLenBean.isHalf = !curLenBean.isHalf;\r\n                                curLenBean.isDiv3 = false;\r\n                                dispatcher.backing.setCurrentLenBean(curLenBean);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case '/': {\r\n                            if (dispatcher.backing.isAcceptDiv3()) {\r\n                                const curLenBean = dispatcher.backing.getCurLenBean();\r\n                                curLenBean.isDiv3 = !curLenBean.isDiv3;\r\n                                curLenBean.isHalf = false;\r\n                                dispatcher.backing.setCurrentLenBean(curLenBean);\r\n                            }\r\n                        }\r\n                            break;\r\n                        case 'a': {\r\n                            dispatcher.backing.addLen();\r\n                        }\r\n                            break;\r\n                        case 'Delete': {\r\n                            if (dispatcher.backing.getSideScript().lens.length > 1) {\r\n                                dispatcher.backing.delLen();\r\n                            }\r\n                        }\r\n                            break;\r\n\r\n                        case ' ': {\r\n                            if (isCorrect) {\r\n                                dispatcher.backing.play(false);\r\n                            }\r\n                        }\r\n                            break;\r\n                        // 設定を反映\r\n                        case 'Enter': {\r\n                            if (isCorrect) {\r\n                                dispatcher.backing.setCurBackingScript();\r\n                            }\r\n                        }\r\n                            break;\r\n                        // JSON取得（開発用）\r\n                        case 'z': {\r\n                            const script: BackingScript = {\r\n                                isUsePedal: backing.isUsePedal,\r\n                                layers: backing.layers,\r\n                                useChannels: backing.useChannels\r\n                            };\r\n                            alert(JSON.stringify(script));\r\n                        }\r\n                            break;\r\n                    }\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n            break;\r\n    }\r\n\r\n    if (state.noteState.floatwndState == FloatWndState.NONE &&\r\n        [TypeNoteElement.Chord, TypeNoteElement.Section, TypeNoteElement.Change].includes(selectedData.type)) {\r\n        if (editMode == EditMode.NORMAL) {\r\n            switch (e.key) {\r\n                case 'ArrowLeft': {\r\n                    dispatcher.score.focusPreviousElement();\r\n                }\r\n                    break;\r\n                case 'ArrowRight': {\r\n                    dispatcher.score.focusNextElement();\r\n                }\r\n                    break;\r\n                case 'ArrowUp': {\r\n                    dispatcher.score.focusPreviousSection();\r\n                }\r\n                    break;\r\n                case 'ArrowDown': {\r\n                    dispatcher.score.focusNextSection();\r\n                }\r\n                    break;\r\n                case 'Delete': {\r\n                    dispatcher.score.deleteCurElement();\r\n                }\r\n                    break;\r\n                case 'i': {\r\n                    dispatcher.score.focusInitElement();\r\n                }\r\n                    break;\r\n                case 'a':\r\n                    dispatcher.score.addChordElement();\r\n                    break;\r\n                case 's':\r\n                    dispatcher.score.addSectionElement();\r\n                    break;\r\n                case 'f':\r\n                    dispatcher.score.addChangeElement();\r\n                    break;\r\n                case 'w': {\r\n                    const detail = selectedData.detail as DetailChord;\r\n                    dispatch(ActionType.FLOATWND_STATE, { state: FloatWndState.CHORD_PALETTE });\r\n                    dispatch(ActionType.CHORD_PALETTE_SETTER, {\r\n                        params: {\r\n                            ...state.noteState.chordPaletteState,\r\n                            molecule: detail.molecule,\r\n                            denominator: detail.denominator,\r\n                            // rootIndex: detail.molecule?.rootIndex,\r\n                            // isFlat: detail.isFlat,\r\n                            symbolKey: detail.symbolKey,\r\n                            sustain: detail.sustain,\r\n                        } as ChordPaletteState\r\n                    });\r\n                }\r\n                    break;\r\n            }\r\n        } else if (editMode == EditMode.PREVIEW) {\r\n\r\n            switch (e.key) {\r\n                case ' ': {\r\n                    const threads = state.noteState.backingThreads;\r\n                    threads.forEach((thr) => {\r\n                        clearInterval(thr);\r\n                    });\r\n                    dispatcher.score.setNoteState({\r\n                        ...state.noteState,\r\n                        backingThreads: [], editMode: EditMode.NORMAL\r\n                    });\r\n                    state.sampler.releaseAll();\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n};","import React, { useEffect } from 'react';\r\n\r\n// import Tone from 'lib/Tone.min.js';\r\n// import Tone from \"react-tone\";\r\nimport * as Tone from \"tone\";\r\n\r\nimport './desty.css';\r\nimport './App.css';\r\nimport MainFrame from 'contents/MainFrame';\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    // 右クリック無効\r\n    document.oncontextmenu = function () { return false; }\r\n\r\n    window.addEventListener(\"keydown\", function (e) {\r\n      // space and arrow keys\r\n      if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\r\n        e.preventDefault();\r\n      }\r\n    }, false);\r\n\r\n  }, []);\r\n  return (\r\n    <MainFrame />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}